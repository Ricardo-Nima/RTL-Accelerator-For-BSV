//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
//
// On Tue Dec 27 17:30:02 CST 2022
//
//
// Ports:
// Name                         I/O  size props
// ibus_req                       O    32
// RDY_ibus_req                   O     1
// RDY_ibus_reqx                  O     1
// RDY_ibus_resp                  O     1
// dbus_req_fst                   O     1
// RDY_dbus_req_fst               O     1
// dbus_req_snd_fst               O     4
// RDY_dbus_req_snd_fst           O     1
// dbus_req_snd_snd_fst           O    32
// RDY_dbus_req_snd_snd_fst       O     1
// dbus_req_snd_snd_snd           O    32
// RDY_dbus_req_snd_snd_snd       O     1
// RDY_dbus_reqx                  O     1
// RDY_dbus_resp                  O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// boot_boot_addr                 I    32
// ibus_resp_rdata                I    32
// dbus_resp_rdata                I    32
// EN_boot                        I     1
// EN_ibus_reqx                   I     1
// EN_ibus_resp                   I     1
// EN_dbus_reqx                   I     1
// EN_dbus_resp                   I     1
//
// Combinational paths from inputs to outputs:
//   (ibus_resp_rdata, EN_ibus_resp) -> ibus_req
//   (ibus_resp_rdata, EN_ibus_resp) -> RDY_ibus_req
//   (ibus_resp_rdata, EN_ibus_resp) -> RDY_ibus_reqx
//
//
`include "/opt/bsc/lib/Verilog/BRAM2.v"
`include "/opt/bsc/lib/Verilog/SizedFIFO.v"
`include "/opt/bsc/lib/Verilog/FIFO2.v"
`include "/opt/bsc/lib/Verilog/FIFO1.v"
`include "/opt/bsc/lib/Verilog/BRAM1Load.v"
`include "/opt/bsc/lib/Verilog/RevertReg.v"
`include "/opt/bsc/lib/Verilog/BRAM2BELoad.v"

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkRv32iCPU(CLK,
		  RST_N,

		  boot_boot_addr,
		  EN_boot,

		  ibus_req,
		  RDY_ibus_req,

		  EN_ibus_reqx,
		  RDY_ibus_reqx,

		  ibus_resp_rdata,
		  EN_ibus_resp,
		  RDY_ibus_resp,

		  dbus_req_fst,
		  RDY_dbus_req_fst,

		  dbus_req_snd_fst,
		  RDY_dbus_req_snd_fst,

		  dbus_req_snd_snd_fst,
		  RDY_dbus_req_snd_snd_fst,

		  dbus_req_snd_snd_snd,
		  RDY_dbus_req_snd_snd_snd,

		  EN_dbus_reqx,
		  RDY_dbus_reqx,

		  dbus_resp_rdata,
		  EN_dbus_resp,
		  RDY_dbus_resp);
  input  CLK;
  input  RST_N;

  // action method boot
  input  [31 : 0] boot_boot_addr;
  input  EN_boot;

  // value method ibus_req
  output [31 : 0] ibus_req;
  output RDY_ibus_req;

  // action method ibus_reqx
  input  EN_ibus_reqx;
  output RDY_ibus_reqx;

  // action method ibus_resp
  input  [31 : 0] ibus_resp_rdata;
  input  EN_ibus_resp;
  output RDY_ibus_resp;

  // value method dbus_req_fst
  output dbus_req_fst;
  output RDY_dbus_req_fst;

  // value method dbus_req_snd_fst
  output [3 : 0] dbus_req_snd_fst;
  output RDY_dbus_req_snd_fst;

  // value method dbus_req_snd_snd_fst
  output [31 : 0] dbus_req_snd_snd_fst;
  output RDY_dbus_req_snd_snd_fst;

  // value method dbus_req_snd_snd_snd
  output [31 : 0] dbus_req_snd_snd_snd;
  output RDY_dbus_req_snd_snd_snd;

  // action method dbus_reqx
  input  EN_dbus_reqx;
  output RDY_dbus_reqx;

  // action method dbus_resp
  input  [31 : 0] dbus_resp_rdata;
  input  EN_dbus_resp;
  output RDY_dbus_resp;

  // signals for module outputs
  wire [31 : 0] dbus_req_snd_snd_fst, dbus_req_snd_snd_snd, ibus_req;
  wire [3 : 0] dbus_req_snd_fst;
  wire RDY_dbus_req_fst,
       RDY_dbus_req_snd_fst,
       RDY_dbus_req_snd_snd_fst,
       RDY_dbus_req_snd_snd_snd,
       RDY_dbus_reqx,
       RDY_dbus_resp,
       RDY_ibus_req,
       RDY_ibus_reqx,
       RDY_ibus_resp,
       dbus_req_fst;

  // inlined wires
  wire [69 : 0] lsq_rv$port0__write_1, lsq_rv$port1__read, lsq_rv$port2__read;
  wire [37 : 0] wb_1$wget;
  wire [32 : 0] boot_pc_1$wget,
		id_instr_rv$port0__write_1,
		id_instr_rv$port1__read,
		id_instr_rv$port2__read;
  wire _wset_RL_id_stage$EN_if_pc_enqw$wget,
       ex_dequeueing$whas,
       ex_enqueueing$whas,
       id_instr_rv$EN_port1__write,
       if_pc_enqw$whas,
       lsq_rv$EN_port0__write,
       wb_1$whas;

  // register boot_pc
  reg [32 : 0] boot_pc;
  wire [32 : 0] boot_pc$D_IN;
  wire boot_pc$EN;

  // register ex_cntr_r
  reg [1 : 0] ex_cntr_r;
  wire [1 : 0] ex_cntr_r$D_IN;
  wire ex_cntr_r$EN;

  // register ex_q_0
  reg [196 : 0] ex_q_0;
  reg [196 : 0] ex_q_0$D_IN;
  wire ex_q_0$EN;

  // register ex_q_1
  reg [196 : 0] ex_q_1;
  reg [196 : 0] ex_q_1$D_IN;
  wire ex_q_1$EN;

  // register id_instr_rv
  reg [32 : 0] id_instr_rv;
  wire [32 : 0] id_instr_rv$D_IN;
  wire id_instr_rv$EN;

  // register lsq_rv
  reg [69 : 0] lsq_rv;
  wire [69 : 0] lsq_rv$D_IN;
  wire lsq_rv$EN;

  // register regfile_0
  reg [31 : 0] regfile_0;
  wire [31 : 0] regfile_0$D_IN;
  wire regfile_0$EN;

  // register regfile_1
  reg [31 : 0] regfile_1;
  wire [31 : 0] regfile_1$D_IN;
  wire regfile_1$EN;

  // register regfile_10
  reg [31 : 0] regfile_10;
  wire [31 : 0] regfile_10$D_IN;
  wire regfile_10$EN;

  // register regfile_11
  reg [31 : 0] regfile_11;
  wire [31 : 0] regfile_11$D_IN;
  wire regfile_11$EN;

  // register regfile_12
  reg [31 : 0] regfile_12;
  wire [31 : 0] regfile_12$D_IN;
  wire regfile_12$EN;

  // register regfile_13
  reg [31 : 0] regfile_13;
  wire [31 : 0] regfile_13$D_IN;
  wire regfile_13$EN;

  // register regfile_14
  reg [31 : 0] regfile_14;
  wire [31 : 0] regfile_14$D_IN;
  wire regfile_14$EN;

  // register regfile_15
  reg [31 : 0] regfile_15;
  wire [31 : 0] regfile_15$D_IN;
  wire regfile_15$EN;

  // register regfile_16
  reg [31 : 0] regfile_16;
  wire [31 : 0] regfile_16$D_IN;
  wire regfile_16$EN;

  // register regfile_17
  reg [31 : 0] regfile_17;
  wire [31 : 0] regfile_17$D_IN;
  wire regfile_17$EN;

  // register regfile_18
  reg [31 : 0] regfile_18;
  wire [31 : 0] regfile_18$D_IN;
  wire regfile_18$EN;

  // register regfile_19
  reg [31 : 0] regfile_19;
  wire [31 : 0] regfile_19$D_IN;
  wire regfile_19$EN;

  // register regfile_2
  reg [31 : 0] regfile_2;
  wire [31 : 0] regfile_2$D_IN;
  wire regfile_2$EN;

  // register regfile_20
  reg [31 : 0] regfile_20;
  wire [31 : 0] regfile_20$D_IN;
  wire regfile_20$EN;

  // register regfile_21
  reg [31 : 0] regfile_21;
  wire [31 : 0] regfile_21$D_IN;
  wire regfile_21$EN;

  // register regfile_22
  reg [31 : 0] regfile_22;
  wire [31 : 0] regfile_22$D_IN;
  wire regfile_22$EN;

  // register regfile_23
  reg [31 : 0] regfile_23;
  wire [31 : 0] regfile_23$D_IN;
  wire regfile_23$EN;

  // register regfile_24
  reg [31 : 0] regfile_24;
  wire [31 : 0] regfile_24$D_IN;
  wire regfile_24$EN;

  // register regfile_25
  reg [31 : 0] regfile_25;
  wire [31 : 0] regfile_25$D_IN;
  wire regfile_25$EN;

  // register regfile_26
  reg [31 : 0] regfile_26;
  wire [31 : 0] regfile_26$D_IN;
  wire regfile_26$EN;

  // register regfile_27
  reg [31 : 0] regfile_27;
  wire [31 : 0] regfile_27$D_IN;
  wire regfile_27$EN;

  // register regfile_28
  reg [31 : 0] regfile_28;
  wire [31 : 0] regfile_28$D_IN;
  wire regfile_28$EN;

  // register regfile_29
  reg [31 : 0] regfile_29;
  wire [31 : 0] regfile_29$D_IN;
  wire regfile_29$EN;

  // register regfile_3
  reg [31 : 0] regfile_3;
  wire [31 : 0] regfile_3$D_IN;
  wire regfile_3$EN;

  // register regfile_30
  reg [31 : 0] regfile_30;
  wire [31 : 0] regfile_30$D_IN;
  wire regfile_30$EN;

  // register regfile_31
  reg [31 : 0] regfile_31;
  wire [31 : 0] regfile_31$D_IN;
  wire regfile_31$EN;

  // register regfile_4
  reg [31 : 0] regfile_4;
  wire [31 : 0] regfile_4$D_IN;
  wire regfile_4$EN;

  // register regfile_5
  reg [31 : 0] regfile_5;
  wire [31 : 0] regfile_5$D_IN;
  wire regfile_5$EN;

  // register regfile_6
  reg [31 : 0] regfile_6;
  wire [31 : 0] regfile_6$D_IN;
  wire regfile_6$EN;

  // register regfile_7
  reg [31 : 0] regfile_7;
  wire [31 : 0] regfile_7$D_IN;
  wire regfile_7$EN;

  // register regfile_8
  reg [31 : 0] regfile_8;
  wire [31 : 0] regfile_8$D_IN;
  wire regfile_8$EN;

  // register regfile_9
  reg [31 : 0] regfile_9;
  wire [31 : 0] regfile_9$D_IN;
  wire regfile_9$EN;

  // register wb
  reg [37 : 0] wb;
  wire [37 : 0] wb$D_IN;
  wire wb$EN;

  // ports of submodule id_pc
  wire [31 : 0] id_pc$D_IN, id_pc$D_OUT;
  wire id_pc$CLR, id_pc$DEQ, id_pc$EMPTY_N, id_pc$ENQ, id_pc$FULL_N;

  // ports of submodule if_pc_ff
  wire [31 : 0] if_pc_ff$D_IN, if_pc_ff$D_OUT;
  wire if_pc_ff$CLR,
       if_pc_ff$DEQ,
       if_pc_ff$EMPTY_N,
       if_pc_ff$ENQ,
       if_pc_ff$FULL_N;

  // ports of submodule if_pc_firstValid
  wire if_pc_firstValid$D_IN, if_pc_firstValid$EN, if_pc_firstValid$Q_OUT;

  // ports of submodule ld_fifo
  wire [196 : 0] ld_fifo$D_IN, ld_fifo$D_OUT;
  wire ld_fifo$CLR, ld_fifo$DEQ, ld_fifo$EMPTY_N, ld_fifo$ENQ, ld_fifo$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_enq_boot_pc,
       WILL_FIRE_RL_ex_both,
       WILL_FIRE_RL_ex_decCtr,
       WILL_FIRE_RL_ex_incCtr,
       WILL_FIRE_RL_ex_stage,
       WILL_FIRE_RL_id_stage;

  // inputs to muxes for submodule ports
  reg [31 : 0] MUX_regfile_0$write_1__VAL_2;
  wire [196 : 0] MUX_ex_q_0$write_1__VAL_1,
		 MUX_ex_q_0$write_1__VAL_2,
		 MUX_ex_q_1$write_1__VAL_2;
  wire [31 : 0] MUX_if_pc_enqw$wset_1__VAL_1,
		MUX_if_pc_enqw$wset_1__VAL_2,
		MUX_if_pc_enqw$wset_1__VAL_3;
  wire [1 : 0] MUX_ex_cntr_r$write_1__VAL_2;
  wire MUX_ex_q_0$write_1__SEL_1,
       MUX_ex_q_0$write_1__SEL_2,
       MUX_ex_q_1$write_1__SEL_1,
       MUX_ex_q_1$write_1__SEL_2,
       MUX_if_pc_enqw$wset_1__SEL_2,
       MUX_if_pc_enqw$wset_1__SEL_3,
       MUX_regfile_0$write_1__SEL_1,
       MUX_regfile_1$write_1__SEL_1,
       MUX_regfile_10$write_1__SEL_1,
       MUX_regfile_11$write_1__SEL_1,
       MUX_regfile_12$write_1__SEL_1,
       MUX_regfile_13$write_1__SEL_1,
       MUX_regfile_14$write_1__SEL_1,
       MUX_regfile_15$write_1__SEL_1,
       MUX_regfile_16$write_1__SEL_1,
       MUX_regfile_17$write_1__SEL_1,
       MUX_regfile_18$write_1__SEL_1,
       MUX_regfile_19$write_1__SEL_1,
       MUX_regfile_2$write_1__SEL_1,
       MUX_regfile_20$write_1__SEL_1,
       MUX_regfile_21$write_1__SEL_1,
       MUX_regfile_22$write_1__SEL_1,
       MUX_regfile_23$write_1__SEL_1,
       MUX_regfile_24$write_1__SEL_1,
       MUX_regfile_25$write_1__SEL_1,
       MUX_regfile_26$write_1__SEL_1,
       MUX_regfile_27$write_1__SEL_1,
       MUX_regfile_28$write_1__SEL_1,
       MUX_regfile_29$write_1__SEL_1,
       MUX_regfile_3$write_1__SEL_1,
       MUX_regfile_30$write_1__SEL_1,
       MUX_regfile_31$write_1__SEL_1,
       MUX_regfile_4$write_1__SEL_1,
       MUX_regfile_5$write_1__SEL_1,
       MUX_regfile_6$write_1__SEL_1,
       MUX_regfile_7$write_1__SEL_1,
       MUX_regfile_8$write_1__SEL_1,
       MUX_regfile_9$write_1__SEL_1;

  // remaining internal signals
  reg [31 : 0] CASE_ex_q_0_BITS_164_TO_158_0b10111_ex_q_0_BIT_ETC__q4,
	       CASE_ex_q_0_BITS_43_TO_34_CONCAT_ex_q_0_BITS_1_ETC__q3,
	       IF_ex_q_0_4_BITS_43_TO_34_88_CONCAT_ex_q_0_4_B_ETC___d341,
	       SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143,
	       SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149,
	       _theResult___snd__h7589,
	       x__h2546,
	       x__h6654;
  reg [3 : 0] _theResult___fst__h7588;
  reg IF_ex_q_0_4_BITS_36_TO_34_31_EQ_0b0_32_THEN_ex_ETC___d250;
  wire [31 : 0] IF_ex_q_0_4_BITS_36_TO_34_31_CONCAT_ex_q_0_4_B_ETC___d349,
		SEXT_IF_id_instr_rv_port1__read__9_BIT_32_0_TH_ETC___d176,
		b__h6669,
		dbus_resp_rdata_SRL_IF_ld_fifo_i_notEmpty__6_T_ETC___d416,
		ex_q_0_BITS_151_TO_120__q2,
		id_instr_rvport1__read_BITS_31_TO_0__q7,
		item_rsrc1_d__h4837,
		item_rsrc2_d__h5146,
		wdata___1__h7591,
		x__h7232,
		x__h7265,
		x__h7687,
		x__h7707,
		x__h8223,
		x__h8247,
		x_d__h7845,
		x_first_immu__h4775,
		x_first_rsrc1_d300_PLUS_x_first_immu775__q1,
		x_first_rsrc1_d__h9300,
		y__h7272;
  wire [20 : 0] id_instr_rvport1__read_BITS_31_TO_0_BIT_31_CON_ETC__q10;
  wire [15 : 0] dbus_resp_rdata_SRL_IF_ld_fifo_i_notEmpty__6_T_ETC__q6;
  wire [12 : 0] id_instr_rvport1__read_BITS_31_TO_0_BIT_31_CON_ETC__q9;
  wire [11 : 0] b__h6854,
		id_instr_rvport1__read_BITS_31_TO_0_BITS_31_TO_20__q8;
  wire [7 : 0] dbus_resp_rdata_SRL_IF_ld_fifo_i_notEmpty__6_T_ETC__q5;
  wire [4 : 0] shamt__h9214, x__h7710, y__h5061;
  wire [3 : 0] byte_en___1__h7590, byte_en___1__h7634, x__h7520;
  wire [1 : 0] ex_cntr_r_0_MINUS_1___d28;
  wire IF_id_instr_rv_port1__read__9_BIT_32_0_THEN_id_ETC___d108,
       IF_id_instr_rv_port1__read__9_BIT_32_0_THEN_id_ETC___d148,
       NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d204,
       NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d208,
       NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d76,
       NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d80,
       NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d82,
       NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d89,
       NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d92,
       NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d94,
       NOT_ld_fifo_i_notEmpty__6_7_OR_NOT_ld_fifo_fir_ETC___d210,
       NOT_ld_fifo_i_notEmpty__6_7_OR_NOT_ld_fifo_fir_ETC___d96,
       _dfoo1,
       _dfoo3,
       ex_q_0_4_BITS_151_TO_120_27_EQ_ex_q_0_4_BITS_1_ETC___d234,
       ex_q_0_4_BITS_151_TO_120_27_SLT_ex_q_0_4_BITS__ETC___d238,
       ex_q_0_4_BITS_151_TO_120_27_ULT_ex_q_0_4_BITS__ETC___d242;

  // value method ibus_req
  assign ibus_req = if_pc_ff$EMPTY_N ? if_pc_ff$D_OUT : x__h2546 ;
  assign RDY_ibus_req =
	     if_pc_firstValid$Q_OUT && (if_pc_ff$EMPTY_N || if_pc_enqw$whas) ;

  // action method ibus_reqx
  assign RDY_ibus_reqx =
	     if_pc_firstValid$Q_OUT &&
	     (if_pc_ff$EMPTY_N || if_pc_enqw$whas) &&
	     id_pc$FULL_N ;

  // action method ibus_resp
  assign RDY_ibus_resp = !id_instr_rv[32] ;

  // value method dbus_req_fst
  assign dbus_req_fst = lsq_rv$port1__read[68] ;
  assign RDY_dbus_req_fst = lsq_rv$port1__read[69] ;

  // value method dbus_req_snd_fst
  assign dbus_req_snd_fst = lsq_rv$port1__read[67:64] ;
  assign RDY_dbus_req_snd_fst = lsq_rv$port1__read[69] ;

  // value method dbus_req_snd_snd_fst
  assign dbus_req_snd_snd_fst = lsq_rv$port1__read[63:32] ;
  assign RDY_dbus_req_snd_snd_fst = lsq_rv$port1__read[69] ;

  // value method dbus_req_snd_snd_snd
  assign dbus_req_snd_snd_snd = lsq_rv$port1__read[31:0] ;
  assign RDY_dbus_req_snd_snd_snd = lsq_rv$port1__read[69] ;

  // action method dbus_reqx
  assign RDY_dbus_reqx = lsq_rv$port1__read[69] ;

  // action method dbus_resp
  assign RDY_dbus_resp = ld_fifo$EMPTY_N && ld_fifo$D_OUT[32] ;

  // submodule id_pc
  FIFO2 #(.width(32'd32), .guarded(1'd1)) id_pc(.RST(RST_N),
						.CLK(CLK),
						.D_IN(id_pc$D_IN),
						.ENQ(id_pc$ENQ),
						.DEQ(id_pc$DEQ),
						.CLR(id_pc$CLR),
						.D_OUT(id_pc$D_OUT),
						.FULL_N(id_pc$FULL_N),
						.EMPTY_N(id_pc$EMPTY_N));

  // submodule if_pc_ff
  FIFO2 #(.width(32'd32), .guarded(1'd0)) if_pc_ff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(if_pc_ff$D_IN),
						   .ENQ(if_pc_ff$ENQ),
						   .DEQ(if_pc_ff$DEQ),
						   .CLR(if_pc_ff$CLR),
						   .D_OUT(if_pc_ff$D_OUT),
						   .FULL_N(if_pc_ff$FULL_N),
						   .EMPTY_N(if_pc_ff$EMPTY_N));

  // submodule if_pc_firstValid
  RevertReg #(.width(32'd1), .init(1'd1)) if_pc_firstValid(.CLK(CLK),
							   .D_IN(if_pc_firstValid$D_IN),
							   .EN(if_pc_firstValid$EN),
							   .Q_OUT(if_pc_firstValid$Q_OUT));

  // submodule ld_fifo
  FIFO1 #(.width(32'd197), .guarded(1'd0)) ld_fifo(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(ld_fifo$D_IN),
						   .ENQ(ld_fifo$ENQ),
						   .DEQ(ld_fifo$DEQ),
						   .CLR(ld_fifo$CLR),
						   .D_OUT(ld_fifo$D_OUT),
						   .FULL_N(ld_fifo$FULL_N),
						   .EMPTY_N(ld_fifo$EMPTY_N));

  // rule RL_id_stage
  assign WILL_FIRE_RL_id_stage =
	     id_instr_rv$port1__read[32] && ex_cntr_r != 2'd2 &&
	     id_pc$EMPTY_N &&
	     if_pc_ff$FULL_N &&
	     !WILL_FIRE_RL_enq_boot_pc ;

  // rule RL_ex_stage
  assign WILL_FIRE_RL_ex_stage =
	     if_pc_ff$FULL_N && !lsq_rv[69] && ld_fifo$FULL_N &&
	     !WILL_FIRE_RL_enq_boot_pc ;

  // rule RL_enq_boot_pc
  assign WILL_FIRE_RL_enq_boot_pc = if_pc_ff$FULL_N && boot_pc[32] ;

  // rule RL_ex_incCtr
  assign WILL_FIRE_RL_ex_incCtr =
	     ex_enqueueing$whas && ex_enqueueing$whas && !ex_dequeueing$whas ;

  // rule RL_ex_decCtr
  assign WILL_FIRE_RL_ex_decCtr = ex_dequeueing$whas && !ex_enqueueing$whas ;

  // rule RL_ex_both
  assign WILL_FIRE_RL_ex_both =
	     ex_enqueueing$whas && ex_dequeueing$whas && ex_enqueueing$whas ;

  // inputs to muxes for submodule ports
  assign MUX_ex_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_ex_incCtr && ex_cntr_r == 2'd0 ;
  assign MUX_ex_q_0$write_1__SEL_2 = WILL_FIRE_RL_ex_both && _dfoo3 ;
  assign MUX_ex_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_ex_incCtr && ex_cntr_r == 2'd1 ;
  assign MUX_ex_q_1$write_1__SEL_2 = WILL_FIRE_RL_ex_both && _dfoo1 ;
  assign MUX_if_pc_enqw$wset_1__SEL_2 =
	     WILL_FIRE_RL_ex_stage &&
	     (ex_q_0[164:158] == 7'd103 || ex_q_0[164:158] == 7'd99) ;
  assign MUX_if_pc_enqw$wset_1__SEL_3 =
	     WILL_FIRE_RL_id_stage &&
	     NOT_ld_fifo_i_notEmpty__6_7_OR_NOT_ld_fifo_fir_ETC___d210 &&
	     id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd103 &&
	     id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd99 ;
  assign MUX_regfile_0$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd0 ;
  assign MUX_regfile_1$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd1 ;
  assign MUX_regfile_10$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd10 ;
  assign MUX_regfile_11$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd11 ;
  assign MUX_regfile_12$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd12 ;
  assign MUX_regfile_13$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd13 ;
  assign MUX_regfile_14$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd14 ;
  assign MUX_regfile_15$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd15 ;
  assign MUX_regfile_16$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd16 ;
  assign MUX_regfile_17$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd17 ;
  assign MUX_regfile_18$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd18 ;
  assign MUX_regfile_19$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd19 ;
  assign MUX_regfile_2$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd2 ;
  assign MUX_regfile_20$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd20 ;
  assign MUX_regfile_21$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd21 ;
  assign MUX_regfile_22$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd22 ;
  assign MUX_regfile_23$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd23 ;
  assign MUX_regfile_24$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd24 ;
  assign MUX_regfile_25$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd25 ;
  assign MUX_regfile_26$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd26 ;
  assign MUX_regfile_27$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd27 ;
  assign MUX_regfile_28$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd28 ;
  assign MUX_regfile_29$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd29 ;
  assign MUX_regfile_3$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd3 ;
  assign MUX_regfile_30$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd30 ;
  assign MUX_regfile_31$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd31 ;
  assign MUX_regfile_4$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd4 ;
  assign MUX_regfile_5$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd5 ;
  assign MUX_regfile_6$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd6 ;
  assign MUX_regfile_7$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd7 ;
  assign MUX_regfile_8$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd8 ;
  assign MUX_regfile_9$write_1__SEL_1 = wb[37] && wb[36:32] == 5'd9 ;
  assign MUX_ex_cntr_r$write_1__VAL_2 = ex_cntr_r + 2'd1 ;
  assign MUX_ex_q_0$write_1__VAL_1 =
	     { id_pc$D_OUT,
	       id_instr_rvport1__read_BITS_31_TO_0__q7[6:0],
	       id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd19 ||
	       id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd3 ||
	       id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd103 ||
	       id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd51 ||
	       id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd35 ||
	       id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd99,
	       id_instr_rvport1__read_BITS_31_TO_0__q7[19:15],
	       item_rsrc1_d__h4837,
	       id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd51 ||
	       id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd35 ||
	       id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd99,
	       id_instr_rvport1__read_BITS_31_TO_0__q7[24:20],
	       item_rsrc2_d__h5146,
	       id_instr_rvport1__read_BITS_31_TO_0__q7[11:7] != 5'd0 &&
	       (id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd3 ||
		id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd111 ||
		id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd103 ||
		id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd55 ||
		id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd23 ||
		id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd19 ||
		id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd51),
	       id_instr_rvport1__read_BITS_31_TO_0__q7[11:7],
	       32'd0,
	       id_instr_rvport1__read_BITS_31_TO_0__q7[31:25],
	       id_instr_rvport1__read_BITS_31_TO_0__q7[14:12],
	       id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd35,
	       id_instr_rvport1__read_BITS_31_TO_0__q7[11:7] != 5'd0 &&
	       id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd3,
	       x__h6654 } ;
  assign MUX_ex_q_0$write_1__VAL_2 =
	     (ex_cntr_r == 2'd1) ? MUX_ex_q_0$write_1__VAL_1 : ex_q_1 ;
  assign MUX_ex_q_1$write_1__VAL_2 =
	     (ex_cntr_r == 2'd2) ? MUX_ex_q_0$write_1__VAL_1 : 197'd0 ;
  assign MUX_if_pc_enqw$wset_1__VAL_1 = boot_pc[32] ? boot_pc[31:0] : 32'd0 ;
  assign MUX_if_pc_enqw$wset_1__VAL_2 =
	     (ex_q_0[164:158] == 7'd103) ? x__h7232 : x__h7265 ;
  assign MUX_if_pc_enqw$wset_1__VAL_3 =
	     (id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd111) ?
	       id_pc$D_OUT + x__h6654 :
	       id_pc$D_OUT + 32'd4 ;
  always@(ld_fifo$EMPTY_N or
	  ld_fifo$D_OUT or
	  dbus_resp_rdata or
	  dbus_resp_rdata_SRL_IF_ld_fifo_i_notEmpty__6_T_ETC__q5 or
	  dbus_resp_rdata_SRL_IF_ld_fifo_i_notEmpty__6_T_ETC__q6 or
	  dbus_resp_rdata_SRL_IF_ld_fifo_i_notEmpty__6_T_ETC___d416)
  begin
    case (ld_fifo$EMPTY_N ? ld_fifo$D_OUT[36:34] : 3'd0)
      3'b0:
	  MUX_regfile_0$write_1__VAL_2 =
	      { {24{dbus_resp_rdata_SRL_IF_ld_fifo_i_notEmpty__6_T_ETC__q5[7]}},
		dbus_resp_rdata_SRL_IF_ld_fifo_i_notEmpty__6_T_ETC__q5 };
      3'b001:
	  MUX_regfile_0$write_1__VAL_2 =
	      { {16{dbus_resp_rdata_SRL_IF_ld_fifo_i_notEmpty__6_T_ETC__q6[15]}},
		dbus_resp_rdata_SRL_IF_ld_fifo_i_notEmpty__6_T_ETC__q6 };
      3'b100:
	  MUX_regfile_0$write_1__VAL_2 =
	      { 24'd0,
		dbus_resp_rdata_SRL_IF_ld_fifo_i_notEmpty__6_T_ETC___d416[7:0] };
      3'b101:
	  MUX_regfile_0$write_1__VAL_2 =
	      { 16'd0,
		dbus_resp_rdata_SRL_IF_ld_fifo_i_notEmpty__6_T_ETC___d416[15:0] };
      default: MUX_regfile_0$write_1__VAL_2 = dbus_resp_rdata;
    endcase
  end

  // inlined wires
  assign boot_pc_1$wget = { 1'd1, boot_boot_addr } ;
  assign if_pc_enqw$whas =
	     WILL_FIRE_RL_id_stage &&
	     NOT_ld_fifo_i_notEmpty__6_7_OR_NOT_ld_fifo_fir_ETC___d210 &&
	     id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd103 &&
	     id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd99 ||
	     WILL_FIRE_RL_ex_stage &&
	     (ex_q_0[164:158] == 7'd103 || ex_q_0[164:158] == 7'd99) ||
	     WILL_FIRE_RL_enq_boot_pc ;
  assign wb_1$wget = { ex_q_0[81:76], x_d__h7845 } ;
  assign wb_1$whas = WILL_FIRE_RL_ex_stage && !ex_q_0[33] && !ex_q_0[32] ;
  assign _wset_RL_id_stage$EN_if_pc_enqw$wget =
	     NOT_ld_fifo_i_notEmpty__6_7_OR_NOT_ld_fifo_fir_ETC___d210 &&
	     id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd103 &&
	     id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd99 ;
  assign ex_enqueueing$whas =
	     WILL_FIRE_RL_id_stage &&
	     NOT_ld_fifo_i_notEmpty__6_7_OR_NOT_ld_fifo_fir_ETC___d96 ;
  assign ex_dequeueing$whas = WILL_FIRE_RL_ex_stage && ex_cntr_r != 2'd0 ;
  assign id_instr_rv$port0__write_1 = { 1'd1, ibus_resp_rdata } ;
  assign id_instr_rv$port1__read =
	     EN_ibus_resp ? id_instr_rv$port0__write_1 : id_instr_rv ;
  assign id_instr_rv$EN_port1__write =
	     WILL_FIRE_RL_id_stage &&
	     NOT_ld_fifo_i_notEmpty__6_7_OR_NOT_ld_fifo_fir_ETC___d96 ;
  assign id_instr_rv$port2__read =
	     id_instr_rv$EN_port1__write ?
	       33'h0AAAAAAAA :
	       id_instr_rv$port1__read ;
  assign lsq_rv$EN_port0__write =
	     WILL_FIRE_RL_ex_stage && (ex_q_0[33] || ex_q_0[32]) ;
  assign lsq_rv$port0__write_1 =
	     { 1'd1, ex_q_0[33], x__h7520, x__h7687, x__h7707 } ;
  assign lsq_rv$port1__read =
	     lsq_rv$EN_port0__write ? lsq_rv$port0__write_1 : lsq_rv ;
  assign lsq_rv$port2__read =
	     EN_dbus_reqx ? 70'h0AAAAAAAAAAAAAAAAA : lsq_rv$port1__read ;

  // register boot_pc
  assign boot_pc$D_IN = EN_boot ? boot_pc_1$wget : 33'h0AAAAAAAA ;
  assign boot_pc$EN = 1'd1 ;

  // register ex_cntr_r
  assign ex_cntr_r$D_IN =
	     WILL_FIRE_RL_ex_decCtr ?
	       ex_cntr_r_0_MINUS_1___d28 :
	       MUX_ex_cntr_r$write_1__VAL_2 ;
  assign ex_cntr_r$EN = WILL_FIRE_RL_ex_decCtr || WILL_FIRE_RL_ex_incCtr ;

  // register ex_q_0
  always@(MUX_ex_q_0$write_1__SEL_1 or
	  MUX_ex_q_0$write_1__VAL_1 or
	  MUX_ex_q_0$write_1__SEL_2 or
	  MUX_ex_q_0$write_1__VAL_2 or WILL_FIRE_RL_ex_decCtr or ex_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ex_q_0$write_1__SEL_1: ex_q_0$D_IN = MUX_ex_q_0$write_1__VAL_1;
      MUX_ex_q_0$write_1__SEL_2: ex_q_0$D_IN = MUX_ex_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ex_decCtr: ex_q_0$D_IN = ex_q_1;
      default: ex_q_0$D_IN =
		   197'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ex_q_0$EN =
	     WILL_FIRE_RL_ex_incCtr && ex_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_ex_both && _dfoo3 ||
	     WILL_FIRE_RL_ex_decCtr ;

  // register ex_q_1
  always@(MUX_ex_q_1$write_1__SEL_1 or
	  MUX_ex_q_0$write_1__VAL_1 or
	  MUX_ex_q_1$write_1__SEL_2 or
	  MUX_ex_q_1$write_1__VAL_2 or WILL_FIRE_RL_ex_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ex_q_1$write_1__SEL_1: ex_q_1$D_IN = MUX_ex_q_0$write_1__VAL_1;
      MUX_ex_q_1$write_1__SEL_2: ex_q_1$D_IN = MUX_ex_q_1$write_1__VAL_2;
      WILL_FIRE_RL_ex_decCtr: ex_q_1$D_IN = 197'd0;
      default: ex_q_1$D_IN =
		   197'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ex_q_1$EN =
	     WILL_FIRE_RL_ex_incCtr && ex_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_ex_both && _dfoo1 ||
	     WILL_FIRE_RL_ex_decCtr ;

  // register id_instr_rv
  assign id_instr_rv$D_IN = id_instr_rv$port2__read ;
  assign id_instr_rv$EN = 1'b1 ;

  // register lsq_rv
  assign lsq_rv$D_IN = lsq_rv$port2__read ;
  assign lsq_rv$EN = 1'b1 ;

  // register regfile_0
  assign regfile_0$D_IN =
	     MUX_regfile_0$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_0$EN =
	     wb[37] && wb[36:32] == 5'd0 || EN_dbus_resp && y__h5061 == 5'd0 ;

  // register regfile_1
  assign regfile_1$D_IN =
	     MUX_regfile_1$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_1$EN =
	     wb[37] && wb[36:32] == 5'd1 || EN_dbus_resp && y__h5061 == 5'd1 ;

  // register regfile_10
  assign regfile_10$D_IN =
	     MUX_regfile_10$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_10$EN =
	     wb[37] && wb[36:32] == 5'd10 ||
	     EN_dbus_resp && y__h5061 == 5'd10 ;

  // register regfile_11
  assign regfile_11$D_IN =
	     MUX_regfile_11$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_11$EN =
	     wb[37] && wb[36:32] == 5'd11 ||
	     EN_dbus_resp && y__h5061 == 5'd11 ;

  // register regfile_12
  assign regfile_12$D_IN =
	     MUX_regfile_12$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_12$EN =
	     wb[37] && wb[36:32] == 5'd12 ||
	     EN_dbus_resp && y__h5061 == 5'd12 ;

  // register regfile_13
  assign regfile_13$D_IN =
	     MUX_regfile_13$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_13$EN =
	     wb[37] && wb[36:32] == 5'd13 ||
	     EN_dbus_resp && y__h5061 == 5'd13 ;

  // register regfile_14
  assign regfile_14$D_IN =
	     MUX_regfile_14$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_14$EN =
	     wb[37] && wb[36:32] == 5'd14 ||
	     EN_dbus_resp && y__h5061 == 5'd14 ;

  // register regfile_15
  assign regfile_15$D_IN =
	     MUX_regfile_15$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_15$EN =
	     wb[37] && wb[36:32] == 5'd15 ||
	     EN_dbus_resp && y__h5061 == 5'd15 ;

  // register regfile_16
  assign regfile_16$D_IN =
	     MUX_regfile_16$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_16$EN =
	     wb[37] && wb[36:32] == 5'd16 ||
	     EN_dbus_resp && y__h5061 == 5'd16 ;

  // register regfile_17
  assign regfile_17$D_IN =
	     MUX_regfile_17$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_17$EN =
	     wb[37] && wb[36:32] == 5'd17 ||
	     EN_dbus_resp && y__h5061 == 5'd17 ;

  // register regfile_18
  assign regfile_18$D_IN =
	     MUX_regfile_18$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_18$EN =
	     wb[37] && wb[36:32] == 5'd18 ||
	     EN_dbus_resp && y__h5061 == 5'd18 ;

  // register regfile_19
  assign regfile_19$D_IN =
	     MUX_regfile_19$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_19$EN =
	     wb[37] && wb[36:32] == 5'd19 ||
	     EN_dbus_resp && y__h5061 == 5'd19 ;

  // register regfile_2
  assign regfile_2$D_IN =
	     MUX_regfile_2$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_2$EN =
	     wb[37] && wb[36:32] == 5'd2 || EN_dbus_resp && y__h5061 == 5'd2 ;

  // register regfile_20
  assign regfile_20$D_IN =
	     MUX_regfile_20$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_20$EN =
	     wb[37] && wb[36:32] == 5'd20 ||
	     EN_dbus_resp && y__h5061 == 5'd20 ;

  // register regfile_21
  assign regfile_21$D_IN =
	     MUX_regfile_21$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_21$EN =
	     wb[37] && wb[36:32] == 5'd21 ||
	     EN_dbus_resp && y__h5061 == 5'd21 ;

  // register regfile_22
  assign regfile_22$D_IN =
	     MUX_regfile_22$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_22$EN =
	     wb[37] && wb[36:32] == 5'd22 ||
	     EN_dbus_resp && y__h5061 == 5'd22 ;

  // register regfile_23
  assign regfile_23$D_IN =
	     MUX_regfile_23$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_23$EN =
	     wb[37] && wb[36:32] == 5'd23 ||
	     EN_dbus_resp && y__h5061 == 5'd23 ;

  // register regfile_24
  assign regfile_24$D_IN =
	     MUX_regfile_24$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_24$EN =
	     wb[37] && wb[36:32] == 5'd24 ||
	     EN_dbus_resp && y__h5061 == 5'd24 ;

  // register regfile_25
  assign regfile_25$D_IN =
	     MUX_regfile_25$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_25$EN =
	     wb[37] && wb[36:32] == 5'd25 ||
	     EN_dbus_resp && y__h5061 == 5'd25 ;

  // register regfile_26
  assign regfile_26$D_IN =
	     MUX_regfile_26$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_26$EN =
	     wb[37] && wb[36:32] == 5'd26 ||
	     EN_dbus_resp && y__h5061 == 5'd26 ;

  // register regfile_27
  assign regfile_27$D_IN =
	     MUX_regfile_27$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_27$EN =
	     wb[37] && wb[36:32] == 5'd27 ||
	     EN_dbus_resp && y__h5061 == 5'd27 ;

  // register regfile_28
  assign regfile_28$D_IN =
	     MUX_regfile_28$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_28$EN =
	     wb[37] && wb[36:32] == 5'd28 ||
	     EN_dbus_resp && y__h5061 == 5'd28 ;

  // register regfile_29
  assign regfile_29$D_IN =
	     MUX_regfile_29$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_29$EN =
	     wb[37] && wb[36:32] == 5'd29 ||
	     EN_dbus_resp && y__h5061 == 5'd29 ;

  // register regfile_3
  assign regfile_3$D_IN =
	     MUX_regfile_3$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_3$EN =
	     wb[37] && wb[36:32] == 5'd3 || EN_dbus_resp && y__h5061 == 5'd3 ;

  // register regfile_30
  assign regfile_30$D_IN =
	     MUX_regfile_30$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_30$EN =
	     wb[37] && wb[36:32] == 5'd30 ||
	     EN_dbus_resp && y__h5061 == 5'd30 ;

  // register regfile_31
  assign regfile_31$D_IN =
	     MUX_regfile_31$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_31$EN =
	     wb[37] && wb[36:32] == 5'd31 ||
	     EN_dbus_resp && y__h5061 == 5'd31 ;

  // register regfile_4
  assign regfile_4$D_IN =
	     MUX_regfile_4$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_4$EN =
	     wb[37] && wb[36:32] == 5'd4 || EN_dbus_resp && y__h5061 == 5'd4 ;

  // register regfile_5
  assign regfile_5$D_IN =
	     MUX_regfile_5$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_5$EN =
	     wb[37] && wb[36:32] == 5'd5 || EN_dbus_resp && y__h5061 == 5'd5 ;

  // register regfile_6
  assign regfile_6$D_IN =
	     MUX_regfile_6$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_6$EN =
	     wb[37] && wb[36:32] == 5'd6 || EN_dbus_resp && y__h5061 == 5'd6 ;

  // register regfile_7
  assign regfile_7$D_IN =
	     MUX_regfile_7$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_7$EN =
	     wb[37] && wb[36:32] == 5'd7 || EN_dbus_resp && y__h5061 == 5'd7 ;

  // register regfile_8
  assign regfile_8$D_IN =
	     MUX_regfile_8$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_8$EN =
	     wb[37] && wb[36:32] == 5'd8 || EN_dbus_resp && y__h5061 == 5'd8 ;

  // register regfile_9
  assign regfile_9$D_IN =
	     MUX_regfile_9$write_1__SEL_1 ?
	       wb[31:0] :
	       MUX_regfile_0$write_1__VAL_2 ;
  assign regfile_9$EN =
	     wb[37] && wb[36:32] == 5'd9 || EN_dbus_resp && y__h5061 == 5'd9 ;

  // register wb
  assign wb$D_IN = wb_1$whas ? wb_1$wget : 38'd0 ;
  assign wb$EN = 1'd1 ;

  // submodule id_pc
  assign id_pc$D_IN = if_pc_ff$EMPTY_N ? if_pc_ff$D_OUT : x__h2546 ;
  assign id_pc$ENQ = EN_ibus_reqx ;
  assign id_pc$DEQ = ex_enqueueing$whas ;
  assign id_pc$CLR = 1'b0 ;

  // submodule if_pc_ff
  assign if_pc_ff$D_IN = x__h2546 ;
  assign if_pc_ff$ENQ =
	     if_pc_enqw$whas && (!EN_ibus_reqx || if_pc_ff$EMPTY_N) ;
  assign if_pc_ff$DEQ = EN_ibus_reqx && if_pc_ff$EMPTY_N ;
  assign if_pc_ff$CLR = 1'b0 ;

  // submodule if_pc_firstValid
  assign if_pc_firstValid$D_IN = 1'd1 ;
  assign if_pc_firstValid$EN = EN_ibus_reqx ;

  // submodule ld_fifo
  assign ld_fifo$D_IN = ex_q_0 ;
  assign ld_fifo$ENQ = WILL_FIRE_RL_ex_stage && ex_q_0[32] ;
  assign ld_fifo$DEQ = EN_dbus_resp ;
  assign ld_fifo$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_ex_q_0_4_BITS_36_TO_34_31_CONCAT_ex_q_0_4_B_ETC___d349 =
	     ({ ex_q_0[36:34], ex_q_0[164:158] } == 10'b0000010011) ?
	       x__h7232 :
	       CASE_ex_q_0_BITS_43_TO_34_CONCAT_ex_q_0_BITS_1_ETC__q3 ;
  assign IF_id_instr_rv_port1__read__9_BIT_32_0_THEN_id_ETC___d108 =
	     (id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd19 ||
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd3 ||
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd103 ||
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd51 ||
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd35 ||
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd99) &&
	     wb[37] &&
	     id_instr_rvport1__read_BITS_31_TO_0__q7[19:15] == wb[36:32] ;
  assign IF_id_instr_rv_port1__read__9_BIT_32_0_THEN_id_ETC___d148 =
	     (id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd51 ||
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd35 ||
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] == 7'd99) &&
	     wb[37] &&
	     id_instr_rvport1__read_BITS_31_TO_0__q7[24:20] == wb[36:32] ;
  assign NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d204 =
	     (id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd19 &&
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd3 &&
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd51 &&
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd35 ||
	      NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d76) &&
	     (id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd51 &&
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd35 ||
	      NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d80) ;
  assign NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d208 =
	     (id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd19 &&
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd3 &&
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd51 &&
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd35 ||
	      NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d89) &&
	     (id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd51 &&
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd35 ||
	      NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d92) ;
  assign NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d76 =
	     id_instr_rvport1__read_BITS_31_TO_0__q7[19:15] != y__h5061 ;
  assign NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d80 =
	     id_instr_rvport1__read_BITS_31_TO_0__q7[24:20] != y__h5061 ;
  assign NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d82 =
	     (id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd19 &&
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd3 &&
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd103 &&
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd51 &&
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd35 &&
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd99 ||
	      NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d76) &&
	     (id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd51 &&
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd35 &&
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd99 ||
	      NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d80) ;
  assign NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d89 =
	     id_instr_rvport1__read_BITS_31_TO_0__q7[19:15] != ex_q_0[80:76] ;
  assign NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d92 =
	     id_instr_rvport1__read_BITS_31_TO_0__q7[24:20] != ex_q_0[80:76] ;
  assign NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d94 =
	     (id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd19 &&
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd3 &&
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd103 &&
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd51 &&
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd35 &&
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd99 ||
	      NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d89) &&
	     (id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd51 &&
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd35 &&
	      id_instr_rvport1__read_BITS_31_TO_0__q7[6:0] != 7'd99 ||
	      NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d92) ;
  assign NOT_ld_fifo_i_notEmpty__6_7_OR_NOT_ld_fifo_fir_ETC___d210 =
	     (!ld_fifo$EMPTY_N || !ld_fifo$D_OUT[32] ||
	      NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d204) &&
	     (!ex_q_0[81] ||
	      NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d208) ;
  assign NOT_ld_fifo_i_notEmpty__6_7_OR_NOT_ld_fifo_fir_ETC___d96 =
	     (!ld_fifo$EMPTY_N || !ld_fifo$D_OUT[32] ||
	      NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d82) &&
	     (!ex_q_0[81] ||
	      NOT_IF_id_instr_rv_port1__read__9_BIT_32_0_THE_ETC___d94) ;
  assign SEXT_IF_id_instr_rv_port1__read__9_BIT_32_0_TH_ETC___d176 =
	     { {20{id_instr_rvport1__read_BITS_31_TO_0_BITS_31_TO_20__q8[11]}},
	       id_instr_rvport1__read_BITS_31_TO_0_BITS_31_TO_20__q8 } ;
  assign _dfoo1 = ex_cntr_r != 2'd2 || ex_cntr_r_0_MINUS_1___d28 == 2'd1 ;
  assign _dfoo3 = ex_cntr_r != 2'd1 || ex_cntr_r_0_MINUS_1___d28 == 2'd0 ;
  assign b__h6669 =
	     { id_instr_rvport1__read_BITS_31_TO_0__q7[31:12], 12'h0 } ;
  assign b__h6854 =
	     { id_instr_rvport1__read_BITS_31_TO_0__q7[31:25],
	       id_instr_rvport1__read_BITS_31_TO_0__q7[11:7] } ;
  assign byte_en___1__h7590 = 4'b0001 << x__h7232[1:0] ;
  assign byte_en___1__h7634 = 4'b0011 << x__h7232[1:0] ;
  assign dbus_resp_rdata_SRL_IF_ld_fifo_i_notEmpty__6_T_ETC___d416 =
	     dbus_resp_rdata >> shamt__h9214 ;
  assign dbus_resp_rdata_SRL_IF_ld_fifo_i_notEmpty__6_T_ETC__q5 =
	     dbus_resp_rdata_SRL_IF_ld_fifo_i_notEmpty__6_T_ETC___d416[7:0] ;
  assign dbus_resp_rdata_SRL_IF_ld_fifo_i_notEmpty__6_T_ETC__q6 =
	     dbus_resp_rdata_SRL_IF_ld_fifo_i_notEmpty__6_T_ETC___d416[15:0] ;
  assign ex_cntr_r_0_MINUS_1___d28 = ex_cntr_r - 2'd1 ;
  assign ex_q_0_4_BITS_151_TO_120_27_EQ_ex_q_0_4_BITS_1_ETC___d234 =
	     ex_q_0[151:120] == ex_q_0[113:82] ;
  assign ex_q_0_4_BITS_151_TO_120_27_SLT_ex_q_0_4_BITS__ETC___d238 =
	     (ex_q_0[151:120] ^ 32'h80000000) <
	     (ex_q_0[113:82] ^ 32'h80000000) ;
  assign ex_q_0_4_BITS_151_TO_120_27_ULT_ex_q_0_4_BITS__ETC___d242 =
	     ex_q_0[151:120] < ex_q_0[113:82] ;
  assign ex_q_0_BITS_151_TO_120__q2 = ex_q_0[151:120] ;
  assign id_instr_rvport1__read_BITS_31_TO_0_BITS_31_TO_20__q8 =
	     id_instr_rvport1__read_BITS_31_TO_0__q7[31:20] ;
  assign id_instr_rvport1__read_BITS_31_TO_0_BIT_31_CON_ETC__q10 =
	     { id_instr_rvport1__read_BITS_31_TO_0__q7[31],
	       id_instr_rvport1__read_BITS_31_TO_0__q7[19:12],
	       id_instr_rvport1__read_BITS_31_TO_0__q7[20],
	       id_instr_rvport1__read_BITS_31_TO_0__q7[30:21],
	       1'b0 } ;
  assign id_instr_rvport1__read_BITS_31_TO_0_BIT_31_CON_ETC__q9 =
	     { id_instr_rvport1__read_BITS_31_TO_0__q7[31],
	       id_instr_rvport1__read_BITS_31_TO_0__q7[7],
	       id_instr_rvport1__read_BITS_31_TO_0__q7[30:25],
	       id_instr_rvport1__read_BITS_31_TO_0__q7[11:8],
	       1'b0 } ;
  assign id_instr_rvport1__read_BITS_31_TO_0__q7 =
	     id_instr_rv$port1__read[31:0] ;
  assign item_rsrc1_d__h4837 =
	     IF_id_instr_rv_port1__read__9_BIT_32_0_THEN_id_ETC___d108 ?
	       wb[31:0] :
	       SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 ;
  assign item_rsrc2_d__h5146 =
	     IF_id_instr_rv_port1__read__9_BIT_32_0_THEN_id_ETC___d148 ?
	       wb[31:0] :
	       SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 ;
  assign shamt__h9214 =
	     { x_first_rsrc1_d300_PLUS_x_first_immu775__q1[1:0], 3'd0 } ;
  assign wdata___1__h7591 = ex_q_0[113:82] << x__h7710 ;
  assign x__h7232 = ex_q_0[151:120] + ex_q_0[31:0] ;
  assign x__h7265 = ex_q_0[196:165] + y__h7272 ;
  assign x__h7520 = ex_q_0[33] ? _theResult___fst__h7588 : 4'd0 ;
  assign x__h7687 = { x__h7232[31:2], 2'd0 } ;
  assign x__h7707 = ex_q_0[33] ? _theResult___snd__h7589 : ex_q_0[113:82] ;
  assign x__h7710 = { x__h7232[1:0], 3'd0 } ;
  assign x__h8223 =
	     ex_q_0[151:120] >> ex_q_0[86:82] |
	     ~(32'hFFFFFFFF >> ex_q_0[86:82]) &
	     {32{ex_q_0_BITS_151_TO_120__q2[31]}} ;
  assign x__h8247 =
	     ex_q_0[151:120] >> ex_q_0[4:0] |
	     ~(32'hFFFFFFFF >> ex_q_0[4:0]) &
	     {32{ex_q_0_BITS_151_TO_120__q2[31]}} ;
  assign x_d__h7845 =
	     (ex_q_0[164:162] == 3'b110 && ex_q_0[160:158] == 3'b111) ?
	       ex_q_0[196:165] + 32'd4 :
	       CASE_ex_q_0_BITS_164_TO_158_0b10111_ex_q_0_BIT_ETC__q4 ;
  assign x_first_immu__h4775 = ld_fifo$EMPTY_N ? ld_fifo$D_OUT[31:0] : 32'd0 ;
  assign x_first_rsrc1_d300_PLUS_x_first_immu775__q1 =
	     x_first_rsrc1_d__h9300 + x_first_immu__h4775 ;
  assign x_first_rsrc1_d__h9300 =
	     ld_fifo$EMPTY_N ? ld_fifo$D_OUT[151:120] : 32'd0 ;
  assign y__h5061 = ld_fifo$EMPTY_N ? ld_fifo$D_OUT[80:76] : 5'd0 ;
  assign y__h7272 =
	     IF_ex_q_0_4_BITS_36_TO_34_31_EQ_0b0_32_THEN_ex_ETC___d250 ?
	       ex_q_0[31:0] :
	       32'd4 ;
  always@(ex_q_0 or byte_en___1__h7590 or byte_en___1__h7634)
  begin
    case (ex_q_0[35:34])
      2'b0: _theResult___fst__h7588 = byte_en___1__h7590;
      2'b01: _theResult___fst__h7588 = byte_en___1__h7634;
      default: _theResult___fst__h7588 = 4'b1111;
    endcase
  end
  always@(ex_q_0 or wdata___1__h7591)
  begin
    case (ex_q_0[35:34])
      2'b0, 2'b01: _theResult___snd__h7589 = wdata___1__h7591;
      default: _theResult___snd__h7589 = ex_q_0[113:82];
    endcase
  end
  always@(ex_q_0 or
	  ex_q_0_4_BITS_151_TO_120_27_ULT_ex_q_0_4_BITS__ETC___d242 or
	  ex_q_0_4_BITS_151_TO_120_27_EQ_ex_q_0_4_BITS_1_ETC___d234 or
	  ex_q_0_4_BITS_151_TO_120_27_SLT_ex_q_0_4_BITS__ETC___d238)
  begin
    case (ex_q_0[36:34])
      3'b0:
	  IF_ex_q_0_4_BITS_36_TO_34_31_EQ_0b0_32_THEN_ex_ETC___d250 =
	      ex_q_0_4_BITS_151_TO_120_27_EQ_ex_q_0_4_BITS_1_ETC___d234;
      3'b001:
	  IF_ex_q_0_4_BITS_36_TO_34_31_EQ_0b0_32_THEN_ex_ETC___d250 =
	      !ex_q_0_4_BITS_151_TO_120_27_EQ_ex_q_0_4_BITS_1_ETC___d234;
      3'b100:
	  IF_ex_q_0_4_BITS_36_TO_34_31_EQ_0b0_32_THEN_ex_ETC___d250 =
	      ex_q_0_4_BITS_151_TO_120_27_SLT_ex_q_0_4_BITS__ETC___d238;
      3'b101:
	  IF_ex_q_0_4_BITS_36_TO_34_31_EQ_0b0_32_THEN_ex_ETC___d250 =
	      !ex_q_0_4_BITS_151_TO_120_27_SLT_ex_q_0_4_BITS__ETC___d238;
      3'b110:
	  IF_ex_q_0_4_BITS_36_TO_34_31_EQ_0b0_32_THEN_ex_ETC___d250 =
	      ex_q_0_4_BITS_151_TO_120_27_ULT_ex_q_0_4_BITS__ETC___d242;
      default: IF_ex_q_0_4_BITS_36_TO_34_31_EQ_0b0_32_THEN_ex_ETC___d250 =
		   ex_q_0[36:34] == 3'b111 &&
		   !ex_q_0_4_BITS_151_TO_120_27_ULT_ex_q_0_4_BITS__ETC___d242;
    endcase
  end
  always@(ex_q_0 or
	  ex_q_0_4_BITS_151_TO_120_27_ULT_ex_q_0_4_BITS__ETC___d242 or
	  ex_q_0_4_BITS_151_TO_120_27_SLT_ex_q_0_4_BITS__ETC___d238 or
	  x__h8247 or x__h8223)
  begin
    case ({ ex_q_0[43:34], ex_q_0[164:158] })
      17'b00000000010010011:
	  IF_ex_q_0_4_BITS_43_TO_34_88_CONCAT_ex_q_0_4_B_ETC___d341 =
	      ex_q_0[151:120] << ex_q_0[4:0];
      17'b00000000010110011:
	  IF_ex_q_0_4_BITS_43_TO_34_88_CONCAT_ex_q_0_4_B_ETC___d341 =
	      ex_q_0[151:120] << ex_q_0[86:82];
      17'b00000000100110011:
	  IF_ex_q_0_4_BITS_43_TO_34_88_CONCAT_ex_q_0_4_B_ETC___d341 =
	      ex_q_0_4_BITS_151_TO_120_27_SLT_ex_q_0_4_BITS__ETC___d238 ?
		32'd1 :
		32'd0;
      17'b00000001010010011:
	  IF_ex_q_0_4_BITS_43_TO_34_88_CONCAT_ex_q_0_4_B_ETC___d341 =
	      ex_q_0[151:120] >> ex_q_0[4:0];
      17'b00000001010110011:
	  IF_ex_q_0_4_BITS_43_TO_34_88_CONCAT_ex_q_0_4_B_ETC___d341 =
	      ex_q_0[151:120] >> ex_q_0[86:82];
      17'b01000001010010011:
	  IF_ex_q_0_4_BITS_43_TO_34_88_CONCAT_ex_q_0_4_B_ETC___d341 =
	      x__h8247;
      17'b01000001010110011:
	  IF_ex_q_0_4_BITS_43_TO_34_88_CONCAT_ex_q_0_4_B_ETC___d341 =
	      x__h8223;
      default: IF_ex_q_0_4_BITS_43_TO_34_88_CONCAT_ex_q_0_4_B_ETC___d341 =
		   ({ ex_q_0[36:34], ex_q_0[164:158] } == 10'b0100010011) ?
		     (((ex_q_0[151:120] ^ 32'h80000000) <
		       (ex_q_0[31:0] ^ 32'h80000000)) ?
			32'd1 :
			32'd0) :
		     (({ ex_q_0[43:34], ex_q_0[164:158] } ==
		       17'b00000000110110011) ?
			(ex_q_0_4_BITS_151_TO_120_27_ULT_ex_q_0_4_BITS__ETC___d242 ?
			   32'd1 :
			   32'd0) :
			(({ ex_q_0[36:34], ex_q_0[164:158] } ==
			  10'b0110010011) ?
			   ((ex_q_0[151:120] < ex_q_0[31:0]) ?
			      32'd1 :
			      32'd0) :
			   32'd0));
    endcase
  end
  always@(ex_q_0 or IF_ex_q_0_4_BITS_43_TO_34_88_CONCAT_ex_q_0_4_B_ETC___d341)
  begin
    case ({ ex_q_0[43:34], ex_q_0[164:158] })
      17'b00000001000110011:
	  CASE_ex_q_0_BITS_43_TO_34_CONCAT_ex_q_0_BITS_1_ETC__q3 =
	      ex_q_0[151:120] ^ ex_q_0[113:82];
      17'b01000000000110011:
	  CASE_ex_q_0_BITS_43_TO_34_CONCAT_ex_q_0_BITS_1_ETC__q3 =
	      ex_q_0[151:120] - ex_q_0[113:82];
      default: CASE_ex_q_0_BITS_43_TO_34_CONCAT_ex_q_0_BITS_1_ETC__q3 =
		   ({ ex_q_0[36:34], ex_q_0[164:158] } == 10'b1000010011) ?
		     ex_q_0[151:120] ^ ex_q_0[31:0] :
		     (({ ex_q_0[43:34], ex_q_0[164:158] } ==
		       17'b00000001100110011) ?
			ex_q_0[151:120] | ex_q_0[113:82] :
			(({ ex_q_0[36:34], ex_q_0[164:158] } ==
			  10'b1100010011) ?
			   ex_q_0[151:120] | ex_q_0[31:0] :
			   (({ ex_q_0[43:34], ex_q_0[164:158] } ==
			     17'b00000001110110011) ?
			      ex_q_0[151:120] & ex_q_0[113:82] :
			      (({ ex_q_0[36:34], ex_q_0[164:158] } ==
				10'b1110010011) ?
				 ex_q_0[151:120] & ex_q_0[31:0] :
				 IF_ex_q_0_4_BITS_43_TO_34_88_CONCAT_ex_q_0_4_B_ETC___d341))));
    endcase
  end
  always@(ex_q_0 or IF_ex_q_0_4_BITS_36_TO_34_31_CONCAT_ex_q_0_4_B_ETC___d349)
  begin
    case (ex_q_0[164:158])
      7'b0010111:
	  CASE_ex_q_0_BITS_164_TO_158_0b10111_ex_q_0_BIT_ETC__q4 =
	      ex_q_0[196:165] + ex_q_0[31:0];
      7'b0110111:
	  CASE_ex_q_0_BITS_164_TO_158_0b10111_ex_q_0_BIT_ETC__q4 =
	      ex_q_0[31:0];
      default: CASE_ex_q_0_BITS_164_TO_158_0b10111_ex_q_0_BIT_ETC__q4 =
		   ({ ex_q_0[43:34], ex_q_0[164:158] } ==
		    17'b00000000000110011) ?
		     ex_q_0[151:120] + ex_q_0[113:82] :
		     IF_ex_q_0_4_BITS_36_TO_34_31_CONCAT_ex_q_0_4_B_ETC___d349;
    endcase
  end
  always@(id_instr_rvport1__read_BITS_31_TO_0__q7 or
	  SEXT_IF_id_instr_rv_port1__read__9_BIT_32_0_TH_ETC___d176 or
	  b__h6669 or
	  b__h6854 or
	  id_instr_rvport1__read_BITS_31_TO_0_BIT_31_CON_ETC__q9 or
	  id_instr_rvport1__read_BITS_31_TO_0_BIT_31_CON_ETC__q10)
  begin
    case (id_instr_rvport1__read_BITS_31_TO_0__q7[6:0])
      7'd3, 7'd19, 7'd103:
	  x__h6654 =
	      SEXT_IF_id_instr_rv_port1__read__9_BIT_32_0_TH_ETC___d176;
      7'd23, 7'd55: x__h6654 = b__h6669;
      7'd35: x__h6654 = { {20{b__h6854[11]}}, b__h6854 };
      7'd99:
	  x__h6654 =
	      { {19{id_instr_rvport1__read_BITS_31_TO_0_BIT_31_CON_ETC__q9[12]}},
		id_instr_rvport1__read_BITS_31_TO_0_BIT_31_CON_ETC__q9 };
      7'd111:
	  x__h6654 =
	      { {11{id_instr_rvport1__read_BITS_31_TO_0_BIT_31_CON_ETC__q10[20]}},
		id_instr_rvport1__read_BITS_31_TO_0_BIT_31_CON_ETC__q10 };
      default: x__h6654 = 32'd0;
    endcase
  end
  always@(id_instr_rvport1__read_BITS_31_TO_0__q7 or
	  regfile_0 or
	  regfile_1 or
	  regfile_2 or
	  regfile_3 or
	  regfile_4 or
	  regfile_5 or
	  regfile_6 or
	  regfile_7 or
	  regfile_8 or
	  regfile_9 or
	  regfile_10 or
	  regfile_11 or
	  regfile_12 or
	  regfile_13 or
	  regfile_14 or
	  regfile_15 or
	  regfile_16 or
	  regfile_17 or
	  regfile_18 or
	  regfile_19 or
	  regfile_20 or
	  regfile_21 or
	  regfile_22 or
	  regfile_23 or
	  regfile_24 or
	  regfile_25 or
	  regfile_26 or
	  regfile_27 or regfile_28 or regfile_29 or regfile_30 or regfile_31)
  begin
    case (id_instr_rvport1__read_BITS_31_TO_0__q7[19:15])
      5'd0:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_0;
      5'd1:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_1;
      5'd2:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_2;
      5'd3:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_3;
      5'd4:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_4;
      5'd5:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_5;
      5'd6:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_6;
      5'd7:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_7;
      5'd8:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_8;
      5'd9:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_9;
      5'd10:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_10;
      5'd11:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_11;
      5'd12:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_12;
      5'd13:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_13;
      5'd14:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_14;
      5'd15:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_15;
      5'd16:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_16;
      5'd17:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_17;
      5'd18:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_18;
      5'd19:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_19;
      5'd20:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_20;
      5'd21:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_21;
      5'd22:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_22;
      5'd23:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_23;
      5'd24:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_24;
      5'd25:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_25;
      5'd26:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_26;
      5'd27:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_27;
      5'd28:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_28;
      5'd29:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_29;
      5'd30:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_30;
      5'd31:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d143 =
	      regfile_31;
    endcase
  end
  always@(id_instr_rvport1__read_BITS_31_TO_0__q7 or
	  regfile_0 or
	  regfile_1 or
	  regfile_2 or
	  regfile_3 or
	  regfile_4 or
	  regfile_5 or
	  regfile_6 or
	  regfile_7 or
	  regfile_8 or
	  regfile_9 or
	  regfile_10 or
	  regfile_11 or
	  regfile_12 or
	  regfile_13 or
	  regfile_14 or
	  regfile_15 or
	  regfile_16 or
	  regfile_17 or
	  regfile_18 or
	  regfile_19 or
	  regfile_20 or
	  regfile_21 or
	  regfile_22 or
	  regfile_23 or
	  regfile_24 or
	  regfile_25 or
	  regfile_26 or
	  regfile_27 or regfile_28 or regfile_29 or regfile_30 or regfile_31)
  begin
    case (id_instr_rvport1__read_BITS_31_TO_0__q7[24:20])
      5'd0:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_0;
      5'd1:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_1;
      5'd2:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_2;
      5'd3:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_3;
      5'd4:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_4;
      5'd5:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_5;
      5'd6:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_6;
      5'd7:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_7;
      5'd8:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_8;
      5'd9:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_9;
      5'd10:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_10;
      5'd11:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_11;
      5'd12:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_12;
      5'd13:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_13;
      5'd14:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_14;
      5'd15:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_15;
      5'd16:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_16;
      5'd17:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_17;
      5'd18:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_18;
      5'd19:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_19;
      5'd20:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_20;
      5'd21:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_21;
      5'd22:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_22;
      5'd23:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_23;
      5'd24:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_24;
      5'd25:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_25;
      5'd26:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_26;
      5'd27:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_27;
      5'd28:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_28;
      5'd29:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_29;
      5'd30:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_30;
      5'd31:
	  SEL_ARR_regfile_0_10_regfile_1_11_regfile_2_12_ETC___d149 =
	      regfile_31;
    endcase
  end
  always@(WILL_FIRE_RL_enq_boot_pc or
	  MUX_if_pc_enqw$wset_1__VAL_1 or
	  MUX_if_pc_enqw$wset_1__SEL_2 or
	  MUX_if_pc_enqw$wset_1__VAL_2 or
	  MUX_if_pc_enqw$wset_1__SEL_3 or MUX_if_pc_enqw$wset_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_enq_boot_pc: x__h2546 = MUX_if_pc_enqw$wset_1__VAL_1;
    MUX_if_pc_enqw$wset_1__SEL_2: x__h2546 = MUX_if_pc_enqw$wset_1__VAL_2;
    MUX_if_pc_enqw$wset_1__SEL_3: x__h2546 = MUX_if_pc_enqw$wset_1__VAL_3;
    default: x__h2546 = 32'hAAAAAAAA /* unspecified value */ ;
  endcase

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        boot_pc <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	ex_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ex_q_0 <= `BSV_ASSIGNMENT_DELAY 197'd0;
	ex_q_1 <= `BSV_ASSIGNMENT_DELAY 197'd0;
	id_instr_rv <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	lsq_rv <= `BSV_ASSIGNMENT_DELAY 70'h0AAAAAAAAAAAAAAAAA;
	regfile_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_16 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_17 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_18 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_19 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_20 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_21 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_22 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_23 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_24 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_25 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_26 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_27 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_28 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_29 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_30 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_31 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wb <= `BSV_ASSIGNMENT_DELAY 38'd0;
      end
    else
      begin
        if (boot_pc$EN) boot_pc <= `BSV_ASSIGNMENT_DELAY boot_pc$D_IN;
	if (ex_cntr_r$EN) ex_cntr_r <= `BSV_ASSIGNMENT_DELAY ex_cntr_r$D_IN;
	if (ex_q_0$EN) ex_q_0 <= `BSV_ASSIGNMENT_DELAY ex_q_0$D_IN;
	if (ex_q_1$EN) ex_q_1 <= `BSV_ASSIGNMENT_DELAY ex_q_1$D_IN;
	if (id_instr_rv$EN)
	  id_instr_rv <= `BSV_ASSIGNMENT_DELAY id_instr_rv$D_IN;
	if (lsq_rv$EN) lsq_rv <= `BSV_ASSIGNMENT_DELAY lsq_rv$D_IN;
	if (regfile_0$EN) regfile_0 <= `BSV_ASSIGNMENT_DELAY regfile_0$D_IN;
	if (regfile_1$EN) regfile_1 <= `BSV_ASSIGNMENT_DELAY regfile_1$D_IN;
	if (regfile_10$EN)
	  regfile_10 <= `BSV_ASSIGNMENT_DELAY regfile_10$D_IN;
	if (regfile_11$EN)
	  regfile_11 <= `BSV_ASSIGNMENT_DELAY regfile_11$D_IN;
	if (regfile_12$EN)
	  regfile_12 <= `BSV_ASSIGNMENT_DELAY regfile_12$D_IN;
	if (regfile_13$EN)
	  regfile_13 <= `BSV_ASSIGNMENT_DELAY regfile_13$D_IN;
	if (regfile_14$EN)
	  regfile_14 <= `BSV_ASSIGNMENT_DELAY regfile_14$D_IN;
	if (regfile_15$EN)
	  regfile_15 <= `BSV_ASSIGNMENT_DELAY regfile_15$D_IN;
	if (regfile_16$EN)
	  regfile_16 <= `BSV_ASSIGNMENT_DELAY regfile_16$D_IN;
	if (regfile_17$EN)
	  regfile_17 <= `BSV_ASSIGNMENT_DELAY regfile_17$D_IN;
	if (regfile_18$EN)
	  regfile_18 <= `BSV_ASSIGNMENT_DELAY regfile_18$D_IN;
	if (regfile_19$EN)
	  regfile_19 <= `BSV_ASSIGNMENT_DELAY regfile_19$D_IN;
	if (regfile_2$EN) regfile_2 <= `BSV_ASSIGNMENT_DELAY regfile_2$D_IN;
	if (regfile_20$EN)
	  regfile_20 <= `BSV_ASSIGNMENT_DELAY regfile_20$D_IN;
	if (regfile_21$EN)
	  regfile_21 <= `BSV_ASSIGNMENT_DELAY regfile_21$D_IN;
	if (regfile_22$EN)
	  regfile_22 <= `BSV_ASSIGNMENT_DELAY regfile_22$D_IN;
	if (regfile_23$EN)
	  regfile_23 <= `BSV_ASSIGNMENT_DELAY regfile_23$D_IN;
	if (regfile_24$EN)
	  regfile_24 <= `BSV_ASSIGNMENT_DELAY regfile_24$D_IN;
	if (regfile_25$EN)
	  regfile_25 <= `BSV_ASSIGNMENT_DELAY regfile_25$D_IN;
	if (regfile_26$EN)
	  regfile_26 <= `BSV_ASSIGNMENT_DELAY regfile_26$D_IN;
	if (regfile_27$EN)
	  regfile_27 <= `BSV_ASSIGNMENT_DELAY regfile_27$D_IN;
	if (regfile_28$EN)
	  regfile_28 <= `BSV_ASSIGNMENT_DELAY regfile_28$D_IN;
	if (regfile_29$EN)
	  regfile_29 <= `BSV_ASSIGNMENT_DELAY regfile_29$D_IN;
	if (regfile_3$EN) regfile_3 <= `BSV_ASSIGNMENT_DELAY regfile_3$D_IN;
	if (regfile_30$EN)
	  regfile_30 <= `BSV_ASSIGNMENT_DELAY regfile_30$D_IN;
	if (regfile_31$EN)
	  regfile_31 <= `BSV_ASSIGNMENT_DELAY regfile_31$D_IN;
	if (regfile_4$EN) regfile_4 <= `BSV_ASSIGNMENT_DELAY regfile_4$D_IN;
	if (regfile_5$EN) regfile_5 <= `BSV_ASSIGNMENT_DELAY regfile_5$D_IN;
	if (regfile_6$EN) regfile_6 <= `BSV_ASSIGNMENT_DELAY regfile_6$D_IN;
	if (regfile_7$EN) regfile_7 <= `BSV_ASSIGNMENT_DELAY regfile_7$D_IN;
	if (regfile_8$EN) regfile_8 <= `BSV_ASSIGNMENT_DELAY regfile_8$D_IN;
	if (regfile_9$EN) regfile_9 <= `BSV_ASSIGNMENT_DELAY regfile_9$D_IN;
	if (wb$EN) wb <= `BSV_ASSIGNMENT_DELAY wb$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    boot_pc = 33'h0AAAAAAAA;
    ex_cntr_r = 2'h2;
    ex_q_0 = 197'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ex_q_1 = 197'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    id_instr_rv = 33'h0AAAAAAAA;
    lsq_rv = 70'h2AAAAAAAAAAAAAAAAA;
    regfile_0 = 32'hAAAAAAAA;
    regfile_1 = 32'hAAAAAAAA;
    regfile_10 = 32'hAAAAAAAA;
    regfile_11 = 32'hAAAAAAAA;
    regfile_12 = 32'hAAAAAAAA;
    regfile_13 = 32'hAAAAAAAA;
    regfile_14 = 32'hAAAAAAAA;
    regfile_15 = 32'hAAAAAAAA;
    regfile_16 = 32'hAAAAAAAA;
    regfile_17 = 32'hAAAAAAAA;
    regfile_18 = 32'hAAAAAAAA;
    regfile_19 = 32'hAAAAAAAA;
    regfile_2 = 32'hAAAAAAAA;
    regfile_20 = 32'hAAAAAAAA;
    regfile_21 = 32'hAAAAAAAA;
    regfile_22 = 32'hAAAAAAAA;
    regfile_23 = 32'hAAAAAAAA;
    regfile_24 = 32'hAAAAAAAA;
    regfile_25 = 32'hAAAAAAAA;
    regfile_26 = 32'hAAAAAAAA;
    regfile_27 = 32'hAAAAAAAA;
    regfile_28 = 32'hAAAAAAAA;
    regfile_29 = 32'hAAAAAAAA;
    regfile_3 = 32'hAAAAAAAA;
    regfile_30 = 32'hAAAAAAAA;
    regfile_31 = 32'hAAAAAAAA;
    regfile_4 = 32'hAAAAAAAA;
    regfile_5 = 32'hAAAAAAAA;
    regfile_6 = 32'hAAAAAAAA;
    regfile_7 = 32'hAAAAAAAA;
    regfile_8 = 32'hAAAAAAAA;
    regfile_9 = 32'hAAAAAAAA;
    wb = 38'h2AAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ex_stage && WILL_FIRE_RL_id_stage &&
	  (ex_q_0[164:158] == 7'd103 || ex_q_0[164:158] == 7'd99) &&
	  _wset_RL_id_stage$EN_if_pc_enqw$wget)
	$display("Error: \"Rv32iCPU.bsv\", line 226, column 9: (R0002)\n  Conflict-free rules RL_ex_stage and RL_id_stage called conflicting methods\n  wset and wset of module instance if_pc_enqw.\n");
  end
  // synopsys translate_on
endmodule  // mkRv32iCPU

