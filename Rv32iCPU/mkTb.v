//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
//
// On Tue Dec 27 17:30:04 CST 2022
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTb(CLK,
	    RST_N);
  input  CLK;
  input  RST_N;

  // inlined wires
  wire [31 : 0] data_ram_serverAdapterA_outData_outData$wget,
		instr_ram_serverAdapter_outData_outData$wget;
  wire [1 : 0] data_ram_serverAdapterA_s1_1$wget,
	       data_ram_serverAdapterA_writeWithResp$wget;
  wire data_ram_serverAdapterA_cnt_1$whas,
       data_ram_serverAdapterA_outData_deqCalled$whas,
       data_ram_serverAdapterA_outData_enqData$whas,
       data_ram_serverAdapterA_outData_outData$whas,
       data_ram_serverAdapterA_writeWithResp$whas,
       data_ram_serverAdapterB_outData_enqData$whas,
       data_ram_serverAdapterB_outData_outData$whas,
       instr_ram_serverAdapter_outData_deqCalled$whas,
       instr_ram_serverAdapter_outData_enqData$whas,
       instr_ram_serverAdapter_outData_outData$whas,
       start_wire$whas,
       state_set_pw$whas;

  // register cnt
  reg [31 : 0] cnt;
  wire [31 : 0] cnt$D_IN;
  wire cnt$EN;

  // register cyc
  reg [31 : 0] cyc;
  wire [31 : 0] cyc$D_IN;
  wire cyc$EN;

  // register data_ram_serverAdapterA_cnt
  reg [2 : 0] data_ram_serverAdapterA_cnt;
  wire [2 : 0] data_ram_serverAdapterA_cnt$D_IN;
  wire data_ram_serverAdapterA_cnt$EN;

  // register data_ram_serverAdapterA_s1
  reg [1 : 0] data_ram_serverAdapterA_s1;
  wire [1 : 0] data_ram_serverAdapterA_s1$D_IN;
  wire data_ram_serverAdapterA_s1$EN;

  // register data_ram_serverAdapterB_cnt
  reg [2 : 0] data_ram_serverAdapterB_cnt;
  wire [2 : 0] data_ram_serverAdapterB_cnt$D_IN;
  wire data_ram_serverAdapterB_cnt$EN;

  // register data_ram_serverAdapterB_s1
  reg [1 : 0] data_ram_serverAdapterB_s1;
  wire [1 : 0] data_ram_serverAdapterB_s1$D_IN;
  wire data_ram_serverAdapterB_s1$EN;

  // register instr_ram_serverAdapter_cnt
  reg [2 : 0] instr_ram_serverAdapter_cnt;
  wire [2 : 0] instr_ram_serverAdapter_cnt$D_IN;
  wire instr_ram_serverAdapter_cnt$EN;

  // register instr_ram_serverAdapter_s1
  reg [1 : 0] instr_ram_serverAdapter_s1;
  wire [1 : 0] instr_ram_serverAdapter_s1$D_IN;
  wire instr_ram_serverAdapter_s1$EN;

  // register jj_delay_count
  reg [8 : 0] jj_delay_count;
  wire [8 : 0] jj_delay_count$D_IN;
  wire jj_delay_count$EN;

  // register lastpc
  reg [31 : 0] lastpc;
  wire [31 : 0] lastpc$D_IN;
  wire lastpc$EN;

  // register running
  reg running;
  wire running$D_IN, running$EN;

  // register start_reg
  reg start_reg;
  wire start_reg$D_IN, start_reg$EN;

  // register start_reg_1
  reg start_reg_1;
  wire start_reg_1$D_IN, start_reg_1$EN;

  // register state_can_overlap
  reg state_can_overlap;
  wire state_can_overlap$D_IN, state_can_overlap$EN;

  // register state_fired
  reg state_fired;
  wire state_fired$D_IN, state_fired$EN;

  // register state_mkFSMstate
  reg [3 : 0] state_mkFSMstate;
  reg [3 : 0] state_mkFSMstate$D_IN;
  wire state_mkFSMstate$EN;

  // ports of submodule cpu
  wire [31 : 0] cpu$boot_boot_addr,
		cpu$dbus_req_snd_snd_fst,
		cpu$dbus_req_snd_snd_snd,
		cpu$dbus_resp_rdata,
		cpu$ibus_req,
		cpu$ibus_resp_rdata;
  wire [3 : 0] cpu$dbus_req_snd_fst;
  wire cpu$EN_boot,
       cpu$EN_dbus_reqx,
       cpu$EN_dbus_resp,
       cpu$EN_ibus_reqx,
       cpu$EN_ibus_resp,
       cpu$RDY_dbus_req_snd_fst,
       cpu$RDY_dbus_req_snd_snd_fst,
       cpu$RDY_dbus_req_snd_snd_snd,
       cpu$RDY_dbus_reqx,
       cpu$RDY_dbus_resp,
       cpu$RDY_ibus_req,
       cpu$RDY_ibus_reqx,
       cpu$RDY_ibus_resp;

  // ports of submodule data_ram_memory
  wire [31 : 0] data_ram_memory$ADDRA,
		data_ram_memory$ADDRB,
		data_ram_memory$DIA,
		data_ram_memory$DIB,
		data_ram_memory$DOA,
		data_ram_memory$DOB;
  wire [3 : 0] data_ram_memory$WEA, data_ram_memory$WEB;
  wire data_ram_memory$ENA, data_ram_memory$ENB;

  // ports of submodule data_ram_serverAdapterA_outDataCore
  wire [31 : 0] data_ram_serverAdapterA_outDataCore$D_IN,
		data_ram_serverAdapterA_outDataCore$D_OUT;
  wire data_ram_serverAdapterA_outDataCore$CLR,
       data_ram_serverAdapterA_outDataCore$DEQ,
       data_ram_serverAdapterA_outDataCore$EMPTY_N,
       data_ram_serverAdapterA_outDataCore$ENQ,
       data_ram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule data_ram_serverAdapterB_outDataCore
  wire [31 : 0] data_ram_serverAdapterB_outDataCore$D_IN,
		data_ram_serverAdapterB_outDataCore$D_OUT;
  wire data_ram_serverAdapterB_outDataCore$CLR,
       data_ram_serverAdapterB_outDataCore$DEQ,
       data_ram_serverAdapterB_outDataCore$EMPTY_N,
       data_ram_serverAdapterB_outDataCore$ENQ,
       data_ram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule instr_ram_memory
  wire [31 : 0] instr_ram_memory$ADDR,
		instr_ram_memory$DI,
		instr_ram_memory$DO;
  wire instr_ram_memory$EN, instr_ram_memory$WE;

  // ports of submodule instr_ram_serverAdapter_outDataCore
  wire [31 : 0] instr_ram_serverAdapter_outDataCore$D_IN,
		instr_ram_serverAdapter_outDataCore$D_OUT;
  wire instr_ram_serverAdapter_outDataCore$CLR,
       instr_ram_serverAdapter_outDataCore$DEQ,
       instr_ram_serverAdapter_outDataCore$EMPTY_N,
       instr_ram_serverAdapter_outDataCore$ENQ,
       instr_ram_serverAdapter_outDataCore$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_action_d_init_np,
       WILL_FIRE_RL_action_l35c10,
       WILL_FIRE_RL_action_l51c7,
       WILL_FIRE_RL_action_l56c10,
       WILL_FIRE_RL_action_np,
       WILL_FIRE_RL_data_ram_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_data_ram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_data_ram_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_fsm_start,
       WILL_FIRE_RL_idle_l34c15,
       WILL_FIRE_RL_idle_l34c15_1,
       WILL_FIRE_RL_instr_ram_serverAdapter_outData_enqAndDeq,
       WILL_FIRE_RL_instr_ram_serverAdapter_stageReadResponseAlways;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_cnt$write_1__VAL_1;
  wire [8 : 0] MUX_jj_delay_count$write_1__VAL_1;
  wire MUX_cnt$write_1__SEL_1,
       MUX_start_reg$write_1__SEL_2,
       MUX_state_mkFSMstate$write_1__SEL_1;

  // remaining internal signals
  wire [63 : 0] _100_MUL_cyc_58___d238;
  wire [31 : 0] _100_MUL_cyc_58_38_BITS_31_TO_0_39_QUOT_cnt_95___d240,
		v__h36519;
  wire [2 : 0] data_ram_serverAdapterA_cnt_0_PLUS_IF_data_ram_ETC___d86,
	       data_ram_serverAdapterB_cnt_32_PLUS_IF_data_ra_ETC___d138,
	       instr_ram_serverAdapter_cnt_7_PLUS_IF_instr_ra_ETC___d33;
  wire abort_whas__63_AND_abort_wget__64_65_OR_state__ETC___d271,
       cnt_95_ULT_40___d196,
       cpu_RDY_dbus_req_snd_snd_fst__81_AND_cpu_RDY_d_ETC___d287,
       lastpc_13_EQ_cpu_ibus_req__14___d215;

  // submodule cpu
  mkRv32iCPU cpu(.CLK(CLK),
		 .RST_N(RST_N),
		 .boot_boot_addr(cpu$boot_boot_addr),
		 .dbus_resp_rdata(cpu$dbus_resp_rdata),
		 .ibus_resp_rdata(cpu$ibus_resp_rdata),
		 .EN_boot(cpu$EN_boot),
		 .EN_ibus_reqx(cpu$EN_ibus_reqx),
		 .EN_ibus_resp(cpu$EN_ibus_resp),
		 .EN_dbus_reqx(cpu$EN_dbus_reqx),
		 .EN_dbus_resp(cpu$EN_dbus_resp),
		 .ibus_req(cpu$ibus_req),
		 .RDY_ibus_req(cpu$RDY_ibus_req),
		 .RDY_ibus_reqx(cpu$RDY_ibus_reqx),
		 .RDY_ibus_resp(cpu$RDY_ibus_resp),
		 .dbus_req_fst(),
		 .RDY_dbus_req_fst(),
		 .dbus_req_snd_fst(cpu$dbus_req_snd_fst),
		 .RDY_dbus_req_snd_fst(cpu$RDY_dbus_req_snd_fst),
		 .dbus_req_snd_snd_fst(cpu$dbus_req_snd_snd_fst),
		 .RDY_dbus_req_snd_snd_fst(cpu$RDY_dbus_req_snd_snd_fst),
		 .dbus_req_snd_snd_snd(cpu$dbus_req_snd_snd_snd),
		 .RDY_dbus_req_snd_snd_snd(cpu$RDY_dbus_req_snd_snd_snd),
		 .RDY_dbus_reqx(cpu$RDY_dbus_reqx),
		 .RDY_dbus_resp(cpu$RDY_dbus_resp));

  // submodule data_ram_memory
  BRAM2BELoad #(.FILENAME("benchmark/no_data.txt"),
		.PIPELINED(1'd0),
		.ADDR_WIDTH(32'd32),
		.DATA_WIDTH(32'd32),
		.CHUNKSIZE(32'd8),
		.WE_WIDTH(32'd4),
		.MEMSIZE(33'd16384),
		.BINARY(1'd0)) data_ram_memory(.CLKA(CLK),
					       .CLKB(CLK),
					       .ADDRA(data_ram_memory$ADDRA),
					       .ADDRB(data_ram_memory$ADDRB),
					       .DIA(data_ram_memory$DIA),
					       .DIB(data_ram_memory$DIB),
					       .WEA(data_ram_memory$WEA),
					       .WEB(data_ram_memory$WEB),
					       .ENA(data_ram_memory$ENA),
					       .ENB(data_ram_memory$ENB),
					       .DOA(data_ram_memory$DOA),
					       .DOB(data_ram_memory$DOB));

  // submodule data_ram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd1)) data_ram_serverAdapterA_outDataCore(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(data_ram_serverAdapterA_outDataCore$D_IN),
								  .ENQ(data_ram_serverAdapterA_outDataCore$ENQ),
								  .DEQ(data_ram_serverAdapterA_outDataCore$DEQ),
								  .CLR(data_ram_serverAdapterA_outDataCore$CLR),
								  .D_OUT(data_ram_serverAdapterA_outDataCore$D_OUT),
								  .FULL_N(data_ram_serverAdapterA_outDataCore$FULL_N),
								  .EMPTY_N(data_ram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule data_ram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd1)) data_ram_serverAdapterB_outDataCore(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(data_ram_serverAdapterB_outDataCore$D_IN),
								  .ENQ(data_ram_serverAdapterB_outDataCore$ENQ),
								  .DEQ(data_ram_serverAdapterB_outDataCore$DEQ),
								  .CLR(data_ram_serverAdapterB_outDataCore$CLR),
								  .D_OUT(data_ram_serverAdapterB_outDataCore$D_OUT),
								  .FULL_N(data_ram_serverAdapterB_outDataCore$FULL_N),
								  .EMPTY_N(data_ram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule instr_ram_memory
  BRAM1Load #(.FILENAME("benchmark/qsort_instruction.txt"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd32),
	      .DATA_WIDTH(32'd32),
	      .MEMSIZE(33'd16384),
	      .BINARY(1'd0)) instr_ram_memory(.CLK(CLK),
					      .ADDR(instr_ram_memory$ADDR),
					      .DI(instr_ram_memory$DI),
					      .WE(instr_ram_memory$WE),
					      .EN(instr_ram_memory$EN),
					      .DO(instr_ram_memory$DO));

  // submodule instr_ram_serverAdapter_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd1)) instr_ram_serverAdapter_outDataCore(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(instr_ram_serverAdapter_outDataCore$D_IN),
								  .ENQ(instr_ram_serverAdapter_outDataCore$ENQ),
								  .DEQ(instr_ram_serverAdapter_outDataCore$DEQ),
								  .CLR(instr_ram_serverAdapter_outDataCore$CLR),
								  .D_OUT(instr_ram_serverAdapter_outDataCore$D_OUT),
								  .FULL_N(instr_ram_serverAdapter_outDataCore$FULL_N),
								  .EMPTY_N(instr_ram_serverAdapter_outDataCore$EMPTY_N));

  // rule RL_action_np
  assign WILL_FIRE_RL_action_np =
	     !jj_delay_count[8] &&
	     (state_mkFSMstate == 4'd3 || state_mkFSMstate == 4'd4) ;

  // rule RL_action_l51c7
  assign WILL_FIRE_RL_action_l51c7 =
	     jj_delay_count[8] &&
	     (state_mkFSMstate == 4'd3 || state_mkFSMstate == 4'd4) ;

  // rule RL_fsm_start
  assign WILL_FIRE_RL_fsm_start =
	     abort_whas__63_AND_abort_wget__64_65_OR_state__ETC___d271 &&
	     start_reg ;

  // rule RL_action_l35c10
  assign WILL_FIRE_RL_action_l35c10 =
	     start_wire$whas && state_mkFSMstate == 4'd0 ||
	     !cnt_95_ULT_40___d196 && start_wire$whas &&
	     state_mkFSMstate == 4'd6 ||
	     !cnt_95_ULT_40___d196 && start_wire$whas &&
	     state_mkFSMstate == 4'd9 ;

  // rule RL_idle_l34c15
  assign WILL_FIRE_RL_idle_l34c15 =
	     !cnt_95_ULT_40___d196 && !start_wire$whas &&
	     state_mkFSMstate == 4'd6 ;

  // rule RL_idle_l34c15_1
  assign WILL_FIRE_RL_idle_l34c15_1 =
	     !cnt_95_ULT_40___d196 && !start_wire$whas &&
	     state_mkFSMstate == 4'd9 ;

  // rule RL_action_d_init_np
  assign WILL_FIRE_RL_action_d_init_np =
	     cpu$RDY_ibus_req && lastpc_13_EQ_cpu_ibus_req__14___d215 &&
	     (state_mkFSMstate == 4'd1 || state_mkFSMstate == 4'd2) ;

  // rule RL_instr_ram_serverAdapter_stageReadResponseAlways
  assign WILL_FIRE_RL_instr_ram_serverAdapter_stageReadResponseAlways =
	     cpu$RDY_ibus_req && cpu$RDY_ibus_reqx &&
	     (instr_ram_serverAdapter_cnt ^ 3'h4) < 3'd7 &&
	     !lastpc_13_EQ_cpu_ibus_req__14___d215 &&
	     (state_mkFSMstate == 4'd1 || state_mkFSMstate == 4'd2) ;

  // rule RL_instr_ram_serverAdapter_outData_enqAndDeq
  assign WILL_FIRE_RL_instr_ram_serverAdapter_outData_enqAndDeq =
	     instr_ram_serverAdapter_outDataCore$EMPTY_N &&
	     instr_ram_serverAdapter_outDataCore$FULL_N &&
	     instr_ram_serverAdapter_outData_deqCalled$whas &&
	     instr_ram_serverAdapter_outData_enqData$whas ;

  // rule RL_data_ram_serverAdapterA_outData_enqAndDeq
  assign WILL_FIRE_RL_data_ram_serverAdapterA_outData_enqAndDeq =
	     data_ram_serverAdapterA_outDataCore$EMPTY_N &&
	     data_ram_serverAdapterA_outDataCore$FULL_N &&
	     data_ram_serverAdapterA_outData_deqCalled$whas &&
	     data_ram_serverAdapterA_outData_enqData$whas ;

  // rule RL_data_ram_serverAdapterB_stageReadResponseAlways
  assign WILL_FIRE_RL_data_ram_serverAdapterB_stageReadResponseAlways =
	     (data_ram_serverAdapterB_cnt ^ 3'h4) < 3'd7 &&
	     cnt_95_ULT_40___d196 &&
	     (state_mkFSMstate == 4'd6 || state_mkFSMstate == 4'd9) ;

  // rule RL_action_l56c10
  assign WILL_FIRE_RL_action_l56c10 =
	     (data_ram_serverAdapterB_outDataCore$EMPTY_N ||
	      data_ram_serverAdapterB_outData_enqData$whas) &&
	     data_ram_serverAdapterB_outData_outData$whas &&
	     state_mkFSMstate == 4'd7 ;

  // rule RL_data_ram_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_data_ram_serverAdapterB_outData_enqAndDeq =
	     data_ram_serverAdapterB_outDataCore$EMPTY_N &&
	     data_ram_serverAdapterB_outDataCore$FULL_N &&
	     WILL_FIRE_RL_action_l56c10 &&
	     data_ram_serverAdapterB_outData_enqData$whas ;

  // inputs to muxes for submodule ports
  assign MUX_cnt$write_1__SEL_1 =
	     state_mkFSMstate == 4'd8 ||
	     WILL_FIRE_RL_instr_ram_serverAdapter_stageReadResponseAlways ;
  assign MUX_start_reg$write_1__SEL_2 =
	     abort_whas__63_AND_abort_wget__64_65_OR_state__ETC___d271 &&
	     !start_reg &&
	     !running ;
  assign MUX_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_idle_l34c15_1 || WILL_FIRE_RL_idle_l34c15 ;
  assign MUX_cnt$write_1__VAL_1 = cnt + 32'd1 ;
  assign MUX_jj_delay_count$write_1__VAL_1 = { jj_delay_count[7:0], 1'd0 } ;

  // inlined wires
  assign instr_ram_serverAdapter_outData_enqData$whas =
	     instr_ram_serverAdapter_outDataCore$FULL_N &&
	     instr_ram_serverAdapter_s1[1] &&
	     instr_ram_serverAdapter_s1[0] ;
  assign instr_ram_serverAdapter_outData_outData$wget =
	     instr_ram_serverAdapter_outDataCore$EMPTY_N ?
	       instr_ram_serverAdapter_outDataCore$D_OUT :
	       instr_ram_memory$DO ;
  assign instr_ram_serverAdapter_outData_outData$whas =
	     instr_ram_serverAdapter_outDataCore$EMPTY_N ||
	     !instr_ram_serverAdapter_outDataCore$EMPTY_N &&
	     instr_ram_serverAdapter_outData_enqData$whas ;
  assign data_ram_serverAdapterA_outData_enqData$whas =
	     data_ram_serverAdapterA_outDataCore$FULL_N &&
	     data_ram_serverAdapterA_s1[1] &&
	     data_ram_serverAdapterA_s1[0] ;
  assign data_ram_serverAdapterA_outData_outData$wget =
	     data_ram_serverAdapterA_outDataCore$EMPTY_N ?
	       data_ram_serverAdapterA_outDataCore$D_OUT :
	       data_ram_memory$DOA ;
  assign data_ram_serverAdapterA_outData_outData$whas =
	     data_ram_serverAdapterA_outDataCore$EMPTY_N ||
	     !data_ram_serverAdapterA_outDataCore$EMPTY_N &&
	     data_ram_serverAdapterA_outData_enqData$whas ;
  assign data_ram_serverAdapterA_cnt_1$whas =
	     cpu$RDY_dbus_req_snd_fst &&
	     cpu_RDY_dbus_req_snd_snd_fst__81_AND_cpu_RDY_d_ETC___d287 &&
	     (!data_ram_serverAdapterA_writeWithResp$wget[1] ||
	      data_ram_serverAdapterA_writeWithResp$wget[0]) ;
  assign data_ram_serverAdapterA_writeWithResp$wget =
	     { cpu$dbus_req_snd_fst != 4'd0, cpu$dbus_req_snd_fst == 4'd0 } ;
  assign data_ram_serverAdapterA_writeWithResp$whas =
	     cpu$RDY_dbus_req_snd_fst &&
	     cpu_RDY_dbus_req_snd_snd_fst__81_AND_cpu_RDY_d_ETC___d287 ;
  assign data_ram_serverAdapterA_s1_1$wget =
	     { 1'd1,
	       !data_ram_serverAdapterA_writeWithResp$wget[1] ||
	       data_ram_serverAdapterA_writeWithResp$wget[0] } ;
  assign data_ram_serverAdapterB_outData_enqData$whas =
	     data_ram_serverAdapterB_outDataCore$FULL_N &&
	     data_ram_serverAdapterB_s1[1] &&
	     data_ram_serverAdapterB_s1[0] ;
  assign data_ram_serverAdapterB_outData_outData$whas =
	     data_ram_serverAdapterB_outDataCore$EMPTY_N ||
	     !data_ram_serverAdapterB_outDataCore$EMPTY_N &&
	     data_ram_serverAdapterB_outData_enqData$whas ;
  assign start_wire$whas =
	     WILL_FIRE_RL_fsm_start || start_reg_1 && !state_fired ;
  assign instr_ram_serverAdapter_outData_deqCalled$whas =
	     cpu$RDY_ibus_resp &&
	     (instr_ram_serverAdapter_outDataCore$EMPTY_N ||
	      instr_ram_serverAdapter_outData_enqData$whas) &&
	     instr_ram_serverAdapter_outData_outData$whas ;
  assign data_ram_serverAdapterA_outData_deqCalled$whas =
	     cpu$RDY_dbus_resp &&
	     (data_ram_serverAdapterA_outDataCore$EMPTY_N ||
	      data_ram_serverAdapterA_outData_enqData$whas) &&
	     data_ram_serverAdapterA_outData_outData$whas ;
  assign state_set_pw$whas =
	     WILL_FIRE_RL_idle_l34c15_1 || WILL_FIRE_RL_idle_l34c15 ||
	     state_mkFSMstate == 4'd8 ||
	     WILL_FIRE_RL_action_l56c10 ||
	     WILL_FIRE_RL_data_ram_serverAdapterB_stageReadResponseAlways ||
	     state_mkFSMstate == 4'd5 ||
	     WILL_FIRE_RL_action_l51c7 ||
	     WILL_FIRE_RL_action_np ||
	     WILL_FIRE_RL_action_d_init_np ||
	     WILL_FIRE_RL_instr_ram_serverAdapter_stageReadResponseAlways ||
	     WILL_FIRE_RL_action_l35c10 ;

  // register cnt
  assign cnt$D_IN = MUX_cnt$write_1__SEL_1 ? MUX_cnt$write_1__VAL_1 : 32'd0 ;
  assign cnt$EN =
	     state_mkFSMstate == 4'd8 ||
	     WILL_FIRE_RL_instr_ram_serverAdapter_stageReadResponseAlways ||
	     state_mkFSMstate == 4'd5 ;

  // register cyc
  assign cyc$D_IN = cyc + 32'd1 ;
  assign cyc$EN = 1'd1 ;

  // register data_ram_serverAdapterA_cnt
  assign data_ram_serverAdapterA_cnt$D_IN =
	     data_ram_serverAdapterA_cnt_0_PLUS_IF_data_ram_ETC___d86 ;
  assign data_ram_serverAdapterA_cnt$EN =
	     data_ram_serverAdapterA_cnt_1$whas ||
	     data_ram_serverAdapterA_outData_deqCalled$whas ;

  // register data_ram_serverAdapterA_s1
  assign data_ram_serverAdapterA_s1$D_IN =
	     data_ram_serverAdapterA_writeWithResp$whas ?
	       data_ram_serverAdapterA_s1_1$wget :
	       2'd0 ;
  assign data_ram_serverAdapterA_s1$EN = 1'd1 ;

  // register data_ram_serverAdapterB_cnt
  assign data_ram_serverAdapterB_cnt$D_IN =
	     data_ram_serverAdapterB_cnt_32_PLUS_IF_data_ra_ETC___d138 ;
  assign data_ram_serverAdapterB_cnt$EN =
	     WILL_FIRE_RL_data_ram_serverAdapterB_stageReadResponseAlways ||
	     WILL_FIRE_RL_action_l56c10 ;

  // register data_ram_serverAdapterB_s1
  assign data_ram_serverAdapterB_s1$D_IN =
	     WILL_FIRE_RL_data_ram_serverAdapterB_stageReadResponseAlways ?
	       2'd3 :
	       2'd0 ;
  assign data_ram_serverAdapterB_s1$EN = 1'd1 ;

  // register instr_ram_serverAdapter_cnt
  assign instr_ram_serverAdapter_cnt$D_IN =
	     instr_ram_serverAdapter_cnt_7_PLUS_IF_instr_ra_ETC___d33 ;
  assign instr_ram_serverAdapter_cnt$EN =
	     WILL_FIRE_RL_instr_ram_serverAdapter_stageReadResponseAlways ||
	     instr_ram_serverAdapter_outData_deqCalled$whas ;

  // register instr_ram_serverAdapter_s1
  assign instr_ram_serverAdapter_s1$D_IN =
	     WILL_FIRE_RL_instr_ram_serverAdapter_stageReadResponseAlways ?
	       2'd3 :
	       2'd0 ;
  assign instr_ram_serverAdapter_s1$EN = 1'd1 ;

  // register jj_delay_count
  assign jj_delay_count$D_IN =
	     WILL_FIRE_RL_action_np ?
	       MUX_jj_delay_count$write_1__VAL_1 :
	       9'd1 ;
  assign jj_delay_count$EN =
	     WILL_FIRE_RL_action_np || WILL_FIRE_RL_action_d_init_np ;

  // register lastpc
  assign lastpc$D_IN = cpu$ibus_req ;
  assign lastpc$EN =
	     WILL_FIRE_RL_instr_ram_serverAdapter_stageReadResponseAlways ;

  // register running
  assign running$D_IN = 1'd1 ;
  assign running$EN = MUX_start_reg$write_1__SEL_2 ;

  // register start_reg
  assign start_reg$D_IN = !WILL_FIRE_RL_fsm_start ;
  assign start_reg$EN =
	     WILL_FIRE_RL_fsm_start ||
	     abort_whas__63_AND_abort_wget__64_65_OR_state__ETC___d271 &&
	     !start_reg &&
	     !running ;

  // register start_reg_1
  assign start_reg_1$D_IN = start_wire$whas ;
  assign start_reg_1$EN = 1'd1 ;

  // register state_can_overlap
  assign state_can_overlap$D_IN = state_set_pw$whas || state_can_overlap ;
  assign state_can_overlap$EN = 1'd1 ;

  // register state_fired
  assign state_fired$D_IN = state_set_pw$whas ;
  assign state_fired$EN = 1'd1 ;

  // register state_mkFSMstate
  always@(MUX_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_action_l35c10 or
	  WILL_FIRE_RL_instr_ram_serverAdapter_stageReadResponseAlways or
	  WILL_FIRE_RL_action_d_init_np or
	  WILL_FIRE_RL_action_np or
	  WILL_FIRE_RL_action_l51c7 or
	  state_mkFSMstate or
	  WILL_FIRE_RL_data_ram_serverAdapterB_stageReadResponseAlways or
	  WILL_FIRE_RL_action_l56c10)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_state_mkFSMstate$write_1__SEL_1: state_mkFSMstate$D_IN = 4'd0;
      WILL_FIRE_RL_action_l35c10: state_mkFSMstate$D_IN = 4'd1;
      WILL_FIRE_RL_instr_ram_serverAdapter_stageReadResponseAlways:
	  state_mkFSMstate$D_IN = 4'd2;
      WILL_FIRE_RL_action_d_init_np: state_mkFSMstate$D_IN = 4'd3;
      WILL_FIRE_RL_action_np: state_mkFSMstate$D_IN = 4'd4;
      WILL_FIRE_RL_action_l51c7: state_mkFSMstate$D_IN = 4'd5;
      state_mkFSMstate == 4'd5: state_mkFSMstate$D_IN = 4'd6;
      WILL_FIRE_RL_data_ram_serverAdapterB_stageReadResponseAlways:
	  state_mkFSMstate$D_IN = 4'd7;
      WILL_FIRE_RL_action_l56c10: state_mkFSMstate$D_IN = 4'd8;
      state_mkFSMstate == 4'd8: state_mkFSMstate$D_IN = 4'd9;
      default: state_mkFSMstate$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign state_mkFSMstate$EN =
	     WILL_FIRE_RL_idle_l34c15_1 || WILL_FIRE_RL_idle_l34c15 ||
	     WILL_FIRE_RL_action_l35c10 ||
	     WILL_FIRE_RL_instr_ram_serverAdapter_stageReadResponseAlways ||
	     WILL_FIRE_RL_action_d_init_np ||
	     WILL_FIRE_RL_action_np ||
	     WILL_FIRE_RL_action_l51c7 ||
	     state_mkFSMstate == 4'd5 ||
	     WILL_FIRE_RL_data_ram_serverAdapterB_stageReadResponseAlways ||
	     WILL_FIRE_RL_action_l56c10 ||
	     state_mkFSMstate == 4'd8 ;

  // submodule cpu
  assign cpu$boot_boot_addr = 32'd0 ;
  assign cpu$dbus_resp_rdata = data_ram_serverAdapterA_outData_outData$wget ;
  assign cpu$ibus_resp_rdata = instr_ram_serverAdapter_outData_outData$wget ;
  assign cpu$EN_boot = WILL_FIRE_RL_action_l35c10 ;
  assign cpu$EN_ibus_reqx =
	     WILL_FIRE_RL_instr_ram_serverAdapter_stageReadResponseAlways ;
  assign cpu$EN_ibus_resp =
	     cpu$RDY_ibus_resp &&
	     (instr_ram_serverAdapter_outDataCore$EMPTY_N ||
	      instr_ram_serverAdapter_outData_enqData$whas) &&
	     instr_ram_serverAdapter_outData_outData$whas ;
  assign cpu$EN_dbus_reqx =
	     cpu$RDY_dbus_req_snd_fst &&
	     cpu_RDY_dbus_req_snd_snd_fst__81_AND_cpu_RDY_d_ETC___d287 ;
  assign cpu$EN_dbus_resp =
	     cpu$RDY_dbus_resp &&
	     (data_ram_serverAdapterA_outDataCore$EMPTY_N ||
	      data_ram_serverAdapterA_outData_enqData$whas) &&
	     data_ram_serverAdapterA_outData_outData$whas ;

  // submodule data_ram_memory
  assign data_ram_memory$ADDRA = cpu$dbus_req_snd_snd_fst >> 2 ;
  assign data_ram_memory$ADDRB = cnt ;
  assign data_ram_memory$DIA = cpu$dbus_req_snd_snd_snd ;
  assign data_ram_memory$DIB = 32'd0 ;
  assign data_ram_memory$WEA = cpu$dbus_req_snd_fst ;
  assign data_ram_memory$WEB = 4'b0 ;
  assign data_ram_memory$ENA = data_ram_serverAdapterA_writeWithResp$whas ;
  assign data_ram_memory$ENB =
	     WILL_FIRE_RL_data_ram_serverAdapterB_stageReadResponseAlways ;

  // submodule data_ram_serverAdapterA_outDataCore
  assign data_ram_serverAdapterA_outDataCore$D_IN = data_ram_memory$DOA ;
  assign data_ram_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_data_ram_serverAdapterA_outData_enqAndDeq ||
	     data_ram_serverAdapterA_outDataCore$FULL_N &&
	     !data_ram_serverAdapterA_outData_deqCalled$whas &&
	     data_ram_serverAdapterA_outData_enqData$whas ;
  assign data_ram_serverAdapterA_outDataCore$DEQ =
	     WILL_FIRE_RL_data_ram_serverAdapterA_outData_enqAndDeq ||
	     data_ram_serverAdapterA_outDataCore$EMPTY_N &&
	     data_ram_serverAdapterA_outData_deqCalled$whas &&
	     !data_ram_serverAdapterA_outData_enqData$whas ;
  assign data_ram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule data_ram_serverAdapterB_outDataCore
  assign data_ram_serverAdapterB_outDataCore$D_IN = data_ram_memory$DOB ;
  assign data_ram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_data_ram_serverAdapterB_outData_enqAndDeq ||
	     data_ram_serverAdapterB_outDataCore$FULL_N &&
	     !WILL_FIRE_RL_action_l56c10 &&
	     data_ram_serverAdapterB_outData_enqData$whas ;
  assign data_ram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_data_ram_serverAdapterB_outData_enqAndDeq ||
	     data_ram_serverAdapterB_outDataCore$EMPTY_N &&
	     WILL_FIRE_RL_action_l56c10 &&
	     !data_ram_serverAdapterB_outData_enqData$whas ;
  assign data_ram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule instr_ram_memory
  assign instr_ram_memory$ADDR = cpu$ibus_req >> 2 ;
  assign instr_ram_memory$DI = 32'd0 ;
  assign instr_ram_memory$WE = 1'd0 ;
  assign instr_ram_memory$EN =
	     WILL_FIRE_RL_instr_ram_serverAdapter_stageReadResponseAlways ;

  // submodule instr_ram_serverAdapter_outDataCore
  assign instr_ram_serverAdapter_outDataCore$D_IN = instr_ram_memory$DO ;
  assign instr_ram_serverAdapter_outDataCore$ENQ =
	     WILL_FIRE_RL_instr_ram_serverAdapter_outData_enqAndDeq ||
	     instr_ram_serverAdapter_outDataCore$FULL_N &&
	     !instr_ram_serverAdapter_outData_deqCalled$whas &&
	     instr_ram_serverAdapter_outData_enqData$whas ;
  assign instr_ram_serverAdapter_outDataCore$DEQ =
	     WILL_FIRE_RL_instr_ram_serverAdapter_outData_enqAndDeq ||
	     instr_ram_serverAdapter_outDataCore$EMPTY_N &&
	     instr_ram_serverAdapter_outData_deqCalled$whas &&
	     !instr_ram_serverAdapter_outData_enqData$whas ;
  assign instr_ram_serverAdapter_outDataCore$CLR = 1'b0 ;

  // remaining internal signals
  assign _100_MUL_cyc_58_38_BITS_31_TO_0_39_QUOT_cnt_95___d240 =
	     _100_MUL_cyc_58___d238[31:0] / cnt ;
  assign _100_MUL_cyc_58___d238 = 32'd100 * cyc ;
  assign abort_whas__63_AND_abort_wget__64_65_OR_state__ETC___d271 =
	     (state_mkFSMstate == 4'd0 ||
	      !cnt_95_ULT_40___d196 && state_mkFSMstate == 4'd6 ||
	      !cnt_95_ULT_40___d196 && state_mkFSMstate == 4'd9) &&
	     (!start_reg_1 || state_fired) ;
  assign cnt_95_ULT_40___d196 = cnt < 32'd40 ;
  assign cpu_RDY_dbus_req_snd_snd_fst__81_AND_cpu_RDY_d_ETC___d287 =
	     cpu$RDY_dbus_req_snd_snd_fst && cpu$RDY_dbus_req_snd_snd_snd &&
	     cpu$RDY_dbus_reqx &&
	     (data_ram_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign data_ram_serverAdapterA_cnt_0_PLUS_IF_data_ram_ETC___d86 =
	     data_ram_serverAdapterA_cnt +
	     (data_ram_serverAdapterA_cnt_1$whas ? 3'd1 : 3'd0) +
	     (data_ram_serverAdapterA_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign data_ram_serverAdapterB_cnt_32_PLUS_IF_data_ra_ETC___d138 =
	     data_ram_serverAdapterB_cnt +
	     (WILL_FIRE_RL_data_ram_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (WILL_FIRE_RL_action_l56c10 ? 3'd7 : 3'd0) ;
  assign instr_ram_serverAdapter_cnt_7_PLUS_IF_instr_ra_ETC___d33 =
	     instr_ram_serverAdapter_cnt +
	     (WILL_FIRE_RL_instr_ram_serverAdapter_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (instr_ram_serverAdapter_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign lastpc_13_EQ_cpu_ibus_req__14___d215 = lastpc == cpu$ibus_req ;
  assign v__h36519 =
	     data_ram_serverAdapterB_outDataCore$EMPTY_N ?
	       data_ram_serverAdapterB_outDataCore$D_OUT :
	       data_ram_memory$DOB ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cyc <= `BSV_ASSIGNMENT_DELAY 32'd0;
	data_ram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	data_ram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	data_ram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	data_ram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	instr_ram_serverAdapter_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	instr_ram_serverAdapter_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	jj_delay_count <= `BSV_ASSIGNMENT_DELAY 9'd1;
	lastpc <= `BSV_ASSIGNMENT_DELAY 32'hFFFFFFFF;
	running <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (cnt$EN) cnt <= `BSV_ASSIGNMENT_DELAY cnt$D_IN;
	if (cyc$EN) cyc <= `BSV_ASSIGNMENT_DELAY cyc$D_IN;
	if (data_ram_serverAdapterA_cnt$EN)
	  data_ram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      data_ram_serverAdapterA_cnt$D_IN;
	if (data_ram_serverAdapterA_s1$EN)
	  data_ram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      data_ram_serverAdapterA_s1$D_IN;
	if (data_ram_serverAdapterB_cnt$EN)
	  data_ram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      data_ram_serverAdapterB_cnt$D_IN;
	if (data_ram_serverAdapterB_s1$EN)
	  data_ram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      data_ram_serverAdapterB_s1$D_IN;
	if (instr_ram_serverAdapter_cnt$EN)
	  instr_ram_serverAdapter_cnt <= `BSV_ASSIGNMENT_DELAY
	      instr_ram_serverAdapter_cnt$D_IN;
	if (instr_ram_serverAdapter_s1$EN)
	  instr_ram_serverAdapter_s1 <= `BSV_ASSIGNMENT_DELAY
	      instr_ram_serverAdapter_s1$D_IN;
	if (jj_delay_count$EN)
	  jj_delay_count <= `BSV_ASSIGNMENT_DELAY jj_delay_count$D_IN;
	if (lastpc$EN) lastpc <= `BSV_ASSIGNMENT_DELAY lastpc$D_IN;
	if (running$EN) running <= `BSV_ASSIGNMENT_DELAY running$D_IN;
	if (start_reg$EN) start_reg <= `BSV_ASSIGNMENT_DELAY start_reg$D_IN;
	if (start_reg_1$EN)
	  start_reg_1 <= `BSV_ASSIGNMENT_DELAY start_reg_1$D_IN;
	if (state_can_overlap$EN)
	  state_can_overlap <= `BSV_ASSIGNMENT_DELAY state_can_overlap$D_IN;
	if (state_fired$EN)
	  state_fired <= `BSV_ASSIGNMENT_DELAY state_fired$D_IN;
	if (state_mkFSMstate$EN)
	  state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY state_mkFSMstate$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cnt = 32'hAAAAAAAA;
    cyc = 32'hAAAAAAAA;
    data_ram_serverAdapterA_cnt = 3'h2;
    data_ram_serverAdapterA_s1 = 2'h2;
    data_ram_serverAdapterB_cnt = 3'h2;
    data_ram_serverAdapterB_s1 = 2'h2;
    instr_ram_serverAdapter_cnt = 3'h2;
    instr_ram_serverAdapter_s1 = 2'h2;
    jj_delay_count = 9'h0AA;
    lastpc = 32'hAAAAAAAA;
    running = 1'h0;
    start_reg = 1'h0;
    start_reg_1 = 1'h0;
    state_can_overlap = 1'h0;
    state_fired = 1'h0;
    state_mkFSMstate = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l51c7)
	$display("final: cycle=%5d   instructions=%5d   100*cpi=%4d   pc/4=%5d",
		 cyc,
		 cnt,
		 _100_MUL_cyc_58_38_BITS_31_TO_0_39_QUOT_cnt_95___d240,
		 lastpc >> 2);
    if (RST_N != `BSV_RESET_VALUE)
      if (running &&
	  abort_whas__63_AND_abort_wget__64_65_OR_state__ETC___d271 &&
	  !start_reg)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (instr_ram_serverAdapter_s1[1] &&
	  !instr_ram_serverAdapter_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (data_ram_serverAdapterA_s1[1] &&
	  !data_ram_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (data_ram_serverAdapterB_s1[1] &&
	  !data_ram_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l56c10)
	$display("DataRAM[%x] = %d", { cnt[29:0], 2'd0 }, $signed(v__h36519));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l35c10 &&
	  (WILL_FIRE_RL_instr_ram_serverAdapter_stageReadResponseAlways ||
	   WILL_FIRE_RL_action_d_init_np ||
	   WILL_FIRE_RL_action_np ||
	   WILL_FIRE_RL_action_l51c7 ||
	   state_mkFSMstate == 4'd5 ||
	   WILL_FIRE_RL_data_ram_serverAdapterB_stageReadResponseAlways ||
	   WILL_FIRE_RL_action_l56c10 ||
	   state_mkFSMstate == 4'd8))
	$display("Error: \"TbRv32iCPU.bsv\", line 35, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l35c10] and\n  [RL_action_l39c10, RL_action_d_init_np, RL_action_np, RL_action_l51c7,\n  RL_action_f_init_l54c7, RL_action_l55c18, RL_action_l56c10,\n  RL_action_f_update_l54c7] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_instr_ram_serverAdapter_stageReadResponseAlways &&
	  (WILL_FIRE_RL_action_d_init_np || WILL_FIRE_RL_action_np ||
	   WILL_FIRE_RL_action_l51c7 ||
	   state_mkFSMstate == 4'd5 ||
	   WILL_FIRE_RL_data_ram_serverAdapterB_stageReadResponseAlways ||
	   WILL_FIRE_RL_action_l56c10 ||
	   state_mkFSMstate == 4'd8))
	$display("Error: \"TbRv32iCPU.bsv\", line 39, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l39c10] and\n  [RL_action_d_init_np, RL_action_np, RL_action_l51c7, RL_action_f_init_l54c7,\n  RL_action_l55c18, RL_action_l56c10, RL_action_f_update_l54c7] ) fired in the\n  same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_d_init_np &&
	  (WILL_FIRE_RL_action_np || WILL_FIRE_RL_action_l51c7 ||
	   state_mkFSMstate == 4'd5 ||
	   WILL_FIRE_RL_data_ram_serverAdapterB_stageReadResponseAlways ||
	   WILL_FIRE_RL_action_l56c10 ||
	   state_mkFSMstate == 4'd8))
	$display("Error: \"StmtFSM.bs\", line 41, column 0: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_d_init_np] and\n  [RL_action_np, RL_action_l51c7, RL_action_f_init_l54c7, RL_action_l55c18,\n  RL_action_l56c10, RL_action_f_update_l54c7] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_np &&
	  (WILL_FIRE_RL_action_l51c7 || state_mkFSMstate == 4'd5 ||
	   WILL_FIRE_RL_data_ram_serverAdapterB_stageReadResponseAlways ||
	   WILL_FIRE_RL_action_l56c10 ||
	   state_mkFSMstate == 4'd8))
	$display("Error: \"StmtFSM.bs\", line 41, column 0: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_np] and\n  [RL_action_l51c7, RL_action_f_init_l54c7, RL_action_l55c18,\n  RL_action_l56c10, RL_action_f_update_l54c7] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l51c7 &&
	  (state_mkFSMstate == 4'd5 ||
	   WILL_FIRE_RL_data_ram_serverAdapterB_stageReadResponseAlways ||
	   WILL_FIRE_RL_action_l56c10 ||
	   state_mkFSMstate == 4'd8))
	$display("Error: \"TbRv32iCPU.bsv\", line 51, column 7: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l51c7] and\n  [RL_action_f_init_l54c7, RL_action_l55c18, RL_action_l56c10,\n  RL_action_f_update_l54c7] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd5 &&
	  (WILL_FIRE_RL_data_ram_serverAdapterB_stageReadResponseAlways ||
	   WILL_FIRE_RL_action_l56c10 ||
	   state_mkFSMstate == 4'd8))
	$display("Error: \"TbRv32iCPU.bsv\", line 54, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_init_l54c7] and\n  [RL_action_l55c18, RL_action_l56c10, RL_action_f_update_l54c7] ) fired in\n  the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_data_ram_serverAdapterB_stageReadResponseAlways &&
	  (WILL_FIRE_RL_action_l56c10 || state_mkFSMstate == 4'd8))
	$display("Error: \"TbRv32iCPU.bsv\", line 55, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l55c18] and\n  [RL_action_l56c10, RL_action_f_update_l54c7] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l56c10 && state_mkFSMstate == 4'd8)
	$display("Error: \"TbRv32iCPU.bsv\", line 56, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l56c10] and\n  [RL_action_f_update_l54c7] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkTb

