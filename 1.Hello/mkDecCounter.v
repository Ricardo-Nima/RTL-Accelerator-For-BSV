//
// Generated by Bluespec Compiler (build 14ff62d)
//
// On Tue Apr  4 20:00:30 CST 2023
//
//
// Ports:
// Name                         I/O  size props
// count                          O    32 reg
// RDY_count                      O     1 const
// overflow                       O     1
// RDY_overflow                   O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDecCounter(CLK,
		    RST_N,

		    count,
		    RDY_count,

		    overflow,
		    RDY_overflow);
  input  CLK;
  input  RST_N;

  // value method count
  output [31 : 0] count;
  output RDY_count;

  // value method overflow
  output overflow;
  output RDY_overflow;

  // signals for module outputs
  wire [31 : 0] count;
  wire RDY_count, RDY_overflow, overflow;

  // register cnt
  reg [31 : 0] cnt;
  wire [31 : 0] cnt$D_IN;
  wire cnt$EN;

  // register forcnt
  reg [31 : 0] forcnt;
  wire [31 : 0] forcnt$D_IN;
  wire forcnt$EN;

  // ports of submodule spi_writer
  wire [7 : 0] spi_writer$write_data;
  wire [2 : 0] spi_writer$spi;
  wire spi_writer$EN_write, spi_writer$RDY_write;

  // value method count
  assign count = cnt ;
  assign RDY_count = 1'd1 ;

  // value method overflow
  assign overflow = cnt == 32'hFFFFFFFF ;
  assign RDY_overflow = 1'd1 ;

  // submodule spi_writer
  mkSPIWriter spi_writer(.CLK(CLK),
			 .RST_N(RST_N),
			 .write_data(spi_writer$write_data),
			 .EN_write(spi_writer$EN_write),
			 .RDY_write(spi_writer$RDY_write),
			 .spi(spi_writer$spi),
			 .RDY_spi());

  // register cnt
  assign cnt$D_IN = (cnt == 32'hFFFFFFFF) ? 32'd0 : cnt + 32'd1 ;
  assign cnt$EN = 1'd1 ;

  // register forcnt
  assign forcnt$D_IN = 32'h0 ;
  assign forcnt$EN = 1'b0 ;

  // submodule spi_writer
  assign spi_writer$write_data = cnt[7:0] ;
  assign spi_writer$EN_write = spi_writer$RDY_write ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	forcnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (cnt$EN) cnt <= `BSV_ASSIGNMENT_DELAY cnt$D_IN;
	if (forcnt$EN) forcnt <= `BSV_ASSIGNMENT_DELAY forcnt$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cnt = 32'hAAAAAAAA;
    forcnt = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      $display(" (ss, sck, mosi) = (%1d, %1d, %1d)",
	       spi_writer$spi[2],
	       spi_writer$spi[1],
	       spi_writer$spi[0]);
  end
  // synopsys translate_on
endmodule  // mkDecCounter

