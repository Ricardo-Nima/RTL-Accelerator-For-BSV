/*
 * Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
 * 
 * On Fri Dec 23 17:42:32 CST 2022
 * 
 */

/* Generation options: sysc-top */
#ifndef __mkTb_h__
#define __mkTb_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkJpegEncoder.h"


/* Class declaration for the mkTb module */
class MOD_mkTb : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Wire<tUInt8> INST_abort;
  MOD_ConfigReg<tUInt32> INST_jj_delay_count;
  MOD_mkJpegEncoder INST_jpg_encoder;
  MOD_Reg<tUInt32> INST_jpg_file;
  MOD_Reg<tUInt32> INST_pgm_reader_filep;
  MOD_Wire<tUInt8> INST_pgm_reader_fsm_abort;
  MOD_Reg<tUInt8> INST_pgm_reader_fsm_start_reg;
  MOD_Reg<tUInt8> INST_pgm_reader_fsm_start_reg_1;
  MOD_Wire<tUInt8> INST_pgm_reader_fsm_start_reg_2;
  MOD_Wire<tUInt8> INST_pgm_reader_fsm_start_wire;
  MOD_Reg<tUInt8> INST_pgm_reader_fsm_state_can_overlap;
  MOD_Reg<tUInt8> INST_pgm_reader_fsm_state_fired;
  MOD_Wire<tUInt8> INST_pgm_reader_fsm_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_pgm_reader_fsm_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_pgm_reader_fsm_state_overlap_pw;
  MOD_Wire<tUInt8> INST_pgm_reader_fsm_state_set_pw;
  MOD_Reg<tUInt32> INST_pgm_reader_i;
  MOD_Reg<tUInt32> INST_pgm_reader_image_params_0;
  MOD_Reg<tUInt32> INST_pgm_reader_image_params_1;
  MOD_Reg<tUInt32> INST_pgm_reader_image_params_2;
  MOD_Reg<tUInt32> INST_pgm_reader_j;
  MOD_Reg<tUInt64> INST_pgm_reader_load_pixels;
  MOD_BRAM<tUInt32,tUInt64,tUInt8> INST_pgm_reader_pixel_fifo_memory;
  MOD_Wire<tUInt8> INST_pgm_reader_pixel_fifo_pwClear;
  MOD_Wire<tUInt8> INST_pgm_reader_pixel_fifo_pwDequeue;
  MOD_Wire<tUInt8> INST_pgm_reader_pixel_fifo_pwEnqueue;
  MOD_Reg<tUWide> INST_pgm_reader_pixel_fifo_rCache;
  MOD_ConfigReg<tUInt32> INST_pgm_reader_pixel_fifo_rRdPtr;
  MOD_ConfigReg<tUInt32> INST_pgm_reader_pixel_fifo_rWrPtr;
  MOD_Wire<tUInt64> INST_pgm_reader_pixel_fifo_wDataIn;
  MOD_Wire<tUInt64> INST_pgm_reader_pixel_fifo_wDataOut;
  MOD_Reg<tUInt8> INST_running;
  MOD_Reg<tUInt8> INST_start_reg;
  MOD_Reg<tUInt8> INST_start_reg_1;
  MOD_Wire<tUInt8> INST_start_reg_2;
  MOD_Wire<tUInt8> INST_start_wire;
  MOD_Reg<tUInt8> INST_state_can_overlap;
  MOD_Reg<tUInt8> INST_state_fired;
  MOD_Wire<tUInt8> INST_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_state_overlap_pw;
  MOD_Wire<tUInt8> INST_state_set_pw;
 
 /* Constructor */
 public:
  MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_action_np;
  tUInt8 DEF_WILL_FIRE_RL_action_d_init_np;
  tUInt8 DEF_WILL_FIRE_RL_action_l36c10;
  tUInt8 DEF_WILL_FIRE_RL_action_l25c7;
  tUInt8 DEF_WILL_FIRE_RL_action_l20c7;
  tUInt8 DEF_WILL_FIRE_RL_pgm_reader_fsm_action_l75c7;
  tUInt8 DEF_WILL_FIRE_RL_pgm_reader_fsm_action_l74c7;
  tUInt8 DEF_WILL_FIRE_RL_pgm_reader_fsm_action_f_update_l66c7;
  tUInt8 DEF_WILL_FIRE_RL_pgm_reader_fsm_action_l71c20;
  tUInt8 DEF_WILL_FIRE_RL_pgm_reader_fsm_action_f_update_l67c10;
  tUInt8 DEF_WILL_FIRE_RL_pgm_reader_fsm_action_l67c33;
  tUInt8 DEF_WILL_FIRE_RL_pgm_reader_fsm_action_f_init_l67c10;
  tUInt8 DEF_WILL_FIRE_RL_pgm_reader_fsm_action_f_init_l66c7;
  tUInt8 DEF_WILL_FIRE_RL_pgm_reader_fsm_action_f_update_l52c7;
  tUInt8 DEF_WILL_FIRE_RL_pgm_reader_fsm_action_l52c28;
  tUInt8 DEF_WILL_FIRE_RL_pgm_reader_fsm_action_f_init_l52c7;
  tUInt8 DEF_WILL_FIRE_RL_pgm_reader_fsm_action_f_update_l42c7;
  tUInt8 DEF_WILL_FIRE_RL_pgm_reader_fsm_action_l42c30;
  tUInt8 DEF_WILL_FIRE_RL_pgm_reader_fsm_action_f_init_l42c7;
  tUInt8 DEF_WILL_FIRE_RL_pgm_reader_fsm_action_l32c7;
  tUInt32 DEF_x__h78627;
  tUInt32 DEF_x__h78533;
  tUInt32 DEF_b__h24176;
  tUInt32 DEF_x__h52242;
  tUInt32 DEF_x__h5481;
  tUInt32 DEF_x__h3193;
  tUInt32 DEF_jj_delay_count_read____d225;
 
 /* Local definitions */
 private:
  tUInt32 DEF_TASK_fgetc___d156;
  tUInt32 DEF_b__h51881;
  tUInt32 DEF_b__h50673;
  tUInt32 DEF_TASK_fopen___d237;
  tUInt32 DEF_TASK_fopen___d67;
  tUWide DEF_x_get__h58249;
  tUWide DEF_pgm_reader_pixel_fifo_rCache___d23;
  tUInt64 DEF_pgm_reader_load_pixels__h56216;
  tUInt32 DEF_pgm_reader_filep__h50699;
  tUInt8 DEF_pgm_reader_pixel_fifo_pwClear_whas____d1;
  tUInt8 DEF_NOT_pgm_reader_pixel_fifo_pwClear_whas___d7;
  tUInt32 DEF_pgm_reader_i_2_PLUS_1___d87;
  tUWide DEF__1_CONCAT_pgm_reader_pixel_fifo_rWrPtr_read_CON_ETC___d14;
 
 /* Rules */
 public:
  void RL_pgm_reader_pixel_fifo_portA();
  void RL_pgm_reader_pixel_fifo_portB();
  void RL_pgm_reader_pixel_fifo_portB_read_data();
  void RL_pgm_reader_fsm_start_reg__dreg_update();
  void RL_pgm_reader_fsm_state_handle_abort();
  void RL_pgm_reader_fsm_state_fired__dreg_update();
  void RL_pgm_reader_fsm_state_every();
  void RL_pgm_reader_fsm_restart();
  void RL_pgm_reader_fsm_action_l32c7();
  void RL_pgm_reader_fsm_action_f_init_l42c7();
  void RL_pgm_reader_fsm_action_l42c30();
  void RL_pgm_reader_fsm_action_f_update_l42c7();
  void RL_pgm_reader_fsm_action_f_init_l52c7();
  void RL_pgm_reader_fsm_action_l52c28();
  void RL_pgm_reader_fsm_action_f_update_l52c7();
  void RL_pgm_reader_fsm_action_f_init_l66c7();
  void RL_pgm_reader_fsm_action_f_init_l67c10();
  void RL_pgm_reader_fsm_action_l67c33();
  void RL_pgm_reader_fsm_action_f_update_l67c10();
  void RL_pgm_reader_fsm_action_l71c20();
  void RL_pgm_reader_fsm_action_f_update_l66c7();
  void RL_pgm_reader_fsm_action_l74c7();
  void RL_pgm_reader_fsm_action_l75c7();
  void RL_pgm_reader_fsm_idle_l30c23();
  void RL_pgm_reader_fsm_fsm_start();
  void RL_pgm_reader_start_fsm();
  void RL_start_reg__dreg_update();
  void RL_state_handle_abort();
  void RL_state_fired__dreg_update();
  void RL_state_every();
  void RL_restart();
  void RL_action_l20c7();
  void RL_action_l25c7();
  void RL_action_l36c10();
  void RL_action_d_init_np();
  void RL_action_np();
  void RL_idle_l19c15();
  void RL_idle_l19c15_1();
  void RL_fsm_start();
  void RL_auto_start();
  void RL_auto_finish();
  void RL_write_jpg_to_file();
  void __me_check_8();
  void __me_check_9();
  void __me_check_10();
  void __me_check_11();
  void __me_check_12();
  void __me_check_13();
  void __me_check_14();
  void __me_check_15();
  void __me_check_16();
  void __me_check_17();
  void __me_check_18();
  void __me_check_19();
  void __me_check_20();
  void __me_check_21();
  void __me_check_31();
  void __me_check_32();
  void __me_check_33();
  void __me_check_34();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkTb &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkTb &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing);
};

#endif /* ifndef __mkTb_h__ */
