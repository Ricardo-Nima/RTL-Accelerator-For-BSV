//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
//
// On Tue Dec 20 23:32:07 CST 2022
//
//
// Ports:
// Name                         I/O  size props
// RDY_init                       O     1
// RDY_waitTillDone               O     1
// RDY_put                        O     1
// get                            O   128
// RDY_get                        O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// init_xtile                     I     9
// init_ytile                     I     9
// put_pixels                     I    64 reg
// EN_init                        I     1
// EN_waitTillDone                I     1 unused
// EN_put                         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkJpegEncoder(CLK,
		     RST_N,

		     init_xtile,
		     init_ytile,
		     EN_init,
		     RDY_init,

		     EN_waitTillDone,
		     RDY_waitTillDone,

		     put_pixels,
		     EN_put,
		     RDY_put,

		     get,
		     RDY_get);
  input  CLK;
  input  RST_N;

  // action method init
  input  [8 : 0] init_xtile;
  input  [8 : 0] init_ytile;
  input  EN_init;
  output RDY_init;

  // action method waitTillDone
  input  EN_waitTillDone;
  output RDY_waitTillDone;

  // action method put
  input  [63 : 0] put_pixels;
  input  EN_put;
  output RDY_put;

  // value method get
  output [127 : 0] get;
  output RDY_get;

  // signals for module outputs
  wire [127 : 0] get;
  wire RDY_get, RDY_init, RDY_put, RDY_waitTillDone;

  // inlined wires
  reg [128 : 0] j_data_self_reg_1$wget;
  wire [120 : 0] lm_bits_self_reg_1$wget;
  wire [63 : 0] linebuf_ram_serverAdapterB_outData_outData$wget;
  wire [8 : 0] norm_pixels_0_self_reg_1$wget,
	       norm_pixels_1_self_reg_1$wget,
	       norm_pixels_2_self_reg_1$wget,
	       norm_pixels_3_self_reg_1$wget,
	       norm_pixels_4_self_reg_1$wget,
	       norm_pixels_5_self_reg_1$wget,
	       norm_pixels_6_self_reg_1$wget,
	       norm_pixels_7_self_reg_1$wget;
  wire [3 : 0] qnt_sy_self_reg_1$wget, zig_sy_self_reg_1$wget;
  wire [1 : 0] c_valid_0_self_reg_1$wget,
	       c_valid_1_self_reg_1$wget,
	       c_valid_2_self_reg_1$wget,
	       c_valid_3_self_reg_1$wget,
	       c_valid_4_self_reg_1$wget,
	       c_valid_5_self_reg_1$wget,
	       c_valid_6_self_reg_1$wget,
	       c_valid_7_self_reg_1$wget;
  wire dcta_double_buffer_empty$wget,
       dcta_double_buffer_full$wget,
       dctb_double_buffer_empty$wget,
       dctb_double_buffer_full$wget,
       fsm_par_blocks_1_start_wire$whas,
       fsm_par_blocks_1_state_set_pw$whas,
       fsm_par_blocks_start_wire$whas,
       fsm_par_blocks_state_set_pw$whas,
       fsm_par_running$whas,
       fsm_start_wire$whas,
       fsm_state_set_pw$whas,
       j_data_self_reg_1$whas,
       linebuf_empty$wget,
       linebuf_full$wget,
       linebuf_ram_serverAdapterA_outData_enqData$whas,
       linebuf_ram_serverAdapterB_outData_deqCalled$whas,
       linebuf_ram_serverAdapterB_outData_enqData$whas,
       linebuf_ram_serverAdapterB_outData_outData$whas,
       pm_len_0_1$whas,
       pm_len_1_1$whas,
       pm_len_2_1$whas,
       pm_len_3_1$whas,
       pm_len_4_1$whas,
       pm_len_5_1$whas,
       pm_len_6_1$whas,
       pm_len_7_1$whas;

  // register c_code_0
  reg [6 : 0] c_code_0;
  wire [6 : 0] c_code_0$D_IN;
  wire c_code_0$EN;

  // register c_code_1
  reg [6 : 0] c_code_1;
  wire [6 : 0] c_code_1$D_IN;
  wire c_code_1$EN;

  // register c_code_2
  reg [6 : 0] c_code_2;
  wire [6 : 0] c_code_2$D_IN;
  wire c_code_2$EN;

  // register c_code_3
  reg [6 : 0] c_code_3;
  wire [6 : 0] c_code_3$D_IN;
  wire c_code_3$EN;

  // register c_code_4
  reg [6 : 0] c_code_4;
  wire [6 : 0] c_code_4$D_IN;
  wire c_code_4$EN;

  // register c_code_5
  reg [6 : 0] c_code_5;
  wire [6 : 0] c_code_5$D_IN;
  wire c_code_5$EN;

  // register c_code_6
  reg [6 : 0] c_code_6;
  wire [6 : 0] c_code_6$D_IN;
  wire c_code_6$EN;

  // register c_code_7
  reg [6 : 0] c_code_7;
  wire [6 : 0] c_code_7$D_IN;
  wire c_code_7$EN;

  // register c_len_0
  reg [2 : 0] c_len_0;
  wire [2 : 0] c_len_0$D_IN;
  wire c_len_0$EN;

  // register c_len_1
  reg [2 : 0] c_len_1;
  wire [2 : 0] c_len_1$D_IN;
  wire c_len_1$EN;

  // register c_len_2
  reg [2 : 0] c_len_2;
  wire [2 : 0] c_len_2$D_IN;
  wire c_len_2$EN;

  // register c_len_3
  reg [2 : 0] c_len_3;
  wire [2 : 0] c_len_3$D_IN;
  wire c_len_3$EN;

  // register c_len_4
  reg [2 : 0] c_len_4;
  wire [2 : 0] c_len_4$D_IN;
  wire c_len_4$EN;

  // register c_len_5
  reg [2 : 0] c_len_5;
  wire [2 : 0] c_len_5$D_IN;
  wire c_len_5$EN;

  // register c_len_6
  reg [2 : 0] c_len_6;
  wire [2 : 0] c_len_6$D_IN;
  wire c_len_6$EN;

  // register c_len_7
  reg [2 : 0] c_len_7;
  wire [2 : 0] c_len_7$D_IN;
  wire c_len_7$EN;

  // register c_prev_zcnt
  reg [3 : 0] c_prev_zcnt;
  wire [3 : 0] c_prev_zcnt$D_IN;
  wire c_prev_zcnt$EN;

  // register c_valid_0_self_reg
  reg [1 : 0] c_valid_0_self_reg;
  wire [1 : 0] c_valid_0_self_reg$D_IN;
  wire c_valid_0_self_reg$EN;

  // register c_valid_1_self_reg
  reg [1 : 0] c_valid_1_self_reg;
  wire [1 : 0] c_valid_1_self_reg$D_IN;
  wire c_valid_1_self_reg$EN;

  // register c_valid_2_self_reg
  reg [1 : 0] c_valid_2_self_reg;
  wire [1 : 0] c_valid_2_self_reg$D_IN;
  wire c_valid_2_self_reg$EN;

  // register c_valid_3_self_reg
  reg [1 : 0] c_valid_3_self_reg;
  wire [1 : 0] c_valid_3_self_reg$D_IN;
  wire c_valid_3_self_reg$EN;

  // register c_valid_4_self_reg
  reg [1 : 0] c_valid_4_self_reg;
  wire [1 : 0] c_valid_4_self_reg$D_IN;
  wire c_valid_4_self_reg$EN;

  // register c_valid_5_self_reg
  reg [1 : 0] c_valid_5_self_reg;
  wire [1 : 0] c_valid_5_self_reg$D_IN;
  wire c_valid_5_self_reg$EN;

  // register c_valid_6_self_reg
  reg [1 : 0] c_valid_6_self_reg;
  wire [1 : 0] c_valid_6_self_reg$D_IN;
  wire c_valid_6_self_reg$EN;

  // register c_valid_7_self_reg
  reg [1 : 0] c_valid_7_self_reg;
  wire [1 : 0] c_valid_7_self_reg$D_IN;
  wire c_valid_7_self_reg$EN;

  // register c_zcnt_0
  reg [3 : 0] c_zcnt_0;
  wire [3 : 0] c_zcnt_0$D_IN;
  wire c_zcnt_0$EN;

  // register c_zcnt_1
  reg [3 : 0] c_zcnt_1;
  wire [3 : 0] c_zcnt_1$D_IN;
  wire c_zcnt_1$EN;

  // register c_zcnt_2
  reg [3 : 0] c_zcnt_2;
  wire [3 : 0] c_zcnt_2$D_IN;
  wire c_zcnt_2$EN;

  // register c_zcnt_3
  reg [3 : 0] c_zcnt_3;
  wire [3 : 0] c_zcnt_3$D_IN;
  wire c_zcnt_3$EN;

  // register c_zcnt_4
  reg [3 : 0] c_zcnt_4;
  wire [3 : 0] c_zcnt_4$D_IN;
  wire c_zcnt_4$EN;

  // register c_zcnt_5
  reg [3 : 0] c_zcnt_5;
  wire [3 : 0] c_zcnt_5$D_IN;
  wire c_zcnt_5$EN;

  // register c_zcnt_6
  reg [3 : 0] c_zcnt_6;
  wire [3 : 0] c_zcnt_6$D_IN;
  wire c_zcnt_6$EN;

  // register c_zcnt_7
  reg [3 : 0] c_zcnt_7;
  wire [3 : 0] c_zcnt_7$D_IN;
  wire c_zcnt_7$EN;

  // register dcta_double_buffer_buffer_0_0
  reg [191 : 0] dcta_double_buffer_buffer_0_0;
  wire [191 : 0] dcta_double_buffer_buffer_0_0$D_IN;
  wire dcta_double_buffer_buffer_0_0$EN;

  // register dcta_double_buffer_buffer_0_1
  reg [191 : 0] dcta_double_buffer_buffer_0_1;
  wire [191 : 0] dcta_double_buffer_buffer_0_1$D_IN;
  wire dcta_double_buffer_buffer_0_1$EN;

  // register dcta_double_buffer_buffer_0_2
  reg [191 : 0] dcta_double_buffer_buffer_0_2;
  wire [191 : 0] dcta_double_buffer_buffer_0_2$D_IN;
  wire dcta_double_buffer_buffer_0_2$EN;

  // register dcta_double_buffer_buffer_0_3
  reg [191 : 0] dcta_double_buffer_buffer_0_3;
  wire [191 : 0] dcta_double_buffer_buffer_0_3$D_IN;
  wire dcta_double_buffer_buffer_0_3$EN;

  // register dcta_double_buffer_buffer_0_4
  reg [191 : 0] dcta_double_buffer_buffer_0_4;
  wire [191 : 0] dcta_double_buffer_buffer_0_4$D_IN;
  wire dcta_double_buffer_buffer_0_4$EN;

  // register dcta_double_buffer_buffer_0_5
  reg [191 : 0] dcta_double_buffer_buffer_0_5;
  wire [191 : 0] dcta_double_buffer_buffer_0_5$D_IN;
  wire dcta_double_buffer_buffer_0_5$EN;

  // register dcta_double_buffer_buffer_0_6
  reg [191 : 0] dcta_double_buffer_buffer_0_6;
  wire [191 : 0] dcta_double_buffer_buffer_0_6$D_IN;
  wire dcta_double_buffer_buffer_0_6$EN;

  // register dcta_double_buffer_buffer_0_7
  reg [191 : 0] dcta_double_buffer_buffer_0_7;
  wire [191 : 0] dcta_double_buffer_buffer_0_7$D_IN;
  wire dcta_double_buffer_buffer_0_7$EN;

  // register dcta_double_buffer_buffer_1_0
  reg [191 : 0] dcta_double_buffer_buffer_1_0;
  wire [191 : 0] dcta_double_buffer_buffer_1_0$D_IN;
  wire dcta_double_buffer_buffer_1_0$EN;

  // register dcta_double_buffer_buffer_1_1
  reg [191 : 0] dcta_double_buffer_buffer_1_1;
  wire [191 : 0] dcta_double_buffer_buffer_1_1$D_IN;
  wire dcta_double_buffer_buffer_1_1$EN;

  // register dcta_double_buffer_buffer_1_2
  reg [191 : 0] dcta_double_buffer_buffer_1_2;
  wire [191 : 0] dcta_double_buffer_buffer_1_2$D_IN;
  wire dcta_double_buffer_buffer_1_2$EN;

  // register dcta_double_buffer_buffer_1_3
  reg [191 : 0] dcta_double_buffer_buffer_1_3;
  wire [191 : 0] dcta_double_buffer_buffer_1_3$D_IN;
  wire dcta_double_buffer_buffer_1_3$EN;

  // register dcta_double_buffer_buffer_1_4
  reg [191 : 0] dcta_double_buffer_buffer_1_4;
  wire [191 : 0] dcta_double_buffer_buffer_1_4$D_IN;
  wire dcta_double_buffer_buffer_1_4$EN;

  // register dcta_double_buffer_buffer_1_5
  reg [191 : 0] dcta_double_buffer_buffer_1_5;
  wire [191 : 0] dcta_double_buffer_buffer_1_5$D_IN;
  wire dcta_double_buffer_buffer_1_5$EN;

  // register dcta_double_buffer_buffer_1_6
  reg [191 : 0] dcta_double_buffer_buffer_1_6;
  wire [191 : 0] dcta_double_buffer_buffer_1_6$D_IN;
  wire dcta_double_buffer_buffer_1_6$EN;

  // register dcta_double_buffer_buffer_1_7
  reg [191 : 0] dcta_double_buffer_buffer_1_7;
  wire [191 : 0] dcta_double_buffer_buffer_1_7$D_IN;
  wire dcta_double_buffer_buffer_1_7$EN;

  // register dcta_double_buffer_rblock
  reg [1 : 0] dcta_double_buffer_rblock;
  wire [1 : 0] dcta_double_buffer_rblock$D_IN;
  wire dcta_double_buffer_rblock$EN;

  // register dcta_double_buffer_rcnt
  reg [31 : 0] dcta_double_buffer_rcnt;
  wire [31 : 0] dcta_double_buffer_rcnt$D_IN;
  wire dcta_double_buffer_rcnt$EN;

  // register dcta_double_buffer_wblock
  reg [1 : 0] dcta_double_buffer_wblock;
  wire [1 : 0] dcta_double_buffer_wblock$D_IN;
  wire dcta_double_buffer_wblock$EN;

  // register dcta_double_buffer_wptr
  reg [2 : 0] dcta_double_buffer_wptr;
  wire [2 : 0] dcta_double_buffer_wptr$D_IN;
  wire dcta_double_buffer_wptr$EN;

  // register dctb_double_buffer_buffer_0_0
  reg [71 : 0] dctb_double_buffer_buffer_0_0;
  wire [71 : 0] dctb_double_buffer_buffer_0_0$D_IN;
  wire dctb_double_buffer_buffer_0_0$EN;

  // register dctb_double_buffer_buffer_0_1
  reg [71 : 0] dctb_double_buffer_buffer_0_1;
  wire [71 : 0] dctb_double_buffer_buffer_0_1$D_IN;
  wire dctb_double_buffer_buffer_0_1$EN;

  // register dctb_double_buffer_buffer_0_2
  reg [71 : 0] dctb_double_buffer_buffer_0_2;
  wire [71 : 0] dctb_double_buffer_buffer_0_2$D_IN;
  wire dctb_double_buffer_buffer_0_2$EN;

  // register dctb_double_buffer_buffer_0_3
  reg [71 : 0] dctb_double_buffer_buffer_0_3;
  wire [71 : 0] dctb_double_buffer_buffer_0_3$D_IN;
  wire dctb_double_buffer_buffer_0_3$EN;

  // register dctb_double_buffer_buffer_0_4
  reg [71 : 0] dctb_double_buffer_buffer_0_4;
  wire [71 : 0] dctb_double_buffer_buffer_0_4$D_IN;
  wire dctb_double_buffer_buffer_0_4$EN;

  // register dctb_double_buffer_buffer_0_5
  reg [71 : 0] dctb_double_buffer_buffer_0_5;
  wire [71 : 0] dctb_double_buffer_buffer_0_5$D_IN;
  wire dctb_double_buffer_buffer_0_5$EN;

  // register dctb_double_buffer_buffer_0_6
  reg [71 : 0] dctb_double_buffer_buffer_0_6;
  wire [71 : 0] dctb_double_buffer_buffer_0_6$D_IN;
  wire dctb_double_buffer_buffer_0_6$EN;

  // register dctb_double_buffer_buffer_0_7
  reg [71 : 0] dctb_double_buffer_buffer_0_7;
  wire [71 : 0] dctb_double_buffer_buffer_0_7$D_IN;
  wire dctb_double_buffer_buffer_0_7$EN;

  // register dctb_double_buffer_buffer_1_0
  reg [71 : 0] dctb_double_buffer_buffer_1_0;
  wire [71 : 0] dctb_double_buffer_buffer_1_0$D_IN;
  wire dctb_double_buffer_buffer_1_0$EN;

  // register dctb_double_buffer_buffer_1_1
  reg [71 : 0] dctb_double_buffer_buffer_1_1;
  wire [71 : 0] dctb_double_buffer_buffer_1_1$D_IN;
  wire dctb_double_buffer_buffer_1_1$EN;

  // register dctb_double_buffer_buffer_1_2
  reg [71 : 0] dctb_double_buffer_buffer_1_2;
  wire [71 : 0] dctb_double_buffer_buffer_1_2$D_IN;
  wire dctb_double_buffer_buffer_1_2$EN;

  // register dctb_double_buffer_buffer_1_3
  reg [71 : 0] dctb_double_buffer_buffer_1_3;
  wire [71 : 0] dctb_double_buffer_buffer_1_3$D_IN;
  wire dctb_double_buffer_buffer_1_3$EN;

  // register dctb_double_buffer_buffer_1_4
  reg [71 : 0] dctb_double_buffer_buffer_1_4;
  wire [71 : 0] dctb_double_buffer_buffer_1_4$D_IN;
  wire dctb_double_buffer_buffer_1_4$EN;

  // register dctb_double_buffer_buffer_1_5
  reg [71 : 0] dctb_double_buffer_buffer_1_5;
  wire [71 : 0] dctb_double_buffer_buffer_1_5$D_IN;
  wire dctb_double_buffer_buffer_1_5$EN;

  // register dctb_double_buffer_buffer_1_6
  reg [71 : 0] dctb_double_buffer_buffer_1_6;
  wire [71 : 0] dctb_double_buffer_buffer_1_6$D_IN;
  wire dctb_double_buffer_buffer_1_6$EN;

  // register dctb_double_buffer_buffer_1_7
  reg [71 : 0] dctb_double_buffer_buffer_1_7;
  wire [71 : 0] dctb_double_buffer_buffer_1_7$D_IN;
  wire dctb_double_buffer_buffer_1_7$EN;

  // register dctb_double_buffer_rblock
  reg [1 : 0] dctb_double_buffer_rblock;
  wire [1 : 0] dctb_double_buffer_rblock$D_IN;
  wire dctb_double_buffer_rblock$EN;

  // register dctb_double_buffer_rcnt
  reg [31 : 0] dctb_double_buffer_rcnt;
  wire [31 : 0] dctb_double_buffer_rcnt$D_IN;
  wire dctb_double_buffer_rcnt$EN;

  // register dctb_double_buffer_wblock
  reg [1 : 0] dctb_double_buffer_wblock;
  wire [1 : 0] dctb_double_buffer_wblock$D_IN;
  wire dctb_double_buffer_wblock$EN;

  // register dctb_double_buffer_wptr
  reg [2 : 0] dctb_double_buffer_wptr;
  wire [2 : 0] dctb_double_buffer_wptr$D_IN;
  wire dctb_double_buffer_wptr$EN;

  // register fsm_par_blocks_1_start_reg
  reg fsm_par_blocks_1_start_reg;
  wire fsm_par_blocks_1_start_reg$D_IN, fsm_par_blocks_1_start_reg$EN;

  // register fsm_par_blocks_1_state_can_overlap
  reg fsm_par_blocks_1_state_can_overlap;
  wire fsm_par_blocks_1_state_can_overlap$D_IN,
       fsm_par_blocks_1_state_can_overlap$EN;

  // register fsm_par_blocks_1_state_fired
  reg fsm_par_blocks_1_state_fired;
  wire fsm_par_blocks_1_state_fired$D_IN, fsm_par_blocks_1_state_fired$EN;

  // register fsm_par_blocks_1_state_mkFSMstate
  reg [2 : 0] fsm_par_blocks_1_state_mkFSMstate;
  reg [2 : 0] fsm_par_blocks_1_state_mkFSMstate$D_IN;
  wire fsm_par_blocks_1_state_mkFSMstate$EN;

  // register fsm_par_blocks_start_reg
  reg fsm_par_blocks_start_reg;
  wire fsm_par_blocks_start_reg$D_IN, fsm_par_blocks_start_reg$EN;

  // register fsm_par_blocks_state_can_overlap
  reg fsm_par_blocks_state_can_overlap;
  wire fsm_par_blocks_state_can_overlap$D_IN,
       fsm_par_blocks_state_can_overlap$EN;

  // register fsm_par_blocks_state_fired
  reg fsm_par_blocks_state_fired;
  wire fsm_par_blocks_state_fired$D_IN, fsm_par_blocks_state_fired$EN;

  // register fsm_par_blocks_state_mkFSMstate
  reg [2 : 0] fsm_par_blocks_state_mkFSMstate;
  reg [2 : 0] fsm_par_blocks_state_mkFSMstate$D_IN;
  wire fsm_par_blocks_state_mkFSMstate$EN;

  // register fsm_start_reg
  reg fsm_start_reg;
  wire fsm_start_reg$D_IN, fsm_start_reg$EN;

  // register fsm_start_reg_1
  reg fsm_start_reg_1;
  wire fsm_start_reg_1$D_IN, fsm_start_reg_1$EN;

  // register fsm_state_can_overlap
  reg fsm_state_can_overlap;
  wire fsm_state_can_overlap$D_IN, fsm_state_can_overlap$EN;

  // register fsm_state_fired
  reg fsm_state_fired;
  wire fsm_state_fired$D_IN, fsm_state_fired$EN;

  // register fsm_state_mkFSMstate
  reg [3 : 0] fsm_state_mkFSMstate;
  reg [3 : 0] fsm_state_mkFSMstate$D_IN;
  wire fsm_state_mkFSMstate$EN;

  // register header_idx
  reg [4 : 0] header_idx;
  wire [4 : 0] header_idx$D_IN;
  wire header_idx$EN;

  // register inout_cnt
  reg [23 : 0] inout_cnt;
  wire [23 : 0] inout_cnt$D_IN;
  wire inout_cnt$EN;

  // register input_idx
  reg [23 : 0] input_idx;
  wire [23 : 0] input_idx$D_IN;
  wire input_idx$EN;

  // register j_data_self_reg
  reg [128 : 0] j_data_self_reg;
  wire [128 : 0] j_data_self_reg$D_IN;
  wire j_data_self_reg$EN;

  // register linebuf_maxi
  reg [2 : 0] linebuf_maxi;
  wire [2 : 0] linebuf_maxi$D_IN;
  wire linebuf_maxi$EN;

  // register linebuf_maxj
  reg [8 : 0] linebuf_maxj;
  wire [8 : 0] linebuf_maxj$D_IN;
  wire linebuf_maxj$EN;

  // register linebuf_ram_serverAdapterA_cnt
  reg [2 : 0] linebuf_ram_serverAdapterA_cnt;
  wire [2 : 0] linebuf_ram_serverAdapterA_cnt$D_IN;
  wire linebuf_ram_serverAdapterA_cnt$EN;

  // register linebuf_ram_serverAdapterA_s1
  reg [1 : 0] linebuf_ram_serverAdapterA_s1;
  wire [1 : 0] linebuf_ram_serverAdapterA_s1$D_IN;
  wire linebuf_ram_serverAdapterA_s1$EN;

  // register linebuf_ram_serverAdapterB_cnt
  reg [2 : 0] linebuf_ram_serverAdapterB_cnt;
  wire [2 : 0] linebuf_ram_serverAdapterB_cnt$D_IN;
  wire linebuf_ram_serverAdapterB_cnt$EN;

  // register linebuf_ram_serverAdapterB_s1
  reg [1 : 0] linebuf_ram_serverAdapterB_s1;
  wire [1 : 0] linebuf_ram_serverAdapterB_s1$D_IN;
  wire linebuf_ram_serverAdapterB_s1$EN;

  // register linebuf_rblock
  reg [1 : 0] linebuf_rblock;
  wire [1 : 0] linebuf_rblock$D_IN;
  wire linebuf_rblock$EN;

  // register linebuf_reversei
  reg linebuf_reversei;
  wire linebuf_reversei$D_IN, linebuf_reversei$EN;

  // register linebuf_reversej
  reg linebuf_reversej;
  wire linebuf_reversej$D_IN, linebuf_reversej$EN;

  // register linebuf_ri
  reg [2 : 0] linebuf_ri;
  wire [2 : 0] linebuf_ri$D_IN;
  wire linebuf_ri$EN;

  // register linebuf_rj
  reg [8 : 0] linebuf_rj;
  wire [8 : 0] linebuf_rj$D_IN;
  wire linebuf_rj$EN;

  // register linebuf_transposeij
  reg linebuf_transposeij;
  wire linebuf_transposeij$D_IN, linebuf_transposeij$EN;

  // register linebuf_wblock
  reg [1 : 0] linebuf_wblock;
  wire [1 : 0] linebuf_wblock$D_IN;
  wire linebuf_wblock$EN;

  // register linebuf_wi
  reg [2 : 0] linebuf_wi;
  wire [2 : 0] linebuf_wi$D_IN;
  wire linebuf_wi$EN;

  // register linebuf_wj
  reg [8 : 0] linebuf_wj;
  wire [8 : 0] linebuf_wj$D_IN;
  wire linebuf_wj$EN;

  // register lm_bits_self_reg
  reg [120 : 0] lm_bits_self_reg;
  wire [120 : 0] lm_bits_self_reg$D_IN;
  wire lm_bits_self_reg$EN;

  // register lm_len
  reg [7 : 0] lm_len;
  wire [7 : 0] lm_len$D_IN;
  wire lm_len$EN;

  // register norm_pixels_0_self_reg
  reg [8 : 0] norm_pixels_0_self_reg;
  wire [8 : 0] norm_pixels_0_self_reg$D_IN;
  wire norm_pixels_0_self_reg$EN;

  // register norm_pixels_1_self_reg
  reg [8 : 0] norm_pixels_1_self_reg;
  wire [8 : 0] norm_pixels_1_self_reg$D_IN;
  wire norm_pixels_1_self_reg$EN;

  // register norm_pixels_2_self_reg
  reg [8 : 0] norm_pixels_2_self_reg;
  wire [8 : 0] norm_pixels_2_self_reg$D_IN;
  wire norm_pixels_2_self_reg$EN;

  // register norm_pixels_3_self_reg
  reg [8 : 0] norm_pixels_3_self_reg;
  wire [8 : 0] norm_pixels_3_self_reg$D_IN;
  wire norm_pixels_3_self_reg$EN;

  // register norm_pixels_4_self_reg
  reg [8 : 0] norm_pixels_4_self_reg;
  wire [8 : 0] norm_pixels_4_self_reg$D_IN;
  wire norm_pixels_4_self_reg$EN;

  // register norm_pixels_5_self_reg
  reg [8 : 0] norm_pixels_5_self_reg;
  wire [8 : 0] norm_pixels_5_self_reg$D_IN;
  wire norm_pixels_5_self_reg$EN;

  // register norm_pixels_6_self_reg
  reg [8 : 0] norm_pixels_6_self_reg;
  wire [8 : 0] norm_pixels_6_self_reg$D_IN;
  wire norm_pixels_6_self_reg$EN;

  // register norm_pixels_7_self_reg
  reg [8 : 0] norm_pixels_7_self_reg;
  wire [8 : 0] norm_pixels_7_self_reg$D_IN;
  wire norm_pixels_7_self_reg$EN;

  // register output_idx
  reg [23 : 0] output_idx;
  wire [23 : 0] output_idx$D_IN;
  wire output_idx$EN;

  // register pm_bits_0
  reg [13 : 0] pm_bits_0;
  wire [13 : 0] pm_bits_0$D_IN;
  wire pm_bits_0$EN;

  // register pm_bits_1
  reg [13 : 0] pm_bits_1;
  wire [13 : 0] pm_bits_1$D_IN;
  wire pm_bits_1$EN;

  // register pm_bits_2
  reg [13 : 0] pm_bits_2;
  wire [13 : 0] pm_bits_2$D_IN;
  wire pm_bits_2$EN;

  // register pm_bits_3
  reg [13 : 0] pm_bits_3;
  wire [13 : 0] pm_bits_3$D_IN;
  wire pm_bits_3$EN;

  // register pm_bits_4
  reg [13 : 0] pm_bits_4;
  wire [13 : 0] pm_bits_4$D_IN;
  wire pm_bits_4$EN;

  // register pm_bits_5
  reg [13 : 0] pm_bits_5;
  wire [13 : 0] pm_bits_5$D_IN;
  wire pm_bits_5$EN;

  // register pm_bits_6
  reg [13 : 0] pm_bits_6;
  wire [13 : 0] pm_bits_6$D_IN;
  wire pm_bits_6$EN;

  // register pm_bits_7
  reg [13 : 0] pm_bits_7;
  wire [13 : 0] pm_bits_7$D_IN;
  wire pm_bits_7$EN;

  // register pm_en
  reg pm_en;
  wire pm_en$D_IN, pm_en$EN;

  // register pm_len_0
  reg [3 : 0] pm_len_0;
  wire [3 : 0] pm_len_0$D_IN;
  wire pm_len_0$EN;

  // register pm_len_1
  reg [3 : 0] pm_len_1;
  wire [3 : 0] pm_len_1$D_IN;
  wire pm_len_1$EN;

  // register pm_len_2
  reg [3 : 0] pm_len_2;
  wire [3 : 0] pm_len_2$D_IN;
  wire pm_len_2$EN;

  // register pm_len_3
  reg [3 : 0] pm_len_3;
  wire [3 : 0] pm_len_3$D_IN;
  wire pm_len_3$EN;

  // register pm_len_4
  reg [3 : 0] pm_len_4;
  wire [3 : 0] pm_len_4$D_IN;
  wire pm_len_4$EN;

  // register pm_len_5
  reg [3 : 0] pm_len_5;
  wire [3 : 0] pm_len_5$D_IN;
  wire pm_len_5$EN;

  // register pm_len_6
  reg [3 : 0] pm_len_6;
  wire [3 : 0] pm_len_6$D_IN;
  wire pm_len_6$EN;

  // register pm_len_7
  reg [3 : 0] pm_len_7;
  wire [3 : 0] pm_len_7$D_IN;
  wire pm_len_7$EN;

  // register qnt_pixels
  reg [63 : 0] qnt_pixels;
  wire [63 : 0] qnt_pixels$D_IN;
  wire qnt_pixels$EN;

  // register qnt_prev_dc
  reg [7 : 0] qnt_prev_dc;
  wire [7 : 0] qnt_prev_dc$D_IN;
  wire qnt_prev_dc$EN;

  // register qnt_sy_self_reg
  reg [3 : 0] qnt_sy_self_reg;
  wire [3 : 0] qnt_sy_self_reg$D_IN;
  wire qnt_sy_self_reg$EN;

  // register st_rem_bits
  reg [127 : 0] st_rem_bits;
  wire [127 : 0] st_rem_bits$D_IN;
  wire st_rem_bits$EN;

  // register st_rem_len
  reg [7 : 0] st_rem_len;
  wire [7 : 0] st_rem_len$D_IN;
  wire st_rem_len$EN;

  // register x_y_bytes
  reg [31 : 0] x_y_bytes;
  wire [31 : 0] x_y_bytes$D_IN;
  wire x_y_bytes$EN;

  // register zig_pixels_0
  reg [8 : 0] zig_pixels_0;
  reg [8 : 0] zig_pixels_0$D_IN;
  wire zig_pixels_0$EN;

  // register zig_pixels_1
  reg [8 : 0] zig_pixels_1;
  reg [8 : 0] zig_pixels_1$D_IN;
  wire zig_pixels_1$EN;

  // register zig_pixels_2
  reg [8 : 0] zig_pixels_2;
  reg [8 : 0] zig_pixels_2$D_IN;
  wire zig_pixels_2$EN;

  // register zig_pixels_3
  reg [8 : 0] zig_pixels_3;
  reg [8 : 0] zig_pixels_3$D_IN;
  wire zig_pixels_3$EN;

  // register zig_pixels_4
  reg [8 : 0] zig_pixels_4;
  reg [8 : 0] zig_pixels_4$D_IN;
  wire zig_pixels_4$EN;

  // register zig_pixels_5
  reg [8 : 0] zig_pixels_5;
  reg [8 : 0] zig_pixels_5$D_IN;
  wire zig_pixels_5$EN;

  // register zig_pixels_6
  reg [8 : 0] zig_pixels_6;
  reg [8 : 0] zig_pixels_6$D_IN;
  wire zig_pixels_6$EN;

  // register zig_pixels_7
  reg [8 : 0] zig_pixels_7;
  reg [8 : 0] zig_pixels_7$D_IN;
  wire zig_pixels_7$EN;

  // register zig_sy_self_reg
  reg [3 : 0] zig_sy_self_reg;
  wire [3 : 0] zig_sy_self_reg$D_IN;
  wire zig_sy_self_reg$EN;

  // ports of submodule linebuf_ram_memory
  wire [63 : 0] linebuf_ram_memory$DIA,
		linebuf_ram_memory$DIB,
		linebuf_ram_memory$DOA,
		linebuf_ram_memory$DOB;
  wire [12 : 0] linebuf_ram_memory$ADDRA, linebuf_ram_memory$ADDRB;
  wire linebuf_ram_memory$ENA,
       linebuf_ram_memory$ENB,
       linebuf_ram_memory$WEA,
       linebuf_ram_memory$WEB;

  // ports of submodule linebuf_ram_serverAdapterA_outDataCore
  wire [63 : 0] linebuf_ram_serverAdapterA_outDataCore$D_IN;
  wire linebuf_ram_serverAdapterA_outDataCore$CLR,
       linebuf_ram_serverAdapterA_outDataCore$DEQ,
       linebuf_ram_serverAdapterA_outDataCore$ENQ,
       linebuf_ram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule linebuf_ram_serverAdapterB_outDataCore
  wire [63 : 0] linebuf_ram_serverAdapterB_outDataCore$D_IN,
		linebuf_ram_serverAdapterB_outDataCore$D_OUT;
  wire linebuf_ram_serverAdapterB_outDataCore$CLR,
       linebuf_ram_serverAdapterB_outDataCore$DEQ,
       linebuf_ram_serverAdapterB_outDataCore$EMPTY_N,
       linebuf_ram_serverAdapterB_outDataCore$ENQ,
       linebuf_ram_serverAdapterB_outDataCore$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_fsm_action_l242c34,
       WILL_FIRE_RL_dct_a_transform,
       WILL_FIRE_RL_dct_b_transform,
       WILL_FIRE_RL_fsm_action_l235c19,
       WILL_FIRE_RL_fsm_action_l238c17,
       WILL_FIRE_RL_fsm_action_l241c23,
       WILL_FIRE_RL_fsm_action_l242c34,
       WILL_FIRE_RL_fsm_action_l246c21,
       WILL_FIRE_RL_fsm_action_l249c24,
       WILL_FIRE_RL_fsm_action_l250c35,
       WILL_FIRE_RL_fsm_action_l262c21,
       WILL_FIRE_RL_fsm_action_l265c14,
       WILL_FIRE_RL_fsm_actionpar_run_l239c7,
       WILL_FIRE_RL_fsm_actionpar_start_l239c7,
       WILL_FIRE_RL_fsm_fsm_start,
       WILL_FIRE_RL_fsm_idle_l234c22,
       WILL_FIRE_RL_fsm_idle_l240c10,
       WILL_FIRE_RL_fsm_idle_l248c10,
       WILL_FIRE_RL_linebuf_ram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_linebuf_ram_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_linebuf_ram_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_pixel_wise_bit_merge;

  // inputs to muxes for submodule ports
  wire [128 : 0] MUX_j_data_self_reg_1$wset_1__VAL_1,
		 MUX_j_data_self_reg_1$wset_1__VAL_2,
		 MUX_j_data_self_reg_1$wset_1__VAL_3;
  wire [23 : 0] MUX_input_idx$write_1__VAL_2, MUX_output_idx$write_1__VAL_2;
  wire [8 : 0] MUX_linebuf_wj$write_1__VAL_1;
  wire [7 : 0] MUX_st_rem_len$write_1__VAL_1;
  wire [4 : 0] MUX_header_idx$write_1__VAL_1;
  wire [2 : 0] MUX_linebuf_wi$write_1__VAL_1;
  wire MUX_j_data_self_reg_1$wset_1__SEL_1,
       MUX_linebuf_wi$write_1__SEL_1,
       MUX_qnt_prev_dc$write_1__SEL_1;

  // remaining internal signals
  reg [127 : 0] CASE_header_idx_0_0xFFD8000000FFE000104A464946_ETC__q187;
  reg [23 : 0] CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q10,
	       CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q11,
	       CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q12,
	       CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q13,
	       CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q14,
	       CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q15,
	       CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q16,
	       CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q17,
	       CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q18,
	       CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q19,
	       CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q20,
	       CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q21,
	       CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q22,
	       CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q23,
	       CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q24,
	       CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q9,
	       SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d622,
	       SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d648,
	       SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d675,
	       SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d702,
	       SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d729,
	       SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d756,
	       SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d783,
	       SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d810;
  reg [8 : 0] CASE_x0608_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q137,
	      CASE_x0608_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q139,
	      CASE_x0608_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q141,
	      CASE_x0608_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q143,
	      CASE_x0608_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q145,
	      CASE_x0608_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q147,
	      CASE_x0608_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q149,
	      CASE_x0608_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q151,
	      CASE_x0608_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q138,
	      CASE_x0608_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q140,
	      CASE_x0608_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q142,
	      CASE_x0608_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q144,
	      CASE_x0608_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q146,
	      CASE_x0608_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q148,
	      CASE_x0608_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q150,
	      CASE_x0608_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q152,
	      CASE_x6252_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q41,
	      CASE_x6252_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q43,
	      CASE_x6252_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q45,
	      CASE_x6252_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q47,
	      CASE_x6252_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q49,
	      CASE_x6252_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q51,
	      CASE_x6252_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q53,
	      CASE_x6252_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q55,
	      CASE_x6252_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q42,
	      CASE_x6252_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q44,
	      CASE_x6252_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q46,
	      CASE_x6252_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q48,
	      CASE_x6252_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q50,
	      CASE_x6252_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q52,
	      CASE_x6252_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q54,
	      CASE_x6252_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q56,
	      CASE_x6978_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q57,
	      CASE_x6978_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q59,
	      CASE_x6978_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q61,
	      CASE_x6978_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q63,
	      CASE_x6978_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q65,
	      CASE_x6978_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q67,
	      CASE_x6978_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q69,
	      CASE_x6978_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q71,
	      CASE_x6978_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q58,
	      CASE_x6978_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q60,
	      CASE_x6978_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q62,
	      CASE_x6978_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q64,
	      CASE_x6978_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q66,
	      CASE_x6978_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q68,
	      CASE_x6978_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q70,
	      CASE_x6978_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q72,
	      CASE_x7704_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q73,
	      CASE_x7704_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q75,
	      CASE_x7704_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q77,
	      CASE_x7704_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q79,
	      CASE_x7704_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q81,
	      CASE_x7704_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q83,
	      CASE_x7704_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q85,
	      CASE_x7704_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q87,
	      CASE_x7704_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q74,
	      CASE_x7704_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q76,
	      CASE_x7704_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q78,
	      CASE_x7704_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q80,
	      CASE_x7704_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q82,
	      CASE_x7704_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q84,
	      CASE_x7704_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q86,
	      CASE_x7704_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q88,
	      CASE_x8430_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q89,
	      CASE_x8430_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q91,
	      CASE_x8430_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q93,
	      CASE_x8430_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q95,
	      CASE_x8430_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q97,
	      CASE_x8430_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q99,
	      CASE_x8430_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q101,
	      CASE_x8430_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q103,
	      CASE_x8430_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q90,
	      CASE_x8430_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q92,
	      CASE_x8430_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q94,
	      CASE_x8430_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q96,
	      CASE_x8430_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q98,
	      CASE_x8430_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q100,
	      CASE_x8430_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q102,
	      CASE_x8430_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q104,
	      CASE_x9156_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q105,
	      CASE_x9156_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q107,
	      CASE_x9156_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q109,
	      CASE_x9156_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q111,
	      CASE_x9156_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q113,
	      CASE_x9156_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q115,
	      CASE_x9156_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q117,
	      CASE_x9156_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q119,
	      CASE_x9156_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q106,
	      CASE_x9156_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q108,
	      CASE_x9156_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q110,
	      CASE_x9156_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q112,
	      CASE_x9156_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q114,
	      CASE_x9156_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q116,
	      CASE_x9156_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q118,
	      CASE_x9156_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q120,
	      CASE_x9299_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q25,
	      CASE_x9299_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q27,
	      CASE_x9299_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q31,
	      CASE_x9299_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q29,
	      CASE_x9299_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q33,
	      CASE_x9299_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q35,
	      CASE_x9299_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q37,
	      CASE_x9299_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q39,
	      CASE_x9299_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q26,
	      CASE_x9299_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q28,
	      CASE_x9299_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q32,
	      CASE_x9299_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q30,
	      CASE_x9299_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q34,
	      CASE_x9299_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q36,
	      CASE_x9299_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q38,
	      CASE_x9299_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q40,
	      CASE_x9882_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q121,
	      CASE_x9882_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q123,
	      CASE_x9882_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q125,
	      CASE_x9882_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q127,
	      CASE_x9882_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q129,
	      CASE_x9882_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q131,
	      CASE_x9882_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q133,
	      CASE_x9882_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q135,
	      CASE_x9882_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q122,
	      CASE_x9882_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q124,
	      CASE_x9882_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q126,
	      CASE_x9882_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q128,
	      CASE_x9882_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q130,
	      CASE_x9882_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q132,
	      CASE_x9882_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q134,
	      CASE_x9882_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q136,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1048,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1226,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1264,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1302,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1340,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1378,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1416,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1454,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1072,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1230,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1268,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1306,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1344,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1382,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1420,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1458,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1096,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1234,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1272,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1310,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1348,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1386,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1424,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1462,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1120,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1238,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1276,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1314,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1352,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1390,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1428,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1466,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1144,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1242,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1280,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1318,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1356,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1394,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1432,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1470,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1168,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1246,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1284,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1322,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1360,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1398,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1436,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1474,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1192,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1250,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1288,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1326,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1364,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1402,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1440,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1478,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1216,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1254,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1292,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1330,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1368,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1406,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1444,
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1482;
  reg [2 : 0] x__h79299,
	      x__h79394,
	      x__h86252,
	      x__h86347,
	      x__h86978,
	      x__h87073,
	      x__h87704,
	      x__h87799,
	      x__h88430,
	      x__h88525,
	      x__h89156,
	      x__h89251,
	      x__h89882,
	      x__h89977,
	      x__h90608,
	      x__h90703;
  wire [247 : 0] IF_st_rem_len_243_PLUS_lm_len_244_245_ULT_128__ETC__q188,
		 bits__h158021,
		 x__h158094,
		 x__h158098,
		 y__h158095,
		 y_avValue_snd__h158202;
  wire [143 : 0] SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d510;
  wire [119 : 0] x__h107162,
		 x__h107175,
		 x__h107188,
		 x__h107201,
		 x__h107214,
		 x__h107227,
		 x__h107240,
		 x__h107297,
		 x__h107349,
		 x__h107401,
		 x__h107453,
		 x__h107505,
		 x__h107557,
		 x__h107609,
		 x__read__h28891,
		 y__h107163,
		 y__h107176,
		 y__h107189,
		 y__h107202,
		 y__h107215,
		 y__h107228,
		 y__h107241;
  wire [95 : 0] SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d463;
  wire [53 : 0] SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d943;
  wire [47 : 0] IF_zig_pixels_7_507_BITS_8_TO_1_508_SRA_0_CONC_ETC___d1569,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d623,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d816,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d842,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d893,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d918,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d944,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d649,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d818,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d844,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d869,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d895,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d920,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d946,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d676,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d821,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d847,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d872,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d898,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d923,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d949,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d703,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d824,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d850,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d901,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d926,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d952,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d730,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d827,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d853,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d904,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d929,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d955,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d757,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d830,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d856,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d881,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d907,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d932,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d958,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d784,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d833,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d859,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d884,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d910,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d935,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d961,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d811,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d836,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d862,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d913,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d938,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d964,
		SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d349,
		SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d393,
		SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d417,
		SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d464,
		SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d487,
		SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d511,
		SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d354,
		SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d395,
		SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d419,
		SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d442,
		SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d466,
		SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d489,
		SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d513,
		SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d360,
		SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d398,
		SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d422,
		SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d445,
		SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d469,
		SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d492,
		SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d516,
		SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d366,
		SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d401,
		SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d425,
		SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d472,
		SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d495,
		SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d519,
		SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d372,
		SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d404,
		SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d428,
		SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d475,
		SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d498,
		SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d522,
		SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d378,
		SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d407,
		SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d431,
		SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d454,
		SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d478,
		SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d501,
		SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d525,
		SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d384,
		SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d410,
		SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d434,
		SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d457,
		SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d481,
		SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d504,
		SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d528,
		SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d390,
		SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d413,
		SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d437,
		SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d484,
		SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d507,
		SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d531,
		_0_CONCAT_IF_init_xtile_EQ_0_358_THEN_1_ELSE_in_ETC___d2364;
  wire [35 : 0] SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d892;
  wire [31 : 0] IF_zig_pixels_7_507_BITS_8_TO_1_508_SRA_0_CONC_ETC___d1548,
		dcta_double_buffer_rcnt_88_PLUS_1___d589,
		dctb_double_buffer_rcnt_017_PLUS_1___d1018;
  wire [23 : 0] SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d705,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d786,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d826,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d835,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d852,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d861,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d877,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d886,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d903,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d912,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d928,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d937,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d954,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d963,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d975,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d982,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q169,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q172,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q175,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q178,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q181,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q184,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q189,
		SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q192,
		SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d348,
		SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d368,
		SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d386,
		SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d403,
		SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d412,
		SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d427,
		SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d436,
		SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d450,
		SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d459,
		SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d474,
		SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d483,
		SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d497,
		SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d506,
		SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d521,
		SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d530,
		SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d540,
		SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d547,
		SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d353,
		SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d359,
		SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d365,
		SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d371,
		SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d377,
		SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d383,
		SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d389,
		SEXT_SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_ETC__q171,
		SEXT_SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_ETC__q174,
		SEXT_SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_ETC__q177,
		SEXT_SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_ETC__q180,
		SEXT_SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_ETC__q183,
		SEXT_SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_ETC__q186,
		SEXT_SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_ETC__q191,
		SEXT_SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_ETC__q194;
  wire [17 : 0] SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d841;
  wire [13 : 0] x__h27294,
		x__h27445,
		x__h27596,
		x__h27747,
		x__h27898,
		x__h28049,
		x__h28200,
		x__h28351;
  wire [8 : 0] IF_init_xtile_EQ_0_358_THEN_1_ELSE_init_xtile___d2359,
	       IF_init_ytile_EQ_0_356_THEN_1_ELSE_init_ytile___d2357,
	       SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q170,
	       SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q173,
	       SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q176,
	       SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q179,
	       SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q182,
	       SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q185,
	       SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q190,
	       SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q193;
  wire [7 : 0] IF_norm_pixels_0_self_reg_BIT_8_THEN_norm_pixe_ETC__q2,
	       IF_norm_pixels_1_self_reg_BIT_8_THEN_norm_pixe_ETC__q1,
	       IF_norm_pixels_2_self_reg_BIT_8_THEN_norm_pixe_ETC__q3,
	       IF_norm_pixels_3_self_reg_BIT_8_THEN_norm_pixe_ETC__q4,
	       IF_norm_pixels_4_self_reg_BIT_8_THEN_norm_pixe_ETC__q5,
	       IF_norm_pixels_5_self_reg_BIT_8_THEN_norm_pixe_ETC__q6,
	       IF_norm_pixels_6_self_reg_BIT_8_THEN_norm_pixe_ETC__q7,
	       IF_norm_pixels_7_self_reg_BIT_8_THEN_norm_pixe_ETC__q8,
	       IF_zig_pixels_0_494_BITS_8_TO_1_495_SRA_IF_IF__ETC___d1506,
	       NEG_qnt_pixels_BITS_15_TO_8__q162,
	       NEG_qnt_pixels_BITS_23_TO_16__q163,
	       NEG_qnt_pixels_BITS_31_TO_24__q164,
	       NEG_qnt_pixels_BITS_39_TO_32__q165,
	       NEG_qnt_pixels_BITS_47_TO_40__q166,
	       NEG_qnt_pixels_BITS_55_TO_48__q167,
	       NEG_qnt_pixels_BITS_63_TO_56__q168,
	       NEG_qnt_pixels_BITS_7_TO_0__q161,
	       _0_CONCAT_pm_len_0_044_045_PLUS_0_CONCAT_pm_len_ETC___d2048,
	       _0_CONCAT_pm_len_0_044_045_PLUS_0_CONCAT_pm_len_ETC___d2051,
	       _0_CONCAT_pm_len_0_044_045_PLUS_0_CONCAT_pm_len_ETC___d2054,
	       _0_CONCAT_pm_len_0_044_045_PLUS_0_CONCAT_pm_len_ETC___d2057,
	       _0_CONCAT_pm_len_0_044_045_PLUS_0_CONCAT_pm_len_ETC___d2060,
	       _0_CONCAT_pm_len_0_044_045_PLUS_0_CONCAT_pm_len_ETC___d2063,
	       st_rem_len_243_PLUS_lm_len_244___d2245,
	       x__h107347,
	       x__h107399,
	       x__h107451,
	       x__h107503,
	       x__h107555,
	       x__h107607,
	       x__h107659,
	       zig_pixels_0_494_BITS_8_TO_1_495_SRA_IF_IF_zig_ETC___d1502,
	       zig_pixels_0_BITS_8_TO_1__q153,
	       zig_pixels_1_570_BITS_8_TO_1_571_SRA_0_CONCAT__ETC___d1575,
	       zig_pixels_1_BITS_8_TO_1__q160,
	       zig_pixels_2_559_BITS_8_TO_1_560_SRA_0_CONCAT__ETC___d1564,
	       zig_pixels_2_BITS_8_TO_1__q159,
	       zig_pixels_3_549_BITS_8_TO_1_550_SRA_0_CONCAT__ETC___d1554,
	       zig_pixels_3_BITS_8_TO_1__q158,
	       zig_pixels_4_538_BITS_8_TO_1_539_SRA_0_CONCAT__ETC___d1543,
	       zig_pixels_4_BITS_8_TO_1__q157,
	       zig_pixels_5_528_BITS_8_TO_1_529_SRA_0_CONCAT__ETC___d1533,
	       zig_pixels_5_BITS_8_TO_1__q156,
	       zig_pixels_6_517_BITS_8_TO_1_518_SRA_0_CONCAT__ETC___d1522,
	       zig_pixels_6_BITS_8_TO_1__q155,
	       zig_pixels_7_507_BITS_8_TO_1_508_SRA_0_CONCAT__ETC___d1512,
	       zig_pixels_7_BITS_8_TO_1__q154;
  wire [6 : 0] IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684,
	       IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723,
	       IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762,
	       IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801,
	       IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840,
	       IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879,
	       IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918,
	       IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645,
	       code__h103823,
	       code__h104610,
	       code__h104933,
	       code__h105256,
	       code__h105579,
	       code__h105902,
	       code__h106225,
	       code__h106548;
  wire [3 : 0] IF_IF_qnt_sy_self_reg_585_BIT_3_586_THEN_qnt_s_ETC___d1617,
	       IF_qnt_pixels_590_BITS_15_TO_8_605_EQ_0_606_TH_ETC___d1620,
	       IF_qnt_pixels_590_BITS_23_TO_16_603_EQ_0_604_T_ETC___d1623,
	       IF_qnt_pixels_590_BITS_31_TO_24_601_EQ_0_602_T_ETC___d1626,
	       IF_qnt_pixels_590_BITS_39_TO_32_599_EQ_0_600_T_ETC___d1629,
	       IF_qnt_pixels_590_BITS_47_TO_40_597_EQ_0_598_T_ETC___d1632,
	       IF_qnt_pixels_590_BITS_55_TO_48_595_EQ_0_596_T_ETC___d1635,
	       b__h25442,
	       b__h25642,
	       b__h25842,
	       b__h26042,
	       b__h26242,
	       b__h26442,
	       b__h26642,
	       b__h26842,
	       c_prev_zcnt_612_PLUS_IF_IF_qnt_sy_self_reg_585_ETC___d1614;
  wire [2 : 0] IF_IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_68_ETC___d1698,
	       IF_IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_68_ETC___d1700,
	       IF_IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_68_ETC___d1702,
	       IF_IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_68_ETC___d1704,
	       IF_IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_68_ETC___d1706,
	       IF_IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_68_ETC___d1708,
	       IF_IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_7_ETC___d1737,
	       IF_IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_7_ETC___d1739,
	       IF_IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_7_ETC___d1741,
	       IF_IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_7_ETC___d1743,
	       IF_IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_7_ETC___d1745,
	       IF_IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_7_ETC___d1747,
	       IF_IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_7_ETC___d1776,
	       IF_IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_7_ETC___d1778,
	       IF_IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_7_ETC___d1780,
	       IF_IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_7_ETC___d1782,
	       IF_IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_7_ETC___d1784,
	       IF_IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_7_ETC___d1786,
	       IF_IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_7_ETC___d1815,
	       IF_IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_7_ETC___d1817,
	       IF_IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_7_ETC___d1819,
	       IF_IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_7_ETC___d1821,
	       IF_IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_7_ETC___d1823,
	       IF_IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_7_ETC___d1825,
	       IF_IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_8_ETC___d1854,
	       IF_IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_8_ETC___d1856,
	       IF_IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_8_ETC___d1858,
	       IF_IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_8_ETC___d1860,
	       IF_IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_8_ETC___d1862,
	       IF_IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_8_ETC___d1864,
	       IF_IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_8_ETC___d1893,
	       IF_IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_8_ETC___d1895,
	       IF_IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_8_ETC___d1897,
	       IF_IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_8_ETC___d1899,
	       IF_IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_8_ETC___d1901,
	       IF_IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_8_ETC___d1903,
	       IF_IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_9_ETC___d1932,
	       IF_IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_9_ETC___d1934,
	       IF_IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_9_ETC___d1936,
	       IF_IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_9_ETC___d1938,
	       IF_IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_9_ETC___d1940,
	       IF_IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_9_ETC___d1942,
	       IF_IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_ETC___d1659,
	       IF_IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_ETC___d1661,
	       IF_IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_ETC___d1663,
	       IF_IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_ETC___d1665,
	       IF_IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_ETC___d1667,
	       IF_IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_ETC___d1669,
	       IF_qnt_sy_self_reg_585_BIT_3_586_THEN_qnt_sy_s_ETC___d1588,
	       IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492,
	       linebuf_ram_serverAdapterB_cnt_8_PLUS_IF_lineb_ETC___d84,
	       x__h104181,
	       x__h104736,
	       x__h105059,
	       x__h105382,
	       x__h105705,
	       x__h106028,
	       x__h106351,
	       x__h106674,
	       x__h91682;
  wire [1 : 0] y__h12215, y__h17571, y__h18982;
  wire c_valid_1_self_reg_950_BIT_1_951_AND_c_valid_2_ETC___d1969,
       dcta_double_buffer_rcnt_88_PLUS_1_89_ULT_8___d590,
       dctb_double_buffer_rcnt_017_PLUS_1_018_ULT_8___d1019,
       fsm_abort_whas__108_AND_fsm_abort_wget__109_11_ETC___d2353,
       fsm_par_blocks_1_abort_whas__158_AND_fsm_par_b_ETC___d2315,
       fsm_par_blocks_abort_whas__129_AND_fsm_par_blo_ETC___d2318,
       header_idx_203_ULT_18___d2204,
       linebuf_ri_20_ULT_linebuf_maxi_19___d133,
       linebuf_rj_25_ULT_linebuf_maxj_24___d130,
       linebuf_wi_296_ULT_linebuf_maxi_19___d2303,
       linebuf_wj_297_EQ_linebuf_maxj_24___d2300,
       norm_pixels_1_self_reg_19_BIT_8_20_AND_norm_pi_ETC___d338,
       st_rem_len_243_PLUS_lm_len_244_245_ULT_128___d2246;

  // action method init
  assign RDY_init =
	     linebuf_empty$wget &&
	     fsm_abort_whas__108_AND_fsm_abort_wget__109_11_ETC___d2353 &&
	     !fsm_start_reg ;

  // action method waitTillDone
  assign RDY_waitTillDone =
	     fsm_abort_whas__108_AND_fsm_abort_wget__109_11_ETC___d2353 &&
	     !fsm_start_reg ;

  // action method put
  assign RDY_put = input_idx != 24'd0 ;

  // value method get
  assign get = j_data_self_reg[128] ? j_data_self_reg[127:0] : 128'd0 ;
  assign RDY_get = j_data_self_reg[128] ;

  // submodule linebuf_ram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd13),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(14'd8192)) linebuf_ram_memory(.CLKA(CLK),
						 .CLKB(CLK),
						 .ADDRA(linebuf_ram_memory$ADDRA),
						 .ADDRB(linebuf_ram_memory$ADDRB),
						 .DIA(linebuf_ram_memory$DIA),
						 .DIB(linebuf_ram_memory$DIB),
						 .WEA(linebuf_ram_memory$WEA),
						 .WEB(linebuf_ram_memory$WEB),
						 .ENA(linebuf_ram_memory$ENA),
						 .ENB(linebuf_ram_memory$ENB),
						 .DOA(linebuf_ram_memory$DOA),
						 .DOB(linebuf_ram_memory$DOB));

  // submodule linebuf_ram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd64),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd1)) linebuf_ram_serverAdapterA_outDataCore(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(linebuf_ram_serverAdapterA_outDataCore$D_IN),
								     .ENQ(linebuf_ram_serverAdapterA_outDataCore$ENQ),
								     .DEQ(linebuf_ram_serverAdapterA_outDataCore$DEQ),
								     .CLR(linebuf_ram_serverAdapterA_outDataCore$CLR),
								     .D_OUT(),
								     .FULL_N(linebuf_ram_serverAdapterA_outDataCore$FULL_N),
								     .EMPTY_N());

  // submodule linebuf_ram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd64),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd1)) linebuf_ram_serverAdapterB_outDataCore(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(linebuf_ram_serverAdapterB_outDataCore$D_IN),
								     .ENQ(linebuf_ram_serverAdapterB_outDataCore$ENQ),
								     .DEQ(linebuf_ram_serverAdapterB_outDataCore$DEQ),
								     .CLR(linebuf_ram_serverAdapterB_outDataCore$CLR),
								     .D_OUT(linebuf_ram_serverAdapterB_outDataCore$D_OUT),
								     .FULL_N(linebuf_ram_serverAdapterB_outDataCore$FULL_N),
								     .EMPTY_N(linebuf_ram_serverAdapterB_outDataCore$EMPTY_N));

  // rule RL_pixel_wise_bit_merge
  assign WILL_FIRE_RL_pixel_wise_bit_merge =
	     c_valid_0_self_reg[1] &&
	     c_valid_1_self_reg_950_BIT_1_951_AND_c_valid_2_ETC___d1969 ;

  // rule RL_linebuf_ram_serverAdapterB_stageReadResponseAlways
  assign WILL_FIRE_RL_linebuf_ram_serverAdapterB_stageReadResponseAlways =
	     (linebuf_ram_serverAdapterB_cnt ^ 3'h4) < 3'd7 &&
	     !linebuf_empty$wget ;

  // rule RL_linebuf_ram_serverAdapterB_outData_setFirstEnq
  assign WILL_FIRE_RL_linebuf_ram_serverAdapterB_outData_setFirstEnq =
	     !linebuf_ram_serverAdapterB_outDataCore$EMPTY_N &&
	     linebuf_ram_serverAdapterB_outData_enqData$whas ;

  // rule RL_linebuf_ram_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_linebuf_ram_serverAdapterB_outData_enqAndDeq =
	     linebuf_ram_serverAdapterB_outDataCore$EMPTY_N &&
	     linebuf_ram_serverAdapterB_outDataCore$FULL_N &&
	     linebuf_ram_serverAdapterB_outData_deqCalled$whas &&
	     linebuf_ram_serverAdapterB_outData_enqData$whas ;

  // rule RL_dct_b_transform
  assign WILL_FIRE_RL_dct_b_transform =
	     !dcta_double_buffer_empty$wget && !dctb_double_buffer_full$wget ;

  // rule RL_dct_a_transform
  assign WILL_FIRE_RL_dct_a_transform =
	     !dcta_double_buffer_full$wget && norm_pixels_0_self_reg[8] &&
	     norm_pixels_1_self_reg_19_BIT_8_20_AND_norm_pi_ETC___d338 ;

  // rule RL_fsm_action_l238c17
  assign WILL_FIRE_RL_fsm_action_l238c17 =
	     header_idx_203_ULT_18___d2204 &&
	     (fsm_state_mkFSMstate == 4'd3 || fsm_state_mkFSMstate == 4'd5) ;

  // rule RL_fsm_actionpar_start_l239c7
  assign WILL_FIRE_RL_fsm_actionpar_start_l239c7 =
	     fsm_par_blocks_1_abort_whas__158_AND_fsm_par_b_ETC___d2315 &&
	     fsm_par_blocks_abort_whas__129_AND_fsm_par_blo_ETC___d2318 &&
	     !header_idx_203_ULT_18___d2204 &&
	     (fsm_state_mkFSMstate == 4'd3 || fsm_state_mkFSMstate == 4'd5) ;

  // rule RL_fsm_action_l265c14
  assign WILL_FIRE_RL_fsm_action_l265c14 =
	     fsm_par_blocks_1_abort_whas__158_AND_fsm_par_b_ETC___d2315 &&
	     fsm_par_blocks_abort_whas__129_AND_fsm_par_blo_ETC___d2318 &&
	     (fsm_state_mkFSMstate == 4'd6 || fsm_state_mkFSMstate == 4'd7) ;

  // rule RL_fsm_actionpar_run_l239c7
  assign WILL_FIRE_RL_fsm_actionpar_run_l239c7 =
	     (fsm_par_blocks_1_state_mkFSMstate != 3'd0 &&
	      fsm_par_blocks_1_state_mkFSMstate != 3'd3 ||
	      fsm_par_blocks_1_start_reg && !fsm_par_blocks_1_state_fired ||
	      fsm_par_blocks_state_mkFSMstate != 3'd0 &&
	      fsm_par_blocks_state_mkFSMstate != 3'd3 ||
	      fsm_par_blocks_start_reg && !fsm_par_blocks_state_fired) &&
	     (fsm_state_mkFSMstate == 4'd6 || fsm_state_mkFSMstate == 4'd7) ;

  // rule RL_fsm_action_l250c35
  assign WILL_FIRE_RL_fsm_action_l250c35 =
	     lm_bits_self_reg[120] && fsm_par_running$whas &&
	     output_idx != 24'd0 &&
	     (fsm_par_blocks_1_state_mkFSMstate == 3'd1 ||
	      fsm_par_blocks_1_state_mkFSMstate == 3'd2) ;

  // rule RL_fsm_action_l262c21
  assign WILL_FIRE_RL_fsm_action_l262c21 =
	     fsm_par_running$whas && output_idx == 24'd0 &&
	     (fsm_par_blocks_1_state_mkFSMstate == 3'd1 ||
	      fsm_par_blocks_1_state_mkFSMstate == 3'd2) ;

  // rule RL_fsm_action_l246c21
  assign WILL_FIRE_RL_fsm_action_l246c21 =
	     fsm_par_running$whas && input_idx == 24'd0 &&
	     (fsm_par_blocks_state_mkFSMstate == 3'd1 ||
	      fsm_par_blocks_state_mkFSMstate == 3'd2) ;

  // rule RL_fsm_fsm_start
  assign WILL_FIRE_RL_fsm_fsm_start =
	     fsm_abort_whas__108_AND_fsm_abort_wget__109_11_ETC___d2353 &&
	     fsm_start_reg ;

  // rule RL_fsm_action_l235c19
  assign WILL_FIRE_RL_fsm_action_l235c19 =
	     fsm_start_wire$whas &&
	     (fsm_state_mkFSMstate == 4'd0 || fsm_state_mkFSMstate == 4'd11) ;

  // rule RL_fsm_idle_l234c22
  assign WILL_FIRE_RL_fsm_idle_l234c22 =
	     !fsm_start_wire$whas && fsm_state_mkFSMstate == 4'd11 ;

  // rule RL_fsm_action_l241c23
  assign WILL_FIRE_RL_fsm_action_l241c23 =
	     fsm_par_running$whas && fsm_par_blocks_start_wire$whas &&
	     (fsm_par_blocks_state_mkFSMstate == 3'd0 ||
	      fsm_par_blocks_state_mkFSMstate == 3'd3) ;

  // rule RL_fsm_idle_l240c10
  assign WILL_FIRE_RL_fsm_idle_l240c10 =
	     !fsm_par_blocks_start_wire$whas &&
	     fsm_par_blocks_state_mkFSMstate == 3'd3 ;

  // rule RL_fsm_action_l249c24
  assign WILL_FIRE_RL_fsm_action_l249c24 =
	     fsm_par_running$whas && fsm_par_blocks_1_start_wire$whas &&
	     (fsm_par_blocks_1_state_mkFSMstate == 3'd0 ||
	      fsm_par_blocks_1_state_mkFSMstate == 3'd3) ;

  // rule RL_fsm_action_l242c34
  assign CAN_FIRE_RL_fsm_action_l242c34 =
	     !linebuf_full$wget && !EN_init &&
	     (linebuf_ram_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     EN_put &&
	     fsm_par_running$whas &&
	     input_idx != 24'd0 &&
	     (fsm_par_blocks_state_mkFSMstate == 3'd1 ||
	      fsm_par_blocks_state_mkFSMstate == 3'd2) ;
  assign WILL_FIRE_RL_fsm_action_l242c34 =
	     CAN_FIRE_RL_fsm_action_l242c34 && !EN_init ;

  // rule RL_fsm_idle_l248c10
  assign WILL_FIRE_RL_fsm_idle_l248c10 =
	     !fsm_par_blocks_1_start_wire$whas &&
	     fsm_par_blocks_1_state_mkFSMstate == 3'd3 ;

  // inputs to muxes for submodule ports
  assign MUX_j_data_self_reg_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_fsm_action_l250c35 &&
	     !st_rem_len_243_PLUS_lm_len_244_245_ULT_128___d2246 ;
  assign MUX_linebuf_wi$write_1__SEL_1 =
	     WILL_FIRE_RL_fsm_action_l242c34 &&
	     linebuf_wj_297_EQ_linebuf_maxj_24___d2300 ;
  assign MUX_qnt_prev_dc$write_1__SEL_1 =
	     zig_sy_self_reg[3] &&
	     IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492 ==
	     3'd0 ;
  assign MUX_header_idx$write_1__VAL_1 = header_idx + 5'd1 ;
  assign MUX_input_idx$write_1__VAL_2 = input_idx - 24'd1 ;
  assign MUX_j_data_self_reg_1$wset_1__VAL_1 =
	     { 1'd1, bits__h158021[247:120] } ;
  assign MUX_j_data_self_reg_1$wset_1__VAL_2 =
	     { 1'd1,
	       CASE_header_idx_0_0xFFD8000000FFE000104A464946_ETC__q187 } ;
  assign MUX_j_data_self_reg_1$wset_1__VAL_3 = { 1'd1, st_rem_bits } ;
  assign MUX_linebuf_wi$write_1__VAL_1 =
	     linebuf_wi_296_ULT_linebuf_maxi_19___d2303 ?
	       linebuf_wi + 3'd1 :
	       3'd0 ;
  assign MUX_linebuf_wj$write_1__VAL_1 =
	     linebuf_wj_297_EQ_linebuf_maxj_24___d2300 ?
	       9'd0 :
	       linebuf_wj + 9'd1 ;
  assign MUX_output_idx$write_1__VAL_2 = output_idx - 24'd1 ;
  assign MUX_st_rem_len$write_1__VAL_1 =
	     st_rem_len_243_PLUS_lm_len_244_245_ULT_128___d2246 ?
	       st_rem_len_243_PLUS_lm_len_244___d2245 :
	       st_rem_len_243_PLUS_lm_len_244___d2245 - 8'd128 ;

  // inlined wires
  assign linebuf_ram_serverAdapterA_outData_enqData$whas =
	     linebuf_ram_serverAdapterA_outDataCore$FULL_N &&
	     linebuf_ram_serverAdapterA_s1[1] &&
	     linebuf_ram_serverAdapterA_s1[0] ;
  assign linebuf_ram_serverAdapterB_outData_enqData$whas =
	     linebuf_ram_serverAdapterB_outDataCore$FULL_N &&
	     linebuf_ram_serverAdapterB_s1[1] &&
	     linebuf_ram_serverAdapterB_s1[0] ;
  assign linebuf_ram_serverAdapterB_outData_outData$wget =
	     WILL_FIRE_RL_linebuf_ram_serverAdapterB_outData_setFirstEnq ?
	       linebuf_ram_memory$DOB :
	       linebuf_ram_serverAdapterB_outDataCore$D_OUT ;
  assign linebuf_ram_serverAdapterB_outData_outData$whas =
	     WILL_FIRE_RL_linebuf_ram_serverAdapterB_outData_setFirstEnq ||
	     linebuf_ram_serverAdapterB_outDataCore$EMPTY_N ;
  assign linebuf_empty$wget = linebuf_wblock == linebuf_rblock ;
  assign linebuf_full$wget = linebuf_wblock == y__h12215 ;
  assign norm_pixels_0_self_reg_1$wget =
	     { 1'd1,
	       linebuf_ram_serverAdapterB_outData_outData$wget[7:0] -
	       8'd128 } ;
  assign norm_pixels_1_self_reg_1$wget =
	     { 1'd1,
	       linebuf_ram_serverAdapterB_outData_outData$wget[15:8] -
	       8'd128 } ;
  assign norm_pixels_2_self_reg_1$wget =
	     { 1'd1,
	       linebuf_ram_serverAdapterB_outData_outData$wget[23:16] -
	       8'd128 } ;
  assign norm_pixels_3_self_reg_1$wget =
	     { 1'd1,
	       linebuf_ram_serverAdapterB_outData_outData$wget[31:24] -
	       8'd128 } ;
  assign norm_pixels_4_self_reg_1$wget =
	     { 1'd1,
	       linebuf_ram_serverAdapterB_outData_outData$wget[39:32] -
	       8'd128 } ;
  assign norm_pixels_5_self_reg_1$wget =
	     { 1'd1,
	       linebuf_ram_serverAdapterB_outData_outData$wget[47:40] -
	       8'd128 } ;
  assign norm_pixels_6_self_reg_1$wget =
	     { 1'd1,
	       linebuf_ram_serverAdapterB_outData_outData$wget[55:48] -
	       8'd128 } ;
  assign norm_pixels_7_self_reg_1$wget =
	     { 1'd1,
	       linebuf_ram_serverAdapterB_outData_outData$wget[63:56] -
	       8'd128 } ;
  assign dcta_double_buffer_empty$wget =
	     dcta_double_buffer_wblock == dcta_double_buffer_rblock ;
  assign dcta_double_buffer_full$wget =
	     dcta_double_buffer_wblock == y__h17571 ;
  assign dctb_double_buffer_empty$wget =
	     dctb_double_buffer_wblock == dctb_double_buffer_rblock ;
  assign dctb_double_buffer_full$wget =
	     dctb_double_buffer_wblock == y__h18982 ;
  assign zig_sy_self_reg_1$wget = { 1'd1, dctb_double_buffer_rcnt[2:0] } ;
  assign qnt_sy_self_reg_1$wget =
	     { 1'd1,
	       IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492 } ;
  assign c_valid_0_self_reg_1$wget =
	     { 1'd1,
	       IF_qnt_sy_self_reg_585_BIT_3_586_THEN_qnt_sy_s_ETC___d1588 ==
	       3'd0 ||
	       qnt_pixels[7:0] != 8'd0 ||
	       c_prev_zcnt_612_PLUS_IF_IF_qnt_sy_self_reg_585_ETC___d1614 ==
	       4'd0 } ;
  assign c_valid_1_self_reg_1$wget =
	     { 1'd1,
	       qnt_pixels[15:8] != 8'd0 ||
	       IF_IF_qnt_sy_self_reg_585_BIT_3_586_THEN_qnt_s_ETC___d1617 ==
	       4'd0 } ;
  assign c_valid_2_self_reg_1$wget =
	     { 1'd1,
	       qnt_pixels[23:16] != 8'd0 ||
	       IF_qnt_pixels_590_BITS_15_TO_8_605_EQ_0_606_TH_ETC___d1620 ==
	       4'd0 } ;
  assign c_valid_3_self_reg_1$wget =
	     { 1'd1,
	       qnt_pixels[31:24] != 8'd0 ||
	       IF_qnt_pixels_590_BITS_23_TO_16_603_EQ_0_604_T_ETC___d1623 ==
	       4'd0 } ;
  assign c_valid_4_self_reg_1$wget =
	     { 1'd1,
	       qnt_pixels[39:32] != 8'd0 ||
	       IF_qnt_pixels_590_BITS_31_TO_24_601_EQ_0_602_T_ETC___d1626 ==
	       4'd0 } ;
  assign c_valid_5_self_reg_1$wget =
	     { 1'd1,
	       qnt_pixels[47:40] != 8'd0 ||
	       IF_qnt_pixels_590_BITS_39_TO_32_599_EQ_0_600_T_ETC___d1629 ==
	       4'd0 } ;
  assign c_valid_6_self_reg_1$wget =
	     { 1'd1,
	       qnt_pixels[55:48] != 8'd0 ||
	       IF_qnt_pixels_590_BITS_47_TO_40_597_EQ_0_598_T_ETC___d1632 ==
	       4'd0 } ;
  assign c_valid_7_self_reg_1$wget =
	     { 1'd1,
	       qnt_pixels[63:56] != 8'd0 ||
	       IF_qnt_pixels_590_BITS_55_TO_48_595_EQ_0_596_T_ETC___d1635 ==
	       4'd0 ||
	       IF_qnt_sy_self_reg_585_BIT_3_586_THEN_qnt_sy_s_ETC___d1588 ==
	       3'd7 } ;
  assign pm_len_0_1$whas =
	     WILL_FIRE_RL_pixel_wise_bit_merge && c_valid_0_self_reg[0] ;
  assign pm_len_1_1$whas =
	     WILL_FIRE_RL_pixel_wise_bit_merge && c_valid_1_self_reg[0] ;
  assign pm_len_2_1$whas =
	     WILL_FIRE_RL_pixel_wise_bit_merge && c_valid_2_self_reg[0] ;
  assign pm_len_3_1$whas =
	     WILL_FIRE_RL_pixel_wise_bit_merge && c_valid_3_self_reg[0] ;
  assign pm_len_4_1$whas =
	     WILL_FIRE_RL_pixel_wise_bit_merge && c_valid_4_self_reg[0] ;
  assign pm_len_5_1$whas =
	     WILL_FIRE_RL_pixel_wise_bit_merge && c_valid_5_self_reg[0] ;
  assign pm_len_6_1$whas =
	     WILL_FIRE_RL_pixel_wise_bit_merge && c_valid_6_self_reg[0] ;
  assign pm_len_7_1$whas =
	     WILL_FIRE_RL_pixel_wise_bit_merge && c_valid_7_self_reg[0] ;
  assign lm_bits_self_reg_1$wget = { 1'd1, x__h107162 | y__h107163 } ;
  always@(MUX_j_data_self_reg_1$wset_1__SEL_1 or
	  MUX_j_data_self_reg_1$wset_1__VAL_1 or
	  WILL_FIRE_RL_fsm_action_l238c17 or
	  MUX_j_data_self_reg_1$wset_1__VAL_2 or
	  WILL_FIRE_RL_fsm_action_l265c14 or
	  MUX_j_data_self_reg_1$wset_1__VAL_3 or fsm_state_mkFSMstate)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_j_data_self_reg_1$wset_1__SEL_1:
	  j_data_self_reg_1$wget = MUX_j_data_self_reg_1$wset_1__VAL_1;
      WILL_FIRE_RL_fsm_action_l238c17:
	  j_data_self_reg_1$wget = MUX_j_data_self_reg_1$wset_1__VAL_2;
      WILL_FIRE_RL_fsm_action_l265c14:
	  j_data_self_reg_1$wget = MUX_j_data_self_reg_1$wset_1__VAL_3;
      fsm_state_mkFSMstate == 4'd9:
	  j_data_self_reg_1$wget = 129'h1FFD90000000000000000000000000000;
      default: j_data_self_reg_1$wget =
		   129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign j_data_self_reg_1$whas =
	     WILL_FIRE_RL_fsm_action_l250c35 &&
	     !st_rem_len_243_PLUS_lm_len_244_245_ULT_128___d2246 ||
	     WILL_FIRE_RL_fsm_action_l238c17 ||
	     WILL_FIRE_RL_fsm_action_l265c14 ||
	     fsm_state_mkFSMstate == 4'd9 ;
  assign fsm_start_wire$whas =
	     WILL_FIRE_RL_fsm_fsm_start ||
	     fsm_start_reg_1 && !fsm_state_fired ;
  assign fsm_par_running$whas =
	     WILL_FIRE_RL_fsm_actionpar_run_l239c7 ||
	     WILL_FIRE_RL_fsm_actionpar_start_l239c7 ;
  assign fsm_par_blocks_start_wire$whas =
	     fsm_par_blocks_start_reg && !fsm_par_blocks_state_fired ||
	     WILL_FIRE_RL_fsm_actionpar_start_l239c7 ;
  assign fsm_par_blocks_1_start_wire$whas =
	     fsm_par_blocks_1_start_reg && !fsm_par_blocks_1_state_fired ||
	     WILL_FIRE_RL_fsm_actionpar_start_l239c7 ;
  assign linebuf_ram_serverAdapterB_outData_deqCalled$whas =
	     (linebuf_ram_serverAdapterB_outDataCore$EMPTY_N ||
	      linebuf_ram_serverAdapterB_outData_enqData$whas) &&
	     linebuf_ram_serverAdapterB_outData_outData$whas ;
  assign fsm_state_set_pw$whas =
	     WILL_FIRE_RL_fsm_idle_l234c22 ||
	     WILL_FIRE_RL_fsm_actionpar_run_l239c7 ||
	     fsm_state_mkFSMstate == 4'd10 ||
	     fsm_state_mkFSMstate == 4'd9 ||
	     WILL_FIRE_RL_fsm_action_l265c14 ||
	     WILL_FIRE_RL_fsm_actionpar_start_l239c7 ||
	     fsm_state_mkFSMstate == 4'd4 ||
	     WILL_FIRE_RL_fsm_action_l238c17 ||
	     fsm_state_mkFSMstate == 4'd2 ||
	     fsm_state_mkFSMstate == 4'd1 ||
	     WILL_FIRE_RL_fsm_action_l235c19 ;
  assign fsm_par_blocks_state_set_pw$whas =
	     WILL_FIRE_RL_fsm_idle_l240c10 ||
	     WILL_FIRE_RL_fsm_action_l246c21 ||
	     WILL_FIRE_RL_fsm_action_l242c34 ||
	     WILL_FIRE_RL_fsm_action_l241c23 ;
  assign fsm_par_blocks_1_state_set_pw$whas =
	     WILL_FIRE_RL_fsm_idle_l248c10 ||
	     WILL_FIRE_RL_fsm_action_l262c21 ||
	     WILL_FIRE_RL_fsm_action_l250c35 ||
	     WILL_FIRE_RL_fsm_action_l249c24 ;

  // register c_code_0
  assign c_code_0$D_IN =
	     qnt_pixels[7] ? qnt_pixels[6:0] - 7'd1 : qnt_pixels[6:0] ;
  assign c_code_0$EN = qnt_sy_self_reg[3] ;

  // register c_code_1
  assign c_code_1$D_IN =
	     qnt_pixels[15] ? qnt_pixels[14:8] - 7'd1 : qnt_pixels[14:8] ;
  assign c_code_1$EN = qnt_sy_self_reg[3] ;

  // register c_code_2
  assign c_code_2$D_IN =
	     qnt_pixels[23] ? qnt_pixels[22:16] - 7'd1 : qnt_pixels[22:16] ;
  assign c_code_2$EN = qnt_sy_self_reg[3] ;

  // register c_code_3
  assign c_code_3$D_IN =
	     qnt_pixels[31] ? qnt_pixels[30:24] - 7'd1 : qnt_pixels[30:24] ;
  assign c_code_3$EN = qnt_sy_self_reg[3] ;

  // register c_code_4
  assign c_code_4$D_IN =
	     qnt_pixels[39] ? qnt_pixels[38:32] - 7'd1 : qnt_pixels[38:32] ;
  assign c_code_4$EN = qnt_sy_self_reg[3] ;

  // register c_code_5
  assign c_code_5$D_IN =
	     qnt_pixels[47] ? qnt_pixels[46:40] - 7'd1 : qnt_pixels[46:40] ;
  assign c_code_5$EN = qnt_sy_self_reg[3] ;

  // register c_code_6
  assign c_code_6$D_IN =
	     qnt_pixels[55] ? qnt_pixels[54:48] - 7'd1 : qnt_pixels[54:48] ;
  assign c_code_6$EN = qnt_sy_self_reg[3] ;

  // register c_code_7
  assign c_code_7$D_IN =
	     qnt_pixels[63] ? qnt_pixels[62:56] - 7'd1 : qnt_pixels[62:56] ;
  assign c_code_7$EN = qnt_sy_self_reg[3] ;

  // register c_len_0
  assign c_len_0$D_IN =
	     (IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[0] ||
	      IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[1] ||
	      IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[2] ||
	      IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[3] ||
	      IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[4] ||
	      IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[5] ||
	      IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[6]) ?
	       IF_IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_ETC___d1669 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_ETC___d1669 ;
  assign c_len_0$EN = qnt_sy_self_reg[3] ;

  // register c_len_1
  assign c_len_1$D_IN =
	     (IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[0] ||
	      IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[1] ||
	      IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[2] ||
	      IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[3] ||
	      IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[4] ||
	      IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[5] ||
	      IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[6]) ?
	       IF_IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_68_ETC___d1708 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_68_ETC___d1708 ;
  assign c_len_1$EN = qnt_sy_self_reg[3] ;

  // register c_len_2
  assign c_len_2$D_IN =
	     (IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[0] ||
	      IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[1] ||
	      IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[2] ||
	      IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[3] ||
	      IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[4] ||
	      IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[5] ||
	      IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[6]) ?
	       IF_IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_7_ETC___d1747 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_7_ETC___d1747 ;
  assign c_len_2$EN = qnt_sy_self_reg[3] ;

  // register c_len_3
  assign c_len_3$D_IN =
	     (IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[0] ||
	      IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[1] ||
	      IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[2] ||
	      IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[3] ||
	      IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[4] ||
	      IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[5] ||
	      IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[6]) ?
	       IF_IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_7_ETC___d1786 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_7_ETC___d1786 ;
  assign c_len_3$EN = qnt_sy_self_reg[3] ;

  // register c_len_4
  assign c_len_4$D_IN =
	     (IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[0] ||
	      IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[1] ||
	      IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[2] ||
	      IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[3] ||
	      IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[4] ||
	      IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[5] ||
	      IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[6]) ?
	       IF_IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_7_ETC___d1825 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_7_ETC___d1825 ;
  assign c_len_4$EN = qnt_sy_self_reg[3] ;

  // register c_len_5
  assign c_len_5$D_IN =
	     (IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[0] ||
	      IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[1] ||
	      IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[2] ||
	      IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[3] ||
	      IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[4] ||
	      IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[5] ||
	      IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[6]) ?
	       IF_IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_8_ETC___d1864 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_8_ETC___d1864 ;
  assign c_len_5$EN = qnt_sy_self_reg[3] ;

  // register c_len_6
  assign c_len_6$D_IN =
	     (IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[0] ||
	      IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[1] ||
	      IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[2] ||
	      IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[3] ||
	      IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[4] ||
	      IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[5] ||
	      IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[6]) ?
	       IF_IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_8_ETC___d1903 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_8_ETC___d1903 ;
  assign c_len_6$EN = qnt_sy_self_reg[3] ;

  // register c_len_7
  assign c_len_7$D_IN =
	     (IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[0] ||
	      IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[1] ||
	      IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[2] ||
	      IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[3] ||
	      IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[4] ||
	      IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[5] ||
	      IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[6]) ?
	       IF_IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_9_ETC___d1942 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_9_ETC___d1942 ;
  assign c_len_7$EN = qnt_sy_self_reg[3] ;

  // register c_prev_zcnt
  assign c_prev_zcnt$D_IN =
	     (IF_qnt_sy_self_reg_585_BIT_3_586_THEN_qnt_sy_s_ETC___d1588 ==
	      3'd7 ||
	      qnt_pixels[63:56] != 8'd0) ?
	       4'd0 :
	       IF_qnt_pixels_590_BITS_55_TO_48_595_EQ_0_596_T_ETC___d1635 ;
  assign c_prev_zcnt$EN = qnt_sy_self_reg[3] ;

  // register c_valid_0_self_reg
  assign c_valid_0_self_reg$D_IN =
	     qnt_sy_self_reg[3] ? c_valid_0_self_reg_1$wget : 2'd0 ;
  assign c_valid_0_self_reg$EN = 1'd1 ;

  // register c_valid_1_self_reg
  assign c_valid_1_self_reg$D_IN =
	     qnt_sy_self_reg[3] ? c_valid_1_self_reg_1$wget : 2'd0 ;
  assign c_valid_1_self_reg$EN = 1'd1 ;

  // register c_valid_2_self_reg
  assign c_valid_2_self_reg$D_IN =
	     qnt_sy_self_reg[3] ? c_valid_2_self_reg_1$wget : 2'd0 ;
  assign c_valid_2_self_reg$EN = 1'd1 ;

  // register c_valid_3_self_reg
  assign c_valid_3_self_reg$D_IN =
	     qnt_sy_self_reg[3] ? c_valid_3_self_reg_1$wget : 2'd0 ;
  assign c_valid_3_self_reg$EN = 1'd1 ;

  // register c_valid_4_self_reg
  assign c_valid_4_self_reg$D_IN =
	     qnt_sy_self_reg[3] ? c_valid_4_self_reg_1$wget : 2'd0 ;
  assign c_valid_4_self_reg$EN = 1'd1 ;

  // register c_valid_5_self_reg
  assign c_valid_5_self_reg$D_IN =
	     qnt_sy_self_reg[3] ? c_valid_5_self_reg_1$wget : 2'd0 ;
  assign c_valid_5_self_reg$EN = 1'd1 ;

  // register c_valid_6_self_reg
  assign c_valid_6_self_reg$D_IN =
	     qnt_sy_self_reg[3] ? c_valid_6_self_reg_1$wget : 2'd0 ;
  assign c_valid_6_self_reg$EN = 1'd1 ;

  // register c_valid_7_self_reg
  assign c_valid_7_self_reg$D_IN =
	     qnt_sy_self_reg[3] ? c_valid_7_self_reg_1$wget : 2'd0 ;
  assign c_valid_7_self_reg$EN = 1'd1 ;

  // register c_zcnt_0
  assign c_zcnt_0$D_IN =
	     (IF_qnt_sy_self_reg_585_BIT_3_586_THEN_qnt_sy_s_ETC___d1588 ==
	      3'd0 ||
	      qnt_pixels[7:0] != 8'd0 ||
	      c_prev_zcnt_612_PLUS_IF_IF_qnt_sy_self_reg_585_ETC___d1614 ==
	      4'd0) ?
	       c_prev_zcnt_612_PLUS_IF_IF_qnt_sy_self_reg_585_ETC___d1614 :
	       4'd1 ;
  assign c_zcnt_0$EN = qnt_sy_self_reg[3] ;

  // register c_zcnt_1
  assign c_zcnt_1$D_IN =
	     (qnt_pixels[15:8] != 8'd0 ||
	      IF_IF_qnt_sy_self_reg_585_BIT_3_586_THEN_qnt_s_ETC___d1617 ==
	      4'd0) ?
	       IF_IF_qnt_sy_self_reg_585_BIT_3_586_THEN_qnt_s_ETC___d1617 :
	       4'd1 ;
  assign c_zcnt_1$EN = qnt_sy_self_reg[3] ;

  // register c_zcnt_2
  assign c_zcnt_2$D_IN =
	     (qnt_pixels[23:16] != 8'd0 ||
	      IF_qnt_pixels_590_BITS_15_TO_8_605_EQ_0_606_TH_ETC___d1620 ==
	      4'd0) ?
	       IF_qnt_pixels_590_BITS_15_TO_8_605_EQ_0_606_TH_ETC___d1620 :
	       4'd1 ;
  assign c_zcnt_2$EN = qnt_sy_self_reg[3] ;

  // register c_zcnt_3
  assign c_zcnt_3$D_IN =
	     (qnt_pixels[31:24] != 8'd0 ||
	      IF_qnt_pixels_590_BITS_23_TO_16_603_EQ_0_604_T_ETC___d1623 ==
	      4'd0) ?
	       IF_qnt_pixels_590_BITS_23_TO_16_603_EQ_0_604_T_ETC___d1623 :
	       4'd1 ;
  assign c_zcnt_3$EN = qnt_sy_self_reg[3] ;

  // register c_zcnt_4
  assign c_zcnt_4$D_IN =
	     (qnt_pixels[39:32] != 8'd0 ||
	      IF_qnt_pixels_590_BITS_31_TO_24_601_EQ_0_602_T_ETC___d1626 ==
	      4'd0) ?
	       IF_qnt_pixels_590_BITS_31_TO_24_601_EQ_0_602_T_ETC___d1626 :
	       4'd1 ;
  assign c_zcnt_4$EN = qnt_sy_self_reg[3] ;

  // register c_zcnt_5
  assign c_zcnt_5$D_IN =
	     (qnt_pixels[47:40] != 8'd0 ||
	      IF_qnt_pixels_590_BITS_39_TO_32_599_EQ_0_600_T_ETC___d1629 ==
	      4'd0) ?
	       IF_qnt_pixels_590_BITS_39_TO_32_599_EQ_0_600_T_ETC___d1629 :
	       4'd1 ;
  assign c_zcnt_5$EN = qnt_sy_self_reg[3] ;

  // register c_zcnt_6
  assign c_zcnt_6$D_IN =
	     (qnt_pixels[55:48] != 8'd0 ||
	      IF_qnt_pixels_590_BITS_47_TO_40_597_EQ_0_598_T_ETC___d1632 ==
	      4'd0) ?
	       IF_qnt_pixels_590_BITS_47_TO_40_597_EQ_0_598_T_ETC___d1632 :
	       4'd1 ;
  assign c_zcnt_6$EN = qnt_sy_self_reg[3] ;

  // register c_zcnt_7
  assign c_zcnt_7$D_IN =
	     (qnt_pixels[63:56] != 8'd0 ||
	      IF_qnt_pixels_590_BITS_55_TO_48_595_EQ_0_596_T_ETC___d1635 ==
	      4'd0) ?
	       IF_qnt_pixels_590_BITS_55_TO_48_595_EQ_0_596_T_ETC___d1635 :
	       4'd1 ;
  assign c_zcnt_7$EN = qnt_sy_self_reg[3] ;

  // register dcta_double_buffer_buffer_0_0
  assign dcta_double_buffer_buffer_0_0$D_IN =
	     { SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d510,
	       SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d530 +
	       SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d531[23:0],
	       SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d547 +
	       { SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d389[18:0],
		 5'd0 } } ;
  assign dcta_double_buffer_buffer_0_0$EN =
	     WILL_FIRE_RL_dct_a_transform &&
	     dcta_double_buffer_wptr == 3'd0 &&
	     dcta_double_buffer_wblock[0] == 1'd0 ;

  // register dcta_double_buffer_buffer_0_1
  assign dcta_double_buffer_buffer_0_1$D_IN =
	     dcta_double_buffer_buffer_0_0$D_IN ;
  assign dcta_double_buffer_buffer_0_1$EN =
	     WILL_FIRE_RL_dct_a_transform &&
	     dcta_double_buffer_wptr == 3'd1 &&
	     dcta_double_buffer_wblock[0] == 1'd0 ;

  // register dcta_double_buffer_buffer_0_2
  assign dcta_double_buffer_buffer_0_2$D_IN =
	     dcta_double_buffer_buffer_0_0$D_IN ;
  assign dcta_double_buffer_buffer_0_2$EN =
	     WILL_FIRE_RL_dct_a_transform &&
	     dcta_double_buffer_wptr == 3'd2 &&
	     dcta_double_buffer_wblock[0] == 1'd0 ;

  // register dcta_double_buffer_buffer_0_3
  assign dcta_double_buffer_buffer_0_3$D_IN =
	     dcta_double_buffer_buffer_0_0$D_IN ;
  assign dcta_double_buffer_buffer_0_3$EN =
	     WILL_FIRE_RL_dct_a_transform &&
	     dcta_double_buffer_wptr == 3'd3 &&
	     dcta_double_buffer_wblock[0] == 1'd0 ;

  // register dcta_double_buffer_buffer_0_4
  assign dcta_double_buffer_buffer_0_4$D_IN =
	     dcta_double_buffer_buffer_0_0$D_IN ;
  assign dcta_double_buffer_buffer_0_4$EN =
	     WILL_FIRE_RL_dct_a_transform &&
	     dcta_double_buffer_wptr == 3'd4 &&
	     dcta_double_buffer_wblock[0] == 1'd0 ;

  // register dcta_double_buffer_buffer_0_5
  assign dcta_double_buffer_buffer_0_5$D_IN =
	     dcta_double_buffer_buffer_0_0$D_IN ;
  assign dcta_double_buffer_buffer_0_5$EN =
	     WILL_FIRE_RL_dct_a_transform &&
	     dcta_double_buffer_wptr == 3'd5 &&
	     dcta_double_buffer_wblock[0] == 1'd0 ;

  // register dcta_double_buffer_buffer_0_6
  assign dcta_double_buffer_buffer_0_6$D_IN =
	     dcta_double_buffer_buffer_0_0$D_IN ;
  assign dcta_double_buffer_buffer_0_6$EN =
	     WILL_FIRE_RL_dct_a_transform &&
	     dcta_double_buffer_wptr == 3'd6 &&
	     dcta_double_buffer_wblock[0] == 1'd0 ;

  // register dcta_double_buffer_buffer_0_7
  assign dcta_double_buffer_buffer_0_7$D_IN =
	     dcta_double_buffer_buffer_0_0$D_IN ;
  assign dcta_double_buffer_buffer_0_7$EN =
	     WILL_FIRE_RL_dct_a_transform &&
	     dcta_double_buffer_wptr == 3'd7 &&
	     dcta_double_buffer_wblock[0] == 1'd0 ;

  // register dcta_double_buffer_buffer_1_0
  assign dcta_double_buffer_buffer_1_0$D_IN =
	     dcta_double_buffer_buffer_0_0$D_IN ;
  assign dcta_double_buffer_buffer_1_0$EN =
	     WILL_FIRE_RL_dct_a_transform &&
	     dcta_double_buffer_wptr == 3'd0 &&
	     dcta_double_buffer_wblock[0] == 1'd1 ;

  // register dcta_double_buffer_buffer_1_1
  assign dcta_double_buffer_buffer_1_1$D_IN =
	     dcta_double_buffer_buffer_0_0$D_IN ;
  assign dcta_double_buffer_buffer_1_1$EN =
	     WILL_FIRE_RL_dct_a_transform &&
	     dcta_double_buffer_wptr == 3'd1 &&
	     dcta_double_buffer_wblock[0] == 1'd1 ;

  // register dcta_double_buffer_buffer_1_2
  assign dcta_double_buffer_buffer_1_2$D_IN =
	     dcta_double_buffer_buffer_0_0$D_IN ;
  assign dcta_double_buffer_buffer_1_2$EN =
	     WILL_FIRE_RL_dct_a_transform &&
	     dcta_double_buffer_wptr == 3'd2 &&
	     dcta_double_buffer_wblock[0] == 1'd1 ;

  // register dcta_double_buffer_buffer_1_3
  assign dcta_double_buffer_buffer_1_3$D_IN =
	     dcta_double_buffer_buffer_0_0$D_IN ;
  assign dcta_double_buffer_buffer_1_3$EN =
	     WILL_FIRE_RL_dct_a_transform &&
	     dcta_double_buffer_wptr == 3'd3 &&
	     dcta_double_buffer_wblock[0] == 1'd1 ;

  // register dcta_double_buffer_buffer_1_4
  assign dcta_double_buffer_buffer_1_4$D_IN =
	     dcta_double_buffer_buffer_0_0$D_IN ;
  assign dcta_double_buffer_buffer_1_4$EN =
	     WILL_FIRE_RL_dct_a_transform &&
	     dcta_double_buffer_wptr == 3'd4 &&
	     dcta_double_buffer_wblock[0] == 1'd1 ;

  // register dcta_double_buffer_buffer_1_5
  assign dcta_double_buffer_buffer_1_5$D_IN =
	     dcta_double_buffer_buffer_0_0$D_IN ;
  assign dcta_double_buffer_buffer_1_5$EN =
	     WILL_FIRE_RL_dct_a_transform &&
	     dcta_double_buffer_wptr == 3'd5 &&
	     dcta_double_buffer_wblock[0] == 1'd1 ;

  // register dcta_double_buffer_buffer_1_6
  assign dcta_double_buffer_buffer_1_6$D_IN =
	     dcta_double_buffer_buffer_0_0$D_IN ;
  assign dcta_double_buffer_buffer_1_6$EN =
	     WILL_FIRE_RL_dct_a_transform &&
	     dcta_double_buffer_wptr == 3'd6 &&
	     dcta_double_buffer_wblock[0] == 1'd1 ;

  // register dcta_double_buffer_buffer_1_7
  assign dcta_double_buffer_buffer_1_7$D_IN =
	     dcta_double_buffer_buffer_0_0$D_IN ;
  assign dcta_double_buffer_buffer_1_7$EN =
	     WILL_FIRE_RL_dct_a_transform &&
	     dcta_double_buffer_wptr == 3'd7 &&
	     dcta_double_buffer_wblock[0] == 1'd1 ;

  // register dcta_double_buffer_rblock
  assign dcta_double_buffer_rblock$D_IN = dcta_double_buffer_rblock + 2'd1 ;
  assign dcta_double_buffer_rblock$EN =
	     WILL_FIRE_RL_dct_b_transform &&
	     !dcta_double_buffer_rcnt_88_PLUS_1_89_ULT_8___d590 ;

  // register dcta_double_buffer_rcnt
  assign dcta_double_buffer_rcnt$D_IN =
	     dcta_double_buffer_rcnt_88_PLUS_1_89_ULT_8___d590 ?
	       dcta_double_buffer_rcnt_88_PLUS_1___d589 :
	       32'd0 ;
  assign dcta_double_buffer_rcnt$EN = WILL_FIRE_RL_dct_b_transform ;

  // register dcta_double_buffer_wblock
  assign dcta_double_buffer_wblock$D_IN = dcta_double_buffer_wblock + 2'd1 ;
  assign dcta_double_buffer_wblock$EN =
	     WILL_FIRE_RL_dct_a_transform && dcta_double_buffer_wptr == 3'd7 ;

  // register dcta_double_buffer_wptr
  assign dcta_double_buffer_wptr$D_IN =
	     (dcta_double_buffer_wptr == 3'd7) ?
	       3'd0 :
	       dcta_double_buffer_wptr + 3'd1 ;
  assign dcta_double_buffer_wptr$EN = WILL_FIRE_RL_dct_a_transform ;

  // register dctb_double_buffer_buffer_0_0
  assign dctb_double_buffer_buffer_0_0$D_IN =
	     { SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d943,
	       SEXT_SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_ETC__q191[8:0],
	       SEXT_SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_ETC__q194[8:0] } ;
  assign dctb_double_buffer_buffer_0_0$EN =
	     WILL_FIRE_RL_dct_b_transform &&
	     dctb_double_buffer_wptr == 3'd0 &&
	     dctb_double_buffer_wblock[0] == 1'd0 ;

  // register dctb_double_buffer_buffer_0_1
  assign dctb_double_buffer_buffer_0_1$D_IN =
	     dctb_double_buffer_buffer_0_0$D_IN ;
  assign dctb_double_buffer_buffer_0_1$EN =
	     WILL_FIRE_RL_dct_b_transform &&
	     dctb_double_buffer_wptr == 3'd1 &&
	     dctb_double_buffer_wblock[0] == 1'd0 ;

  // register dctb_double_buffer_buffer_0_2
  assign dctb_double_buffer_buffer_0_2$D_IN =
	     dctb_double_buffer_buffer_0_0$D_IN ;
  assign dctb_double_buffer_buffer_0_2$EN =
	     WILL_FIRE_RL_dct_b_transform &&
	     dctb_double_buffer_wptr == 3'd2 &&
	     dctb_double_buffer_wblock[0] == 1'd0 ;

  // register dctb_double_buffer_buffer_0_3
  assign dctb_double_buffer_buffer_0_3$D_IN =
	     dctb_double_buffer_buffer_0_0$D_IN ;
  assign dctb_double_buffer_buffer_0_3$EN =
	     WILL_FIRE_RL_dct_b_transform &&
	     dctb_double_buffer_wptr == 3'd3 &&
	     dctb_double_buffer_wblock[0] == 1'd0 ;

  // register dctb_double_buffer_buffer_0_4
  assign dctb_double_buffer_buffer_0_4$D_IN =
	     dctb_double_buffer_buffer_0_0$D_IN ;
  assign dctb_double_buffer_buffer_0_4$EN =
	     WILL_FIRE_RL_dct_b_transform &&
	     dctb_double_buffer_wptr == 3'd4 &&
	     dctb_double_buffer_wblock[0] == 1'd0 ;

  // register dctb_double_buffer_buffer_0_5
  assign dctb_double_buffer_buffer_0_5$D_IN =
	     dctb_double_buffer_buffer_0_0$D_IN ;
  assign dctb_double_buffer_buffer_0_5$EN =
	     WILL_FIRE_RL_dct_b_transform &&
	     dctb_double_buffer_wptr == 3'd5 &&
	     dctb_double_buffer_wblock[0] == 1'd0 ;

  // register dctb_double_buffer_buffer_0_6
  assign dctb_double_buffer_buffer_0_6$D_IN =
	     dctb_double_buffer_buffer_0_0$D_IN ;
  assign dctb_double_buffer_buffer_0_6$EN =
	     WILL_FIRE_RL_dct_b_transform &&
	     dctb_double_buffer_wptr == 3'd6 &&
	     dctb_double_buffer_wblock[0] == 1'd0 ;

  // register dctb_double_buffer_buffer_0_7
  assign dctb_double_buffer_buffer_0_7$D_IN =
	     dctb_double_buffer_buffer_0_0$D_IN ;
  assign dctb_double_buffer_buffer_0_7$EN =
	     WILL_FIRE_RL_dct_b_transform &&
	     dctb_double_buffer_wptr == 3'd7 &&
	     dctb_double_buffer_wblock[0] == 1'd0 ;

  // register dctb_double_buffer_buffer_1_0
  assign dctb_double_buffer_buffer_1_0$D_IN =
	     dctb_double_buffer_buffer_0_0$D_IN ;
  assign dctb_double_buffer_buffer_1_0$EN =
	     WILL_FIRE_RL_dct_b_transform &&
	     dctb_double_buffer_wptr == 3'd0 &&
	     dctb_double_buffer_wblock[0] == 1'd1 ;

  // register dctb_double_buffer_buffer_1_1
  assign dctb_double_buffer_buffer_1_1$D_IN =
	     dctb_double_buffer_buffer_0_0$D_IN ;
  assign dctb_double_buffer_buffer_1_1$EN =
	     WILL_FIRE_RL_dct_b_transform &&
	     dctb_double_buffer_wptr == 3'd1 &&
	     dctb_double_buffer_wblock[0] == 1'd1 ;

  // register dctb_double_buffer_buffer_1_2
  assign dctb_double_buffer_buffer_1_2$D_IN =
	     dctb_double_buffer_buffer_0_0$D_IN ;
  assign dctb_double_buffer_buffer_1_2$EN =
	     WILL_FIRE_RL_dct_b_transform &&
	     dctb_double_buffer_wptr == 3'd2 &&
	     dctb_double_buffer_wblock[0] == 1'd1 ;

  // register dctb_double_buffer_buffer_1_3
  assign dctb_double_buffer_buffer_1_3$D_IN =
	     dctb_double_buffer_buffer_0_0$D_IN ;
  assign dctb_double_buffer_buffer_1_3$EN =
	     WILL_FIRE_RL_dct_b_transform &&
	     dctb_double_buffer_wptr == 3'd3 &&
	     dctb_double_buffer_wblock[0] == 1'd1 ;

  // register dctb_double_buffer_buffer_1_4
  assign dctb_double_buffer_buffer_1_4$D_IN =
	     dctb_double_buffer_buffer_0_0$D_IN ;
  assign dctb_double_buffer_buffer_1_4$EN =
	     WILL_FIRE_RL_dct_b_transform &&
	     dctb_double_buffer_wptr == 3'd4 &&
	     dctb_double_buffer_wblock[0] == 1'd1 ;

  // register dctb_double_buffer_buffer_1_5
  assign dctb_double_buffer_buffer_1_5$D_IN =
	     dctb_double_buffer_buffer_0_0$D_IN ;
  assign dctb_double_buffer_buffer_1_5$EN =
	     WILL_FIRE_RL_dct_b_transform &&
	     dctb_double_buffer_wptr == 3'd5 &&
	     dctb_double_buffer_wblock[0] == 1'd1 ;

  // register dctb_double_buffer_buffer_1_6
  assign dctb_double_buffer_buffer_1_6$D_IN =
	     dctb_double_buffer_buffer_0_0$D_IN ;
  assign dctb_double_buffer_buffer_1_6$EN =
	     WILL_FIRE_RL_dct_b_transform &&
	     dctb_double_buffer_wptr == 3'd6 &&
	     dctb_double_buffer_wblock[0] == 1'd1 ;

  // register dctb_double_buffer_buffer_1_7
  assign dctb_double_buffer_buffer_1_7$D_IN =
	     dctb_double_buffer_buffer_0_0$D_IN ;
  assign dctb_double_buffer_buffer_1_7$EN =
	     WILL_FIRE_RL_dct_b_transform &&
	     dctb_double_buffer_wptr == 3'd7 &&
	     dctb_double_buffer_wblock[0] == 1'd1 ;

  // register dctb_double_buffer_rblock
  assign dctb_double_buffer_rblock$D_IN = dctb_double_buffer_rblock + 2'd1 ;
  assign dctb_double_buffer_rblock$EN =
	     !dctb_double_buffer_empty$wget &&
	     !dctb_double_buffer_rcnt_017_PLUS_1_018_ULT_8___d1019 ;

  // register dctb_double_buffer_rcnt
  assign dctb_double_buffer_rcnt$D_IN =
	     dctb_double_buffer_rcnt_017_PLUS_1_018_ULT_8___d1019 ?
	       dctb_double_buffer_rcnt_017_PLUS_1___d1018 :
	       32'd0 ;
  assign dctb_double_buffer_rcnt$EN = !dctb_double_buffer_empty$wget ;

  // register dctb_double_buffer_wblock
  assign dctb_double_buffer_wblock$D_IN = dctb_double_buffer_wblock + 2'd1 ;
  assign dctb_double_buffer_wblock$EN =
	     WILL_FIRE_RL_dct_b_transform && dctb_double_buffer_wptr == 3'd7 ;

  // register dctb_double_buffer_wptr
  assign dctb_double_buffer_wptr$D_IN =
	     (dctb_double_buffer_wptr == 3'd7) ?
	       3'd0 :
	       dctb_double_buffer_wptr + 3'd1 ;
  assign dctb_double_buffer_wptr$EN = WILL_FIRE_RL_dct_b_transform ;

  // register fsm_par_blocks_1_start_reg
  assign fsm_par_blocks_1_start_reg$D_IN = fsm_par_blocks_1_start_wire$whas ;
  assign fsm_par_blocks_1_start_reg$EN = 1'd1 ;

  // register fsm_par_blocks_1_state_can_overlap
  assign fsm_par_blocks_1_state_can_overlap$D_IN =
	     fsm_par_blocks_1_state_set_pw$whas ||
	     fsm_par_blocks_1_state_can_overlap ;
  assign fsm_par_blocks_1_state_can_overlap$EN = 1'd1 ;

  // register fsm_par_blocks_1_state_fired
  assign fsm_par_blocks_1_state_fired$D_IN =
	     fsm_par_blocks_1_state_set_pw$whas ;
  assign fsm_par_blocks_1_state_fired$EN = 1'd1 ;

  // register fsm_par_blocks_1_state_mkFSMstate
  always@(WILL_FIRE_RL_fsm_idle_l248c10 or
	  WILL_FIRE_RL_fsm_action_l249c24 or
	  WILL_FIRE_RL_fsm_action_l250c35 or WILL_FIRE_RL_fsm_action_l262c21)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_fsm_idle_l248c10:
	  fsm_par_blocks_1_state_mkFSMstate$D_IN = 3'd0;
      WILL_FIRE_RL_fsm_action_l249c24:
	  fsm_par_blocks_1_state_mkFSMstate$D_IN = 3'd1;
      WILL_FIRE_RL_fsm_action_l250c35:
	  fsm_par_blocks_1_state_mkFSMstate$D_IN = 3'd2;
      WILL_FIRE_RL_fsm_action_l262c21:
	  fsm_par_blocks_1_state_mkFSMstate$D_IN = 3'd3;
      default: fsm_par_blocks_1_state_mkFSMstate$D_IN =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign fsm_par_blocks_1_state_mkFSMstate$EN =
	     WILL_FIRE_RL_fsm_idle_l248c10 ||
	     WILL_FIRE_RL_fsm_action_l249c24 ||
	     WILL_FIRE_RL_fsm_action_l250c35 ||
	     WILL_FIRE_RL_fsm_action_l262c21 ;

  // register fsm_par_blocks_start_reg
  assign fsm_par_blocks_start_reg$D_IN = fsm_par_blocks_start_wire$whas ;
  assign fsm_par_blocks_start_reg$EN = 1'd1 ;

  // register fsm_par_blocks_state_can_overlap
  assign fsm_par_blocks_state_can_overlap$D_IN =
	     fsm_par_blocks_state_set_pw$whas ||
	     fsm_par_blocks_state_can_overlap ;
  assign fsm_par_blocks_state_can_overlap$EN = 1'd1 ;

  // register fsm_par_blocks_state_fired
  assign fsm_par_blocks_state_fired$D_IN = fsm_par_blocks_state_set_pw$whas ;
  assign fsm_par_blocks_state_fired$EN = 1'd1 ;

  // register fsm_par_blocks_state_mkFSMstate
  always@(WILL_FIRE_RL_fsm_idle_l240c10 or
	  WILL_FIRE_RL_fsm_action_l241c23 or
	  WILL_FIRE_RL_fsm_action_l242c34 or WILL_FIRE_RL_fsm_action_l246c21)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_fsm_idle_l240c10:
	  fsm_par_blocks_state_mkFSMstate$D_IN = 3'd0;
      WILL_FIRE_RL_fsm_action_l241c23:
	  fsm_par_blocks_state_mkFSMstate$D_IN = 3'd1;
      WILL_FIRE_RL_fsm_action_l242c34:
	  fsm_par_blocks_state_mkFSMstate$D_IN = 3'd2;
      WILL_FIRE_RL_fsm_action_l246c21:
	  fsm_par_blocks_state_mkFSMstate$D_IN = 3'd3;
      default: fsm_par_blocks_state_mkFSMstate$D_IN =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign fsm_par_blocks_state_mkFSMstate$EN =
	     WILL_FIRE_RL_fsm_idle_l240c10 ||
	     WILL_FIRE_RL_fsm_action_l241c23 ||
	     WILL_FIRE_RL_fsm_action_l242c34 ||
	     WILL_FIRE_RL_fsm_action_l246c21 ;

  // register fsm_start_reg
  assign fsm_start_reg$D_IN = !WILL_FIRE_RL_fsm_fsm_start ;
  assign fsm_start_reg$EN = WILL_FIRE_RL_fsm_fsm_start || EN_init ;

  // register fsm_start_reg_1
  assign fsm_start_reg_1$D_IN = fsm_start_wire$whas ;
  assign fsm_start_reg_1$EN = 1'd1 ;

  // register fsm_state_can_overlap
  assign fsm_state_can_overlap$D_IN =
	     fsm_state_set_pw$whas || fsm_state_can_overlap ;
  assign fsm_state_can_overlap$EN = 1'd1 ;

  // register fsm_state_fired
  assign fsm_state_fired$D_IN = fsm_state_set_pw$whas ;
  assign fsm_state_fired$EN = 1'd1 ;

  // register fsm_state_mkFSMstate
  always@(WILL_FIRE_RL_fsm_idle_l234c22 or
	  WILL_FIRE_RL_fsm_action_l235c19 or
	  fsm_state_mkFSMstate or
	  WILL_FIRE_RL_fsm_action_l238c17 or
	  WILL_FIRE_RL_fsm_actionpar_start_l239c7 or
	  WILL_FIRE_RL_fsm_actionpar_run_l239c7 or
	  WILL_FIRE_RL_fsm_action_l265c14)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_fsm_idle_l234c22: fsm_state_mkFSMstate$D_IN = 4'd0;
      WILL_FIRE_RL_fsm_action_l235c19: fsm_state_mkFSMstate$D_IN = 4'd1;
      fsm_state_mkFSMstate == 4'd1: fsm_state_mkFSMstate$D_IN = 4'd2;
      fsm_state_mkFSMstate == 4'd2: fsm_state_mkFSMstate$D_IN = 4'd3;
      WILL_FIRE_RL_fsm_action_l238c17: fsm_state_mkFSMstate$D_IN = 4'd4;
      fsm_state_mkFSMstate == 4'd4: fsm_state_mkFSMstate$D_IN = 4'd5;
      WILL_FIRE_RL_fsm_actionpar_start_l239c7:
	  fsm_state_mkFSMstate$D_IN = 4'd6;
      WILL_FIRE_RL_fsm_actionpar_run_l239c7: fsm_state_mkFSMstate$D_IN = 4'd7;
      WILL_FIRE_RL_fsm_action_l265c14: fsm_state_mkFSMstate$D_IN = 4'd9;
      fsm_state_mkFSMstate == 4'd9: fsm_state_mkFSMstate$D_IN = 4'd10;
      fsm_state_mkFSMstate == 4'd10: fsm_state_mkFSMstate$D_IN = 4'd11;
      default: fsm_state_mkFSMstate$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign fsm_state_mkFSMstate$EN =
	     WILL_FIRE_RL_fsm_idle_l234c22 ||
	     WILL_FIRE_RL_fsm_action_l235c19 ||
	     fsm_state_mkFSMstate == 4'd1 ||
	     fsm_state_mkFSMstate == 4'd2 ||
	     WILL_FIRE_RL_fsm_action_l238c17 ||
	     fsm_state_mkFSMstate == 4'd4 ||
	     WILL_FIRE_RL_fsm_actionpar_start_l239c7 ||
	     WILL_FIRE_RL_fsm_actionpar_run_l239c7 ||
	     WILL_FIRE_RL_fsm_action_l265c14 ||
	     fsm_state_mkFSMstate == 4'd9 ||
	     fsm_state_mkFSMstate == 4'd10 ;

  // register header_idx
  assign header_idx$D_IN =
	     (fsm_state_mkFSMstate == 4'd4) ?
	       MUX_header_idx$write_1__VAL_1 :
	       5'd0 ;
  assign header_idx$EN =
	     fsm_state_mkFSMstate == 4'd4 || fsm_state_mkFSMstate == 4'd2 ;

  // register inout_cnt
  assign inout_cnt$D_IN =
	     { _0_CONCAT_IF_init_xtile_EQ_0_358_THEN_1_ELSE_in_ETC___d2364[20:0],
	       3'd0 } ;
  assign inout_cnt$EN = EN_init ;

  // register input_idx
  assign input_idx$D_IN =
	     WILL_FIRE_RL_fsm_action_l241c23 ?
	       inout_cnt :
	       MUX_input_idx$write_1__VAL_2 ;
  assign input_idx$EN =
	     WILL_FIRE_RL_fsm_action_l241c23 ||
	     WILL_FIRE_RL_fsm_action_l242c34 ;

  // register j_data_self_reg
  assign j_data_self_reg$D_IN =
	     j_data_self_reg_1$whas ?
	       j_data_self_reg_1$wget :
	       129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign j_data_self_reg$EN = 1'd1 ;

  // register linebuf_maxi
  assign linebuf_maxi$D_IN = 3'd7 ;
  assign linebuf_maxi$EN = EN_init ;

  // register linebuf_maxj
  assign linebuf_maxj$D_IN =
	     IF_init_xtile_EQ_0_358_THEN_1_ELSE_init_xtile___d2359 - 9'd1 ;
  assign linebuf_maxj$EN = EN_init ;

  // register linebuf_ram_serverAdapterA_cnt
  assign linebuf_ram_serverAdapterA_cnt$D_IN =
	     linebuf_ram_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign linebuf_ram_serverAdapterA_cnt$EN = 1'b0 ;

  // register linebuf_ram_serverAdapterA_s1
  assign linebuf_ram_serverAdapterA_s1$D_IN =
	     WILL_FIRE_RL_fsm_action_l242c34 ? 2'd2 : 2'd0 ;
  assign linebuf_ram_serverAdapterA_s1$EN = 1'd1 ;

  // register linebuf_ram_serverAdapterB_cnt
  assign linebuf_ram_serverAdapterB_cnt$D_IN =
	     linebuf_ram_serverAdapterB_cnt_8_PLUS_IF_lineb_ETC___d84 ;
  assign linebuf_ram_serverAdapterB_cnt$EN =
	     WILL_FIRE_RL_linebuf_ram_serverAdapterB_stageReadResponseAlways ||
	     linebuf_ram_serverAdapterB_outData_deqCalled$whas ;

  // register linebuf_ram_serverAdapterB_s1
  assign linebuf_ram_serverAdapterB_s1$D_IN =
	     WILL_FIRE_RL_linebuf_ram_serverAdapterB_stageReadResponseAlways ?
	       2'd3 :
	       2'd0 ;
  assign linebuf_ram_serverAdapterB_s1$EN = 1'd1 ;

  // register linebuf_rblock
  assign linebuf_rblock$D_IN = linebuf_rblock + 2'd1 ;
  assign linebuf_rblock$EN =
	     WILL_FIRE_RL_linebuf_ram_serverAdapterB_stageReadResponseAlways &&
	     !linebuf_rj_25_ULT_linebuf_maxj_24___d130 &&
	     !linebuf_ri_20_ULT_linebuf_maxi_19___d133 ;

  // register linebuf_reversei
  assign linebuf_reversei$D_IN = 1'd0 ;
  assign linebuf_reversei$EN = EN_init ;

  // register linebuf_reversej
  assign linebuf_reversej$D_IN = 1'd0 ;
  assign linebuf_reversej$EN = EN_init ;

  // register linebuf_ri
  assign linebuf_ri$D_IN =
	     linebuf_ri_20_ULT_linebuf_maxi_19___d133 ?
	       linebuf_ri + 3'd1 :
	       3'd0 ;
  assign linebuf_ri$EN =
	     WILL_FIRE_RL_linebuf_ram_serverAdapterB_stageReadResponseAlways &&
	     (linebuf_transposeij ||
	      !linebuf_rj_25_ULT_linebuf_maxj_24___d130) ;

  // register linebuf_rj
  assign linebuf_rj$D_IN =
	     linebuf_rj_25_ULT_linebuf_maxj_24___d130 ?
	       linebuf_rj + 9'd1 :
	       9'd0 ;
  assign linebuf_rj$EN =
	     WILL_FIRE_RL_linebuf_ram_serverAdapterB_stageReadResponseAlways &&
	     (!linebuf_ri_20_ULT_linebuf_maxi_19___d133 ||
	      !linebuf_transposeij) ;

  // register linebuf_transposeij
  assign linebuf_transposeij$D_IN = 1'd1 ;
  assign linebuf_transposeij$EN = EN_init ;

  // register linebuf_wblock
  assign linebuf_wblock$D_IN = linebuf_wblock + 2'd1 ;
  assign linebuf_wblock$EN =
	     WILL_FIRE_RL_fsm_action_l242c34 && linebuf_wj >= linebuf_maxj &&
	     !linebuf_wi_296_ULT_linebuf_maxi_19___d2303 ;

  // register linebuf_wi
  assign linebuf_wi$D_IN =
	     MUX_linebuf_wi$write_1__SEL_1 ?
	       MUX_linebuf_wi$write_1__VAL_1 :
	       3'd0 ;
  assign linebuf_wi$EN =
	     WILL_FIRE_RL_fsm_action_l242c34 &&
	     linebuf_wj_297_EQ_linebuf_maxj_24___d2300 ||
	     EN_init ;

  // register linebuf_wj
  assign linebuf_wj$D_IN =
	     WILL_FIRE_RL_fsm_action_l242c34 ?
	       MUX_linebuf_wj$write_1__VAL_1 :
	       9'd0 ;
  assign linebuf_wj$EN = WILL_FIRE_RL_fsm_action_l242c34 || EN_init ;

  // register lm_bits_self_reg
  assign lm_bits_self_reg$D_IN =
	     pm_en ?
	       lm_bits_self_reg_1$wget :
	       121'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign lm_bits_self_reg$EN = 1'd1 ;

  // register lm_len
  assign lm_len$D_IN =
	     _0_CONCAT_pm_len_0_044_045_PLUS_0_CONCAT_pm_len_ETC___d2063 +
	     { 4'd0, pm_len_7 } ;
  assign lm_len$EN = pm_en ;

  // register norm_pixels_0_self_reg
  assign norm_pixels_0_self_reg$D_IN =
	     linebuf_ram_serverAdapterB_outData_deqCalled$whas ?
	       norm_pixels_0_self_reg_1$wget :
	       9'd170 ;
  assign norm_pixels_0_self_reg$EN = 1'd1 ;

  // register norm_pixels_1_self_reg
  assign norm_pixels_1_self_reg$D_IN =
	     linebuf_ram_serverAdapterB_outData_deqCalled$whas ?
	       norm_pixels_1_self_reg_1$wget :
	       9'd170 ;
  assign norm_pixels_1_self_reg$EN = 1'd1 ;

  // register norm_pixels_2_self_reg
  assign norm_pixels_2_self_reg$D_IN =
	     linebuf_ram_serverAdapterB_outData_deqCalled$whas ?
	       norm_pixels_2_self_reg_1$wget :
	       9'd170 ;
  assign norm_pixels_2_self_reg$EN = 1'd1 ;

  // register norm_pixels_3_self_reg
  assign norm_pixels_3_self_reg$D_IN =
	     linebuf_ram_serverAdapterB_outData_deqCalled$whas ?
	       norm_pixels_3_self_reg_1$wget :
	       9'd170 ;
  assign norm_pixels_3_self_reg$EN = 1'd1 ;

  // register norm_pixels_4_self_reg
  assign norm_pixels_4_self_reg$D_IN =
	     linebuf_ram_serverAdapterB_outData_deqCalled$whas ?
	       norm_pixels_4_self_reg_1$wget :
	       9'd170 ;
  assign norm_pixels_4_self_reg$EN = 1'd1 ;

  // register norm_pixels_5_self_reg
  assign norm_pixels_5_self_reg$D_IN =
	     linebuf_ram_serverAdapterB_outData_deqCalled$whas ?
	       norm_pixels_5_self_reg_1$wget :
	       9'd170 ;
  assign norm_pixels_5_self_reg$EN = 1'd1 ;

  // register norm_pixels_6_self_reg
  assign norm_pixels_6_self_reg$D_IN =
	     linebuf_ram_serverAdapterB_outData_deqCalled$whas ?
	       norm_pixels_6_self_reg_1$wget :
	       9'd170 ;
  assign norm_pixels_6_self_reg$EN = 1'd1 ;

  // register norm_pixels_7_self_reg
  assign norm_pixels_7_self_reg$D_IN =
	     linebuf_ram_serverAdapterB_outData_deqCalled$whas ?
	       norm_pixels_7_self_reg_1$wget :
	       9'd170 ;
  assign norm_pixels_7_self_reg$EN = 1'd1 ;

  // register output_idx
  assign output_idx$D_IN =
	     WILL_FIRE_RL_fsm_action_l249c24 ?
	       inout_cnt :
	       MUX_output_idx$write_1__VAL_2 ;
  assign output_idx$EN =
	     WILL_FIRE_RL_fsm_action_l249c24 ||
	     WILL_FIRE_RL_fsm_action_l250c35 ;

  // register pm_bits_0
  assign pm_bits_0$D_IN = pm_len_0_1$whas ? x__h27294 : 14'd0 ;
  assign pm_bits_0$EN = 1'd1 ;

  // register pm_bits_1
  assign pm_bits_1$D_IN = pm_len_1_1$whas ? x__h27445 : 14'd0 ;
  assign pm_bits_1$EN = 1'd1 ;

  // register pm_bits_2
  assign pm_bits_2$D_IN = pm_len_2_1$whas ? x__h27596 : 14'd0 ;
  assign pm_bits_2$EN = 1'd1 ;

  // register pm_bits_3
  assign pm_bits_3$D_IN = pm_len_3_1$whas ? x__h27747 : 14'd0 ;
  assign pm_bits_3$EN = 1'd1 ;

  // register pm_bits_4
  assign pm_bits_4$D_IN = pm_len_4_1$whas ? x__h27898 : 14'd0 ;
  assign pm_bits_4$EN = 1'd1 ;

  // register pm_bits_5
  assign pm_bits_5$D_IN = pm_len_5_1$whas ? x__h28049 : 14'd0 ;
  assign pm_bits_5$EN = 1'd1 ;

  // register pm_bits_6
  assign pm_bits_6$D_IN = pm_len_6_1$whas ? x__h28200 : 14'd0 ;
  assign pm_bits_6$EN = 1'd1 ;

  // register pm_bits_7
  assign pm_bits_7$D_IN = pm_len_7_1$whas ? x__h28351 : 14'd0 ;
  assign pm_bits_7$EN = 1'd1 ;

  // register pm_en
  assign pm_en$D_IN = WILL_FIRE_RL_pixel_wise_bit_merge ;
  assign pm_en$EN = 1'd1 ;

  // register pm_len_0
  assign pm_len_0$D_IN = pm_len_0_1$whas ? b__h25442 : 4'd0 ;
  assign pm_len_0$EN = 1'd1 ;

  // register pm_len_1
  assign pm_len_1$D_IN = pm_len_1_1$whas ? b__h25642 : 4'd0 ;
  assign pm_len_1$EN = 1'd1 ;

  // register pm_len_2
  assign pm_len_2$D_IN = pm_len_2_1$whas ? b__h25842 : 4'd0 ;
  assign pm_len_2$EN = 1'd1 ;

  // register pm_len_3
  assign pm_len_3$D_IN = pm_len_3_1$whas ? b__h26042 : 4'd0 ;
  assign pm_len_3$EN = 1'd1 ;

  // register pm_len_4
  assign pm_len_4$D_IN = pm_len_4_1$whas ? b__h26242 : 4'd0 ;
  assign pm_len_4$EN = 1'd1 ;

  // register pm_len_5
  assign pm_len_5$D_IN = pm_len_5_1$whas ? b__h26442 : 4'd0 ;
  assign pm_len_5$EN = 1'd1 ;

  // register pm_len_6
  assign pm_len_6$D_IN = pm_len_6_1$whas ? b__h26642 : 4'd0 ;
  assign pm_len_6$EN = 1'd1 ;

  // register pm_len_7
  assign pm_len_7$D_IN = pm_len_7_1$whas ? b__h26842 : 4'd0 ;
  assign pm_len_7$EN = 1'd1 ;

  // register qnt_pixels
  assign qnt_pixels$D_IN =
	     { IF_zig_pixels_7_507_BITS_8_TO_1_508_SRA_0_CONC_ETC___d1569,
	       ((zig_pixels_1_570_BITS_8_TO_1_571_SRA_0_CONCAT__ETC___d1575 ^
		 8'h80) <=
		8'd191) ?
		 (((zig_pixels_1_570_BITS_8_TO_1_571_SRA_0_CONCAT__ETC___d1575 ^
		    8'h80) <
		   8'd65) ?
		    8'd193 :
		    zig_pixels_1_570_BITS_8_TO_1_571_SRA_0_CONCAT__ETC___d1575) :
		 8'd63,
	       (IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492 ==
		3'd0) ?
		 IF_zig_pixels_0_494_BITS_8_TO_1_495_SRA_IF_IF__ETC___d1506 -
		 qnt_prev_dc :
		 IF_zig_pixels_0_494_BITS_8_TO_1_495_SRA_IF_IF__ETC___d1506 } ;
  assign qnt_pixels$EN = zig_sy_self_reg[3] ;

  // register qnt_prev_dc
  assign qnt_prev_dc$D_IN =
	     MUX_qnt_prev_dc$write_1__SEL_1 ?
	       IF_zig_pixels_0_494_BITS_8_TO_1_495_SRA_IF_IF__ETC___d1506 :
	       8'd0 ;
  assign qnt_prev_dc$EN =
	     zig_sy_self_reg[3] &&
	     IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492 ==
	     3'd0 ||
	     EN_init ;

  // register qnt_sy_self_reg
  assign qnt_sy_self_reg$D_IN =
	     zig_sy_self_reg[3] ? qnt_sy_self_reg_1$wget : 4'd2 ;
  assign qnt_sy_self_reg$EN = 1'd1 ;

  // register st_rem_bits
  assign st_rem_bits$D_IN =
	     WILL_FIRE_RL_fsm_action_l250c35 ?
	       IF_st_rem_len_243_PLUS_lm_len_244_245_ULT_128__ETC__q188[247:120] :
	       128'd0 ;
  assign st_rem_bits$EN =
	     WILL_FIRE_RL_fsm_action_l250c35 || fsm_state_mkFSMstate == 4'd1 ;

  // register st_rem_len
  assign st_rem_len$D_IN =
	     WILL_FIRE_RL_fsm_action_l250c35 ?
	       MUX_st_rem_len$write_1__VAL_1 :
	       8'd0 ;
  assign st_rem_len$EN =
	     WILL_FIRE_RL_fsm_action_l250c35 ||
	     WILL_FIRE_RL_fsm_action_l235c19 ;

  // register x_y_bytes
  assign x_y_bytes$D_IN =
	     { 4'h0,
	       IF_init_ytile_EQ_0_356_THEN_1_ELSE_init_ytile___d2357,
	       7'd0,
	       IF_init_xtile_EQ_0_358_THEN_1_ELSE_init_xtile___d2359,
	       3'h0 } ;
  assign x_y_bytes$EN = EN_init ;

  // register zig_pixels_0
  always@(x__h79394 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1048 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1072 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1096 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1120 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1144 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1168 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1192 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1216)
  begin
    case (x__h79394)
      3'd0:
	  zig_pixels_0$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1048;
      3'd1:
	  zig_pixels_0$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1072;
      3'd2:
	  zig_pixels_0$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1096;
      3'd3:
	  zig_pixels_0$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1120;
      3'd4:
	  zig_pixels_0$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1144;
      3'd5:
	  zig_pixels_0$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1168;
      3'd6:
	  zig_pixels_0$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1192;
      3'd7:
	  zig_pixels_0$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1216;
    endcase
  end
  assign zig_pixels_0$EN = !dctb_double_buffer_empty$wget ;

  // register zig_pixels_1
  always@(x__h86347 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1226 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1230 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1234 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1238 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1242 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1246 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1250 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1254)
  begin
    case (x__h86347)
      3'd0:
	  zig_pixels_1$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1226;
      3'd1:
	  zig_pixels_1$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1230;
      3'd2:
	  zig_pixels_1$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1234;
      3'd3:
	  zig_pixels_1$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1238;
      3'd4:
	  zig_pixels_1$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1242;
      3'd5:
	  zig_pixels_1$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1246;
      3'd6:
	  zig_pixels_1$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1250;
      3'd7:
	  zig_pixels_1$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1254;
    endcase
  end
  assign zig_pixels_1$EN = !dctb_double_buffer_empty$wget ;

  // register zig_pixels_2
  always@(x__h87073 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1264 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1268 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1272 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1276 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1280 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1284 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1288 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1292)
  begin
    case (x__h87073)
      3'd0:
	  zig_pixels_2$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1264;
      3'd1:
	  zig_pixels_2$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1268;
      3'd2:
	  zig_pixels_2$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1272;
      3'd3:
	  zig_pixels_2$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1276;
      3'd4:
	  zig_pixels_2$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1280;
      3'd5:
	  zig_pixels_2$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1284;
      3'd6:
	  zig_pixels_2$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1288;
      3'd7:
	  zig_pixels_2$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1292;
    endcase
  end
  assign zig_pixels_2$EN = !dctb_double_buffer_empty$wget ;

  // register zig_pixels_3
  always@(x__h87799 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1302 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1306 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1310 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1314 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1318 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1322 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1326 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1330)
  begin
    case (x__h87799)
      3'd0:
	  zig_pixels_3$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1302;
      3'd1:
	  zig_pixels_3$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1306;
      3'd2:
	  zig_pixels_3$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1310;
      3'd3:
	  zig_pixels_3$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1314;
      3'd4:
	  zig_pixels_3$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1318;
      3'd5:
	  zig_pixels_3$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1322;
      3'd6:
	  zig_pixels_3$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1326;
      3'd7:
	  zig_pixels_3$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1330;
    endcase
  end
  assign zig_pixels_3$EN = !dctb_double_buffer_empty$wget ;

  // register zig_pixels_4
  always@(x__h88525 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1340 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1344 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1348 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1352 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1356 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1360 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1364 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1368)
  begin
    case (x__h88525)
      3'd0:
	  zig_pixels_4$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1340;
      3'd1:
	  zig_pixels_4$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1344;
      3'd2:
	  zig_pixels_4$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1348;
      3'd3:
	  zig_pixels_4$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1352;
      3'd4:
	  zig_pixels_4$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1356;
      3'd5:
	  zig_pixels_4$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1360;
      3'd6:
	  zig_pixels_4$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1364;
      3'd7:
	  zig_pixels_4$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1368;
    endcase
  end
  assign zig_pixels_4$EN = !dctb_double_buffer_empty$wget ;

  // register zig_pixels_5
  always@(x__h89251 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1378 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1382 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1386 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1390 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1394 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1398 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1402 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1406)
  begin
    case (x__h89251)
      3'd0:
	  zig_pixels_5$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1378;
      3'd1:
	  zig_pixels_5$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1382;
      3'd2:
	  zig_pixels_5$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1386;
      3'd3:
	  zig_pixels_5$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1390;
      3'd4:
	  zig_pixels_5$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1394;
      3'd5:
	  zig_pixels_5$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1398;
      3'd6:
	  zig_pixels_5$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1402;
      3'd7:
	  zig_pixels_5$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1406;
    endcase
  end
  assign zig_pixels_5$EN = !dctb_double_buffer_empty$wget ;

  // register zig_pixels_6
  always@(x__h89977 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1416 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1420 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1424 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1428 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1432 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1436 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1440 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1444)
  begin
    case (x__h89977)
      3'd0:
	  zig_pixels_6$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1416;
      3'd1:
	  zig_pixels_6$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1420;
      3'd2:
	  zig_pixels_6$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1424;
      3'd3:
	  zig_pixels_6$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1428;
      3'd4:
	  zig_pixels_6$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1432;
      3'd5:
	  zig_pixels_6$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1436;
      3'd6:
	  zig_pixels_6$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1440;
      3'd7:
	  zig_pixels_6$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1444;
    endcase
  end
  assign zig_pixels_6$EN = !dctb_double_buffer_empty$wget ;

  // register zig_pixels_7
  always@(x__h90703 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1454 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1458 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1462 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1466 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1470 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1474 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1478 or
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1482)
  begin
    case (x__h90703)
      3'd0:
	  zig_pixels_7$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1454;
      3'd1:
	  zig_pixels_7$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1458;
      3'd2:
	  zig_pixels_7$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1462;
      3'd3:
	  zig_pixels_7$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1466;
      3'd4:
	  zig_pixels_7$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1470;
      3'd5:
	  zig_pixels_7$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1474;
      3'd6:
	  zig_pixels_7$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1478;
      3'd7:
	  zig_pixels_7$D_IN =
	      SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1482;
    endcase
  end
  assign zig_pixels_7$EN = !dctb_double_buffer_empty$wget ;

  // register zig_sy_self_reg
  assign zig_sy_self_reg$D_IN =
	     (!dctb_double_buffer_empty$wget) ?
	       zig_sy_self_reg_1$wget :
	       4'd2 ;
  assign zig_sy_self_reg$EN = 1'd1 ;

  // submodule linebuf_ram_memory
  assign linebuf_ram_memory$ADDRA =
	     { linebuf_wblock[0], linebuf_wi, linebuf_wj } ;
  assign linebuf_ram_memory$ADDRB =
	     { linebuf_rblock[0],
	       linebuf_reversei ? linebuf_maxi - linebuf_ri : linebuf_ri,
	       linebuf_reversej ? linebuf_maxj - linebuf_rj : linebuf_rj } ;
  assign linebuf_ram_memory$DIA = put_pixels ;
  assign linebuf_ram_memory$DIB = 64'd0 ;
  assign linebuf_ram_memory$WEA = 1'd1 ;
  assign linebuf_ram_memory$WEB = 1'd0 ;
  assign linebuf_ram_memory$ENA = WILL_FIRE_RL_fsm_action_l242c34 ;
  assign linebuf_ram_memory$ENB =
	     WILL_FIRE_RL_linebuf_ram_serverAdapterB_stageReadResponseAlways ;

  // submodule linebuf_ram_serverAdapterA_outDataCore
  assign linebuf_ram_serverAdapterA_outDataCore$D_IN =
	     linebuf_ram_memory$DOA ;
  assign linebuf_ram_serverAdapterA_outDataCore$ENQ =
	     linebuf_ram_serverAdapterA_outDataCore$FULL_N &&
	     linebuf_ram_serverAdapterA_outData_enqData$whas ;
  assign linebuf_ram_serverAdapterA_outDataCore$DEQ = 1'b0 ;
  assign linebuf_ram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule linebuf_ram_serverAdapterB_outDataCore
  assign linebuf_ram_serverAdapterB_outDataCore$D_IN =
	     linebuf_ram_memory$DOB ;
  assign linebuf_ram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_linebuf_ram_serverAdapterB_outData_enqAndDeq ||
	     linebuf_ram_serverAdapterB_outDataCore$FULL_N &&
	     !linebuf_ram_serverAdapterB_outData_deqCalled$whas &&
	     linebuf_ram_serverAdapterB_outData_enqData$whas ;
  assign linebuf_ram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_linebuf_ram_serverAdapterB_outData_enqAndDeq ||
	     linebuf_ram_serverAdapterB_outDataCore$EMPTY_N &&
	     linebuf_ram_serverAdapterB_outData_deqCalled$whas &&
	     !linebuf_ram_serverAdapterB_outData_enqData$whas ;
  assign linebuf_ram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_68_ETC___d1698 =
	     IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[6] ?
	       3'd1 :
	       3'd0 ;
  assign IF_IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_68_ETC___d1700 =
	     (IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[5] ||
	      IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[6]) ?
	       IF_IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_68_ETC___d1698 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_68_ETC___d1698 ;
  assign IF_IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_68_ETC___d1702 =
	     (IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[4] ||
	      IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[5] ||
	      IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[6]) ?
	       IF_IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_68_ETC___d1700 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_68_ETC___d1700 ;
  assign IF_IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_68_ETC___d1704 =
	     (IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[3] ||
	      IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[4] ||
	      IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[5] ||
	      IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[6]) ?
	       IF_IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_68_ETC___d1702 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_68_ETC___d1702 ;
  assign IF_IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_68_ETC___d1706 =
	     (IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[2] ||
	      IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[3] ||
	      IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[4] ||
	      IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[5] ||
	      IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[6]) ?
	       IF_IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_68_ETC___d1704 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_68_ETC___d1704 ;
  assign IF_IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_68_ETC___d1708 =
	     (IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[1] ||
	      IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[2] ||
	      IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[3] ||
	      IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[4] ||
	      IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[5] ||
	      IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684[6]) ?
	       IF_IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_68_ETC___d1706 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_68_ETC___d1706 ;
  assign IF_IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_7_ETC___d1737 =
	     IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[6] ?
	       3'd1 :
	       3'd0 ;
  assign IF_IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_7_ETC___d1739 =
	     (IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[5] ||
	      IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[6]) ?
	       IF_IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_7_ETC___d1737 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_7_ETC___d1737 ;
  assign IF_IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_7_ETC___d1741 =
	     (IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[4] ||
	      IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[5] ||
	      IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[6]) ?
	       IF_IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_7_ETC___d1739 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_7_ETC___d1739 ;
  assign IF_IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_7_ETC___d1743 =
	     (IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[3] ||
	      IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[4] ||
	      IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[5] ||
	      IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[6]) ?
	       IF_IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_7_ETC___d1741 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_7_ETC___d1741 ;
  assign IF_IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_7_ETC___d1745 =
	     (IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[2] ||
	      IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[3] ||
	      IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[4] ||
	      IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[5] ||
	      IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[6]) ?
	       IF_IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_7_ETC___d1743 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_7_ETC___d1743 ;
  assign IF_IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_7_ETC___d1747 =
	     (IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[1] ||
	      IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[2] ||
	      IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[3] ||
	      IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[4] ||
	      IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[5] ||
	      IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723[6]) ?
	       IF_IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_7_ETC___d1745 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_7_ETC___d1745 ;
  assign IF_IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_7_ETC___d1776 =
	     IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[6] ?
	       3'd1 :
	       3'd0 ;
  assign IF_IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_7_ETC___d1778 =
	     (IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[5] ||
	      IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[6]) ?
	       IF_IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_7_ETC___d1776 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_7_ETC___d1776 ;
  assign IF_IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_7_ETC___d1780 =
	     (IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[4] ||
	      IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[5] ||
	      IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[6]) ?
	       IF_IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_7_ETC___d1778 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_7_ETC___d1778 ;
  assign IF_IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_7_ETC___d1782 =
	     (IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[3] ||
	      IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[4] ||
	      IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[5] ||
	      IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[6]) ?
	       IF_IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_7_ETC___d1780 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_7_ETC___d1780 ;
  assign IF_IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_7_ETC___d1784 =
	     (IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[2] ||
	      IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[3] ||
	      IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[4] ||
	      IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[5] ||
	      IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[6]) ?
	       IF_IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_7_ETC___d1782 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_7_ETC___d1782 ;
  assign IF_IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_7_ETC___d1786 =
	     (IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[1] ||
	      IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[2] ||
	      IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[3] ||
	      IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[4] ||
	      IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[5] ||
	      IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762[6]) ?
	       IF_IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_7_ETC___d1784 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_7_ETC___d1784 ;
  assign IF_IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_7_ETC___d1815 =
	     IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[6] ?
	       3'd1 :
	       3'd0 ;
  assign IF_IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_7_ETC___d1817 =
	     (IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[5] ||
	      IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[6]) ?
	       IF_IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_7_ETC___d1815 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_7_ETC___d1815 ;
  assign IF_IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_7_ETC___d1819 =
	     (IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[4] ||
	      IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[5] ||
	      IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[6]) ?
	       IF_IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_7_ETC___d1817 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_7_ETC___d1817 ;
  assign IF_IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_7_ETC___d1821 =
	     (IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[3] ||
	      IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[4] ||
	      IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[5] ||
	      IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[6]) ?
	       IF_IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_7_ETC___d1819 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_7_ETC___d1819 ;
  assign IF_IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_7_ETC___d1823 =
	     (IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[2] ||
	      IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[3] ||
	      IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[4] ||
	      IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[5] ||
	      IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[6]) ?
	       IF_IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_7_ETC___d1821 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_7_ETC___d1821 ;
  assign IF_IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_7_ETC___d1825 =
	     (IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[1] ||
	      IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[2] ||
	      IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[3] ||
	      IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[4] ||
	      IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[5] ||
	      IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801[6]) ?
	       IF_IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_7_ETC___d1823 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_7_ETC___d1823 ;
  assign IF_IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_8_ETC___d1854 =
	     IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[6] ?
	       3'd1 :
	       3'd0 ;
  assign IF_IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_8_ETC___d1856 =
	     (IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[5] ||
	      IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[6]) ?
	       IF_IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_8_ETC___d1854 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_8_ETC___d1854 ;
  assign IF_IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_8_ETC___d1858 =
	     (IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[4] ||
	      IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[5] ||
	      IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[6]) ?
	       IF_IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_8_ETC___d1856 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_8_ETC___d1856 ;
  assign IF_IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_8_ETC___d1860 =
	     (IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[3] ||
	      IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[4] ||
	      IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[5] ||
	      IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[6]) ?
	       IF_IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_8_ETC___d1858 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_8_ETC___d1858 ;
  assign IF_IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_8_ETC___d1862 =
	     (IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[2] ||
	      IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[3] ||
	      IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[4] ||
	      IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[5] ||
	      IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[6]) ?
	       IF_IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_8_ETC___d1860 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_8_ETC___d1860 ;
  assign IF_IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_8_ETC___d1864 =
	     (IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[1] ||
	      IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[2] ||
	      IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[3] ||
	      IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[4] ||
	      IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[5] ||
	      IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840[6]) ?
	       IF_IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_8_ETC___d1862 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_8_ETC___d1862 ;
  assign IF_IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_8_ETC___d1893 =
	     IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[6] ?
	       3'd1 :
	       3'd0 ;
  assign IF_IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_8_ETC___d1895 =
	     (IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[5] ||
	      IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[6]) ?
	       IF_IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_8_ETC___d1893 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_8_ETC___d1893 ;
  assign IF_IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_8_ETC___d1897 =
	     (IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[4] ||
	      IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[5] ||
	      IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[6]) ?
	       IF_IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_8_ETC___d1895 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_8_ETC___d1895 ;
  assign IF_IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_8_ETC___d1899 =
	     (IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[3] ||
	      IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[4] ||
	      IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[5] ||
	      IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[6]) ?
	       IF_IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_8_ETC___d1897 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_8_ETC___d1897 ;
  assign IF_IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_8_ETC___d1901 =
	     (IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[2] ||
	      IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[3] ||
	      IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[4] ||
	      IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[5] ||
	      IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[6]) ?
	       IF_IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_8_ETC___d1899 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_8_ETC___d1899 ;
  assign IF_IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_8_ETC___d1903 =
	     (IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[1] ||
	      IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[2] ||
	      IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[3] ||
	      IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[4] ||
	      IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[5] ||
	      IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879[6]) ?
	       IF_IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_8_ETC___d1901 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_8_ETC___d1901 ;
  assign IF_IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_9_ETC___d1932 =
	     IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[6] ?
	       3'd1 :
	       3'd0 ;
  assign IF_IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_9_ETC___d1934 =
	     (IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[5] ||
	      IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[6]) ?
	       IF_IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_9_ETC___d1932 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_9_ETC___d1932 ;
  assign IF_IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_9_ETC___d1936 =
	     (IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[4] ||
	      IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[5] ||
	      IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[6]) ?
	       IF_IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_9_ETC___d1934 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_9_ETC___d1934 ;
  assign IF_IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_9_ETC___d1938 =
	     (IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[3] ||
	      IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[4] ||
	      IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[5] ||
	      IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[6]) ?
	       IF_IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_9_ETC___d1936 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_9_ETC___d1936 ;
  assign IF_IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_9_ETC___d1940 =
	     (IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[2] ||
	      IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[3] ||
	      IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[4] ||
	      IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[5] ||
	      IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[6]) ?
	       IF_IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_9_ETC___d1938 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_9_ETC___d1938 ;
  assign IF_IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_9_ETC___d1942 =
	     (IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[1] ||
	      IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[2] ||
	      IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[3] ||
	      IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[4] ||
	      IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[5] ||
	      IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918[6]) ?
	       IF_IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_9_ETC___d1940 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_9_ETC___d1940 ;
  assign IF_IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_ETC___d1659 =
	     IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[6] ?
	       3'd1 :
	       3'd0 ;
  assign IF_IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_ETC___d1661 =
	     (IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[5] ||
	      IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[6]) ?
	       IF_IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_ETC___d1659 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_ETC___d1659 ;
  assign IF_IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_ETC___d1663 =
	     (IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[4] ||
	      IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[5] ||
	      IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[6]) ?
	       IF_IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_ETC___d1661 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_ETC___d1661 ;
  assign IF_IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_ETC___d1665 =
	     (IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[3] ||
	      IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[4] ||
	      IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[5] ||
	      IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[6]) ?
	       IF_IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_ETC___d1663 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_ETC___d1663 ;
  assign IF_IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_ETC___d1667 =
	     (IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[2] ||
	      IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[3] ||
	      IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[4] ||
	      IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[5] ||
	      IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[6]) ?
	       IF_IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_ETC___d1665 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_ETC___d1665 ;
  assign IF_IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_ETC___d1669 =
	     (IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[1] ||
	      IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[2] ||
	      IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[3] ||
	      IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[4] ||
	      IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[5] ||
	      IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645[6]) ?
	       IF_IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_ETC___d1667 +
	       3'd1 :
	       IF_IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_ETC___d1667 ;
  assign IF_IF_qnt_sy_self_reg_585_BIT_3_586_THEN_qnt_s_ETC___d1617 =
	     ((IF_qnt_sy_self_reg_585_BIT_3_586_THEN_qnt_sy_s_ETC___d1588 ==
	       3'd0 ||
	       qnt_pixels[7:0] != 8'd0) ?
		4'd0 :
		c_prev_zcnt_612_PLUS_IF_IF_qnt_sy_self_reg_585_ETC___d1614) +
	     ((qnt_pixels[15:8] == 8'd0) ? 4'd1 : 4'd0) ;
  assign IF_init_xtile_EQ_0_358_THEN_1_ELSE_init_xtile___d2359 =
	     (init_xtile == 9'd0) ? 9'd1 : init_xtile ;
  assign IF_init_ytile_EQ_0_356_THEN_1_ELSE_init_ytile___d2357 =
	     (init_ytile == 9'd0) ? 9'd1 : init_ytile ;
  assign IF_norm_pixels_0_self_reg_BIT_8_THEN_norm_pixe_ETC__q2 =
	     norm_pixels_0_self_reg[8] ? norm_pixels_0_self_reg[7:0] : 8'd0 ;
  assign IF_norm_pixels_1_self_reg_BIT_8_THEN_norm_pixe_ETC__q1 =
	     norm_pixels_1_self_reg[8] ? norm_pixels_1_self_reg[7:0] : 8'd0 ;
  assign IF_norm_pixels_2_self_reg_BIT_8_THEN_norm_pixe_ETC__q3 =
	     norm_pixels_2_self_reg[8] ? norm_pixels_2_self_reg[7:0] : 8'd0 ;
  assign IF_norm_pixels_3_self_reg_BIT_8_THEN_norm_pixe_ETC__q4 =
	     norm_pixels_3_self_reg[8] ? norm_pixels_3_self_reg[7:0] : 8'd0 ;
  assign IF_norm_pixels_4_self_reg_BIT_8_THEN_norm_pixe_ETC__q5 =
	     norm_pixels_4_self_reg[8] ? norm_pixels_4_self_reg[7:0] : 8'd0 ;
  assign IF_norm_pixels_5_self_reg_BIT_8_THEN_norm_pixe_ETC__q6 =
	     norm_pixels_5_self_reg[8] ? norm_pixels_5_self_reg[7:0] : 8'd0 ;
  assign IF_norm_pixels_6_self_reg_BIT_8_THEN_norm_pixe_ETC__q7 =
	     norm_pixels_6_self_reg[8] ? norm_pixels_6_self_reg[7:0] : 8'd0 ;
  assign IF_norm_pixels_7_self_reg_BIT_8_THEN_norm_pixe_ETC__q8 =
	     norm_pixels_7_self_reg[8] ? norm_pixels_7_self_reg[7:0] : 8'd0 ;
  assign IF_qnt_pixels_590_BITS_15_TO_8_605_EQ_0_606_TH_ETC___d1620 =
	     ((qnt_pixels[15:8] == 8'd0) ?
		IF_IF_qnt_sy_self_reg_585_BIT_3_586_THEN_qnt_s_ETC___d1617 :
		4'd0) +
	     ((qnt_pixels[23:16] == 8'd0) ? 4'd1 : 4'd0) ;
  assign IF_qnt_pixels_590_BITS_15_TO_8_605_SLE_0_680_T_ETC___d1684 =
	     ((qnt_pixels[15:8] ^ 8'h80) <= 8'd128) ?
	       NEG_qnt_pixels_BITS_15_TO_8__q162[6:0] :
	       qnt_pixels[14:8] ;
  assign IF_qnt_pixels_590_BITS_23_TO_16_603_EQ_0_604_T_ETC___d1623 =
	     ((qnt_pixels[23:16] == 8'd0) ?
		IF_qnt_pixels_590_BITS_15_TO_8_605_EQ_0_606_TH_ETC___d1620 :
		4'd0) +
	     ((qnt_pixels[31:24] == 8'd0) ? 4'd1 : 4'd0) ;
  assign IF_qnt_pixels_590_BITS_23_TO_16_603_SLE_0_719__ETC___d1723 =
	     ((qnt_pixels[23:16] ^ 8'h80) <= 8'd128) ?
	       NEG_qnt_pixels_BITS_23_TO_16__q163[6:0] :
	       qnt_pixels[22:16] ;
  assign IF_qnt_pixels_590_BITS_31_TO_24_601_EQ_0_602_T_ETC___d1626 =
	     ((qnt_pixels[31:24] == 8'd0) ?
		IF_qnt_pixels_590_BITS_23_TO_16_603_EQ_0_604_T_ETC___d1623 :
		4'd0) +
	     ((qnt_pixels[39:32] == 8'd0) ? 4'd1 : 4'd0) ;
  assign IF_qnt_pixels_590_BITS_31_TO_24_601_SLE_0_758__ETC___d1762 =
	     ((qnt_pixels[31:24] ^ 8'h80) <= 8'd128) ?
	       NEG_qnt_pixels_BITS_31_TO_24__q164[6:0] :
	       qnt_pixels[30:24] ;
  assign IF_qnt_pixels_590_BITS_39_TO_32_599_EQ_0_600_T_ETC___d1629 =
	     ((qnt_pixels[39:32] == 8'd0) ?
		IF_qnt_pixels_590_BITS_31_TO_24_601_EQ_0_602_T_ETC___d1626 :
		4'd0) +
	     ((qnt_pixels[47:40] == 8'd0) ? 4'd1 : 4'd0) ;
  assign IF_qnt_pixels_590_BITS_39_TO_32_599_SLE_0_797__ETC___d1801 =
	     ((qnt_pixels[39:32] ^ 8'h80) <= 8'd128) ?
	       NEG_qnt_pixels_BITS_39_TO_32__q165[6:0] :
	       qnt_pixels[38:32] ;
  assign IF_qnt_pixels_590_BITS_47_TO_40_597_EQ_0_598_T_ETC___d1632 =
	     ((qnt_pixels[47:40] == 8'd0) ?
		IF_qnt_pixels_590_BITS_39_TO_32_599_EQ_0_600_T_ETC___d1629 :
		4'd0) +
	     ((qnt_pixels[55:48] == 8'd0) ? 4'd1 : 4'd0) ;
  assign IF_qnt_pixels_590_BITS_47_TO_40_597_SLE_0_836__ETC___d1840 =
	     ((qnt_pixels[47:40] ^ 8'h80) <= 8'd128) ?
	       NEG_qnt_pixels_BITS_47_TO_40__q166[6:0] :
	       qnt_pixels[46:40] ;
  assign IF_qnt_pixels_590_BITS_55_TO_48_595_EQ_0_596_T_ETC___d1635 =
	     ((qnt_pixels[55:48] == 8'd0) ?
		IF_qnt_pixels_590_BITS_47_TO_40_597_EQ_0_598_T_ETC___d1632 :
		4'd0) +
	     ((qnt_pixels[63:56] == 8'd0) ? 4'd1 : 4'd0) ;
  assign IF_qnt_pixels_590_BITS_55_TO_48_595_SLE_0_875__ETC___d1879 =
	     ((qnt_pixels[55:48] ^ 8'h80) <= 8'd128) ?
	       NEG_qnt_pixels_BITS_55_TO_48__q167[6:0] :
	       qnt_pixels[54:48] ;
  assign IF_qnt_pixels_590_BITS_63_TO_56_591_SLE_0_914__ETC___d1918 =
	     ((qnt_pixels[63:56] ^ 8'h80) <= 8'd128) ?
	       NEG_qnt_pixels_BITS_63_TO_56__q168[6:0] :
	       qnt_pixels[62:56] ;
  assign IF_qnt_pixels_590_BITS_7_TO_0_608_SLE_0_641_TH_ETC___d1645 =
	     ((qnt_pixels[7:0] ^ 8'h80) <= 8'd128) ?
	       NEG_qnt_pixels_BITS_7_TO_0__q161[6:0] :
	       qnt_pixels[6:0] ;
  assign IF_qnt_sy_self_reg_585_BIT_3_586_THEN_qnt_sy_s_ETC___d1588 =
	     qnt_sy_self_reg[3] ? qnt_sy_self_reg[2:0] : 3'd0 ;
  assign IF_st_rem_len_243_PLUS_lm_len_244_245_ULT_128__ETC__q188 =
	     st_rem_len_243_PLUS_lm_len_244_245_ULT_128___d2246 ?
	       bits__h158021 :
	       y_avValue_snd__h158202 ;
  assign IF_zig_pixels_0_494_BITS_8_TO_1_495_SRA_IF_IF__ETC___d1506 =
	     ((zig_pixels_0_494_BITS_8_TO_1_495_SRA_IF_IF_zig_ETC___d1502 ^
	       8'h80) <=
	      8'd191) ?
	       (((zig_pixels_0_494_BITS_8_TO_1_495_SRA_IF_IF_zig_ETC___d1502 ^
		  8'h80) <
		 8'd65) ?
		  8'd193 :
		  zig_pixels_0_494_BITS_8_TO_1_495_SRA_IF_IF_zig_ETC___d1502) :
	       8'd63 ;
  assign IF_zig_pixels_7_507_BITS_8_TO_1_508_SRA_0_CONC_ETC___d1548 =
	     { ((zig_pixels_7_507_BITS_8_TO_1_508_SRA_0_CONCAT__ETC___d1512 ^
		 8'h80) <=
		8'd191) ?
		 (((zig_pixels_7_507_BITS_8_TO_1_508_SRA_0_CONCAT__ETC___d1512 ^
		    8'h80) <
		   8'd65) ?
		    8'd193 :
		    zig_pixels_7_507_BITS_8_TO_1_508_SRA_0_CONCAT__ETC___d1512) :
		 8'd63,
	       ((zig_pixels_6_517_BITS_8_TO_1_518_SRA_0_CONCAT__ETC___d1522 ^
		 8'h80) <=
		8'd191) ?
		 (((zig_pixels_6_517_BITS_8_TO_1_518_SRA_0_CONCAT__ETC___d1522 ^
		    8'h80) <
		   8'd65) ?
		    8'd193 :
		    zig_pixels_6_517_BITS_8_TO_1_518_SRA_0_CONCAT__ETC___d1522) :
		 8'd63,
	       ((zig_pixels_5_528_BITS_8_TO_1_529_SRA_0_CONCAT__ETC___d1533 ^
		 8'h80) <=
		8'd191) ?
		 (((zig_pixels_5_528_BITS_8_TO_1_529_SRA_0_CONCAT__ETC___d1533 ^
		    8'h80) <
		   8'd65) ?
		    8'd193 :
		    zig_pixels_5_528_BITS_8_TO_1_529_SRA_0_CONCAT__ETC___d1533) :
		 8'd63,
	       ((zig_pixels_4_538_BITS_8_TO_1_539_SRA_0_CONCAT__ETC___d1543 ^
		 8'h80) <=
		8'd191) ?
		 (((zig_pixels_4_538_BITS_8_TO_1_539_SRA_0_CONCAT__ETC___d1543 ^
		    8'h80) <
		   8'd65) ?
		    8'd193 :
		    zig_pixels_4_538_BITS_8_TO_1_539_SRA_0_CONCAT__ETC___d1543) :
		 8'd63 } ;
  assign IF_zig_pixels_7_507_BITS_8_TO_1_508_SRA_0_CONC_ETC___d1569 =
	     { IF_zig_pixels_7_507_BITS_8_TO_1_508_SRA_0_CONC_ETC___d1548,
	       ((zig_pixels_3_549_BITS_8_TO_1_550_SRA_0_CONCAT__ETC___d1554 ^
		 8'h80) <=
		8'd191) ?
		 (((zig_pixels_3_549_BITS_8_TO_1_550_SRA_0_CONCAT__ETC___d1554 ^
		    8'h80) <
		   8'd65) ?
		    8'd193 :
		    zig_pixels_3_549_BITS_8_TO_1_550_SRA_0_CONCAT__ETC___d1554) :
		 8'd63,
	       ((zig_pixels_2_559_BITS_8_TO_1_560_SRA_0_CONCAT__ETC___d1564 ^
		 8'h80) <=
		8'd191) ?
		 (((zig_pixels_2_559_BITS_8_TO_1_560_SRA_0_CONCAT__ETC___d1564 ^
		    8'h80) <
		   8'd65) ?
		    8'd193 :
		    zig_pixels_2_559_BITS_8_TO_1_560_SRA_0_CONCAT__ETC___d1564) :
		 8'd63 } ;
  assign IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492 =
	     zig_sy_self_reg[3] ? zig_sy_self_reg[2:0] : 3'd0 ;
  assign NEG_qnt_pixels_BITS_15_TO_8__q162 = -qnt_pixels[15:8] ;
  assign NEG_qnt_pixels_BITS_23_TO_16__q163 = -qnt_pixels[23:16] ;
  assign NEG_qnt_pixels_BITS_31_TO_24__q164 = -qnt_pixels[31:24] ;
  assign NEG_qnt_pixels_BITS_39_TO_32__q165 = -qnt_pixels[39:32] ;
  assign NEG_qnt_pixels_BITS_47_TO_40__q166 = -qnt_pixels[47:40] ;
  assign NEG_qnt_pixels_BITS_55_TO_48__q167 = -qnt_pixels[55:48] ;
  assign NEG_qnt_pixels_BITS_63_TO_56__q168 = -qnt_pixels[63:56] ;
  assign NEG_qnt_pixels_BITS_7_TO_0__q161 = -qnt_pixels[7:0] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d623 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d622 *
	     24'd9 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d705 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d623[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d649[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d676[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d703[23:0] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d786 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d705 +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d730[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d757[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d784[23:0] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d816 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d622 *
	     24'd17 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d826 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d816[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d818[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d821[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d824[23:0] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d835 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d826 +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d827[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d830[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d833[23:0] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d841 =
	     { SEXT_SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_ETC__q171[8:0],
	       SEXT_SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_ETC__q174[8:0] } ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d842 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d622 *
	     24'd25 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d852 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d842[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d844[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d847[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d850[23:0] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d861 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d852 +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d853[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d856[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d859[23:0] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d877 =
	     { SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d622[18:0],
	       5'd0 } +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d869[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d872[23:0] +
	     { SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d702[18:0],
	       5'd0 } ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d886 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d877 +
	     { SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d729[18:0],
	       5'd0 } +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d881[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d884[23:0] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d892 =
	     { SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d841,
	       SEXT_SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_ETC__q177[8:0],
	       SEXT_SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_ETC__q180[8:0] } ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d893 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d622 *
	     24'd38 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d903 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d893[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d895[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d898[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d901[23:0] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d912 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d903 +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d904[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d907[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d910[23:0] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d918 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d622 *
	     24'd42 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d928 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d918[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d920[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d923[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d926[23:0] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d937 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d928 +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d929[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d932[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d935[23:0] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d943 =
	     { SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d892,
	       SEXT_SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_ETC__q183[8:0],
	       SEXT_SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_ETC__q186[8:0] } ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d944 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d622 *
	     24'd44 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d954 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d944[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d946[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d949[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d952[23:0] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d963 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d954 +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d955[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d958[23:0] +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d961[23:0] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d975 =
	     { SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d622[18:0],
	       5'd0 } +
	     { SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d648[18:0],
	       5'd0 } +
	     { SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d675[18:0],
	       5'd0 } +
	     { SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d702[18:0],
	       5'd0 } ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d982 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d975 +
	     { SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d729[18:0],
	       5'd0 } +
	     { SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d756[18:0],
	       5'd0 } +
	     { SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d783[18:0],
	       5'd0 } ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q169 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d786 +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d811[23:0] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q170 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q169[23:15] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q172 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d835 +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d836[23:0] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q173 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q172[23:15] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q175 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d861 +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d862[23:0] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q176 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q175[23:15] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q178 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d886 +
	     { SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d810[18:0],
	       5'd0 } ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q179 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q178[23:15] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q181 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d912 +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d913[23:0] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q182 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q181[23:15] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q184 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d937 +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d938[23:0] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q185 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q184[23:15] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q189 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d963 +
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d964[23:0] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q190 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q189[23:15] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q192 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d982 +
	     { SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d810[18:0],
	       5'd0 } ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q193 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q192[23:15] ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d649 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d648 *
	     24'd16777191 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d818 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d648 *
	     24'd16777174 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d844 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d648 *
	     24'd16777172 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d869 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d648 *
	     24'd16777184 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d895 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d648 *
	     24'd16777207 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d920 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d648 *
	     24'd17 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d946 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d648 *
	     24'd38 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d676 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d675 *
	     24'd38 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d821 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d675 *
	     24'd42 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d847 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d675 *
	     24'd9 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d872 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d675 *
	     24'd16777184 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d898 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d675 *
	     24'd16777172 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d923 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d675 *
	     24'd16777199 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d949 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d675 *
	     24'd25 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d703 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d702 *
	     24'd16777172 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d824 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d702 *
	     24'd16777199 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d850 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d702 *
	     24'd38 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d901 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d702 *
	     24'd16777191 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d926 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d702 *
	     24'd16777174 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d952 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d702 *
	     24'd9 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d730 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d729 *
	     24'd44 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d827 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d729 *
	     24'd16777199 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d853 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d729 *
	     24'd16777178 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d904 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d729 *
	     24'd25 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d929 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d729 *
	     24'd16777174 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d955 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d729 *
	     24'd16777207 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d757 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d756 *
	     24'd16777178 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d830 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d756 *
	     24'd42 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d856 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d756 *
	     24'd16777207 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d881 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d756 *
	     24'd16777184 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d907 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d756 *
	     24'd44 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d932 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d756 *
	     24'd16777199 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d958 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d756 *
	     24'd16777191 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d784 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d783 *
	     24'd25 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d833 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d783 *
	     24'd16777174 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d859 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d783 *
	     24'd44 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d884 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d783 *
	     24'd16777184 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d910 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d783 *
	     24'd9 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d935 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d783 *
	     24'd17 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d961 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d783 *
	     24'd16777178 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d811 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d810 *
	     24'd16777207 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d836 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d810 *
	     24'd17 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d862 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d810 *
	     24'd16777191 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d913 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d810 *
	     24'd16777178 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d938 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d810 *
	     24'd42 ;
  assign SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d964 =
	     SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d810 *
	     24'd16777172 ;
  assign SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d348 =
	     { {16{IF_norm_pixels_0_self_reg_BIT_8_THEN_norm_pixe_ETC__q2[7]}},
	       IF_norm_pixels_0_self_reg_BIT_8_THEN_norm_pixe_ETC__q2 } ;
  assign SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d349 =
	     SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d348 *
	     24'd9 ;
  assign SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d368 =
	     SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d349[23:0] +
	     SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d354[23:0] +
	     SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d360[23:0] +
	     SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d366[23:0] ;
  assign SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d386 =
	     SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d368 +
	     SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d372[23:0] +
	     SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d378[23:0] +
	     SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d384[23:0] ;
  assign SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d393 =
	     SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d348 *
	     24'd17 ;
  assign SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d403 =
	     SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d393[23:0] +
	     SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d395[23:0] +
	     SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d398[23:0] +
	     SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d401[23:0] ;
  assign SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d412 =
	     SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d403 +
	     SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d404[23:0] +
	     SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d407[23:0] +
	     SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d410[23:0] ;
  assign SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d417 =
	     SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d348 *
	     24'd25 ;
  assign SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d427 =
	     SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d417[23:0] +
	     SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d419[23:0] +
	     SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d422[23:0] +
	     SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d425[23:0] ;
  assign SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d436 =
	     SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d427 +
	     SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d428[23:0] +
	     SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d431[23:0] +
	     SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d434[23:0] ;
  assign SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d450 =
	     { SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d348[18:0],
	       5'd0 } +
	     SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d442[23:0] +
	     SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d445[23:0] +
	     { SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d365[18:0],
	       5'd0 } ;
  assign SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d459 =
	     SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d450 +
	     { SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d371[18:0],
	       5'd0 } +
	     SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d454[23:0] +
	     SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d457[23:0] ;
  assign SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d463 =
	     { SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d386 +
	       SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d390[23:0],
	       SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d412 +
	       SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d413[23:0],
	       SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d436 +
	       SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d437[23:0],
	       SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d459 +
	       { SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d389[18:0],
		 5'd0 } } ;
  assign SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d464 =
	     SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d348 *
	     24'd38 ;
  assign SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d474 =
	     SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d464[23:0] +
	     SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d466[23:0] +
	     SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d469[23:0] +
	     SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d472[23:0] ;
  assign SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d483 =
	     SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d474 +
	     SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d475[23:0] +
	     SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d478[23:0] +
	     SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d481[23:0] ;
  assign SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d487 =
	     SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d348 *
	     24'd42 ;
  assign SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d497 =
	     SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d487[23:0] +
	     SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d489[23:0] +
	     SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d492[23:0] +
	     SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d495[23:0] ;
  assign SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d506 =
	     SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d497 +
	     SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d498[23:0] +
	     SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d501[23:0] +
	     SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d504[23:0] ;
  assign SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d510 =
	     { SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d463,
	       SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d483 +
	       SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d484[23:0],
	       SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d506 +
	       SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d507[23:0] } ;
  assign SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d511 =
	     SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d348 *
	     24'd44 ;
  assign SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d521 =
	     SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d511[23:0] +
	     SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d513[23:0] +
	     SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d516[23:0] +
	     SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d519[23:0] ;
  assign SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d530 =
	     SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d521 +
	     SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d522[23:0] +
	     SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d525[23:0] +
	     SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d528[23:0] ;
  assign SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d540 =
	     { SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d348[18:0],
	       5'd0 } +
	     { SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d353[18:0],
	       5'd0 } +
	     { SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d359[18:0],
	       5'd0 } +
	     { SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d365[18:0],
	       5'd0 } ;
  assign SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d547 =
	     SEXT_IF_norm_pixels_0_self_reg_17_BIT_8_18_THE_ETC___d540 +
	     { SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d371[18:0],
	       5'd0 } +
	     { SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d377[18:0],
	       5'd0 } +
	     { SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d383[18:0],
	       5'd0 } ;
  assign SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d353 =
	     { {16{IF_norm_pixels_1_self_reg_BIT_8_THEN_norm_pixe_ETC__q1[7]}},
	       IF_norm_pixels_1_self_reg_BIT_8_THEN_norm_pixe_ETC__q1 } ;
  assign SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d354 =
	     SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d353 *
	     24'd16777191 ;
  assign SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d395 =
	     SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d353 *
	     24'd16777174 ;
  assign SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d419 =
	     SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d353 *
	     24'd16777172 ;
  assign SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d442 =
	     SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d353 *
	     24'd16777184 ;
  assign SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d466 =
	     SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d353 *
	     24'd16777207 ;
  assign SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d489 =
	     SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d353 *
	     24'd17 ;
  assign SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d513 =
	     SEXT_IF_norm_pixels_1_self_reg_19_BIT_8_20_THE_ETC___d353 *
	     24'd38 ;
  assign SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d359 =
	     { {16{IF_norm_pixels_2_self_reg_BIT_8_THEN_norm_pixe_ETC__q3[7]}},
	       IF_norm_pixels_2_self_reg_BIT_8_THEN_norm_pixe_ETC__q3 } ;
  assign SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d360 =
	     SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d359 *
	     24'd38 ;
  assign SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d398 =
	     SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d359 *
	     24'd42 ;
  assign SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d422 =
	     SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d359 *
	     24'd9 ;
  assign SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d445 =
	     SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d359 *
	     24'd16777184 ;
  assign SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d469 =
	     SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d359 *
	     24'd16777172 ;
  assign SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d492 =
	     SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d359 *
	     24'd16777199 ;
  assign SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d516 =
	     SEXT_IF_norm_pixels_2_self_reg_21_BIT_8_22_THE_ETC___d359 *
	     24'd25 ;
  assign SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d365 =
	     { {16{IF_norm_pixels_3_self_reg_BIT_8_THEN_norm_pixe_ETC__q4[7]}},
	       IF_norm_pixels_3_self_reg_BIT_8_THEN_norm_pixe_ETC__q4 } ;
  assign SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d366 =
	     SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d365 *
	     24'd16777172 ;
  assign SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d401 =
	     SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d365 *
	     24'd16777199 ;
  assign SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d425 =
	     SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d365 *
	     24'd38 ;
  assign SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d472 =
	     SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d365 *
	     24'd16777191 ;
  assign SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d495 =
	     SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d365 *
	     24'd16777174 ;
  assign SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d519 =
	     SEXT_IF_norm_pixels_3_self_reg_23_BIT_8_24_THE_ETC___d365 *
	     24'd9 ;
  assign SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d371 =
	     { {16{IF_norm_pixels_4_self_reg_BIT_8_THEN_norm_pixe_ETC__q5[7]}},
	       IF_norm_pixels_4_self_reg_BIT_8_THEN_norm_pixe_ETC__q5 } ;
  assign SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d372 =
	     SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d371 *
	     24'd44 ;
  assign SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d404 =
	     SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d371 *
	     24'd16777199 ;
  assign SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d428 =
	     SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d371 *
	     24'd16777178 ;
  assign SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d475 =
	     SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d371 *
	     24'd25 ;
  assign SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d498 =
	     SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d371 *
	     24'd16777174 ;
  assign SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d522 =
	     SEXT_IF_norm_pixels_4_self_reg_25_BIT_8_26_THE_ETC___d371 *
	     24'd16777207 ;
  assign SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d377 =
	     { {16{IF_norm_pixels_5_self_reg_BIT_8_THEN_norm_pixe_ETC__q6[7]}},
	       IF_norm_pixels_5_self_reg_BIT_8_THEN_norm_pixe_ETC__q6 } ;
  assign SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d378 =
	     SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d377 *
	     24'd16777178 ;
  assign SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d407 =
	     SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d377 *
	     24'd42 ;
  assign SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d431 =
	     SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d377 *
	     24'd16777207 ;
  assign SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d454 =
	     SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d377 *
	     24'd16777184 ;
  assign SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d478 =
	     SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d377 *
	     24'd44 ;
  assign SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d501 =
	     SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d377 *
	     24'd16777199 ;
  assign SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d525 =
	     SEXT_IF_norm_pixels_5_self_reg_27_BIT_8_28_THE_ETC___d377 *
	     24'd16777191 ;
  assign SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d383 =
	     { {16{IF_norm_pixels_6_self_reg_BIT_8_THEN_norm_pixe_ETC__q7[7]}},
	       IF_norm_pixels_6_self_reg_BIT_8_THEN_norm_pixe_ETC__q7 } ;
  assign SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d384 =
	     SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d383 *
	     24'd25 ;
  assign SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d410 =
	     SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d383 *
	     24'd16777174 ;
  assign SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d434 =
	     SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d383 *
	     24'd44 ;
  assign SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d457 =
	     SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d383 *
	     24'd16777184 ;
  assign SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d481 =
	     SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d383 *
	     24'd9 ;
  assign SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d504 =
	     SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d383 *
	     24'd17 ;
  assign SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d528 =
	     SEXT_IF_norm_pixels_6_self_reg_29_BIT_8_30_THE_ETC___d383 *
	     24'd16777178 ;
  assign SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d389 =
	     { {16{IF_norm_pixels_7_self_reg_BIT_8_THEN_norm_pixe_ETC__q8[7]}},
	       IF_norm_pixels_7_self_reg_BIT_8_THEN_norm_pixe_ETC__q8 } ;
  assign SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d390 =
	     SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d389 *
	     24'd16777207 ;
  assign SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d413 =
	     SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d389 *
	     24'd17 ;
  assign SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d437 =
	     SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d389 *
	     24'd16777191 ;
  assign SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d484 =
	     SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d389 *
	     24'd16777178 ;
  assign SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d507 =
	     SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d389 *
	     24'd42 ;
  assign SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d531 =
	     SEXT_IF_norm_pixels_7_self_reg_31_BIT_8_32_THE_ETC___d389 *
	     24'd16777172 ;
  assign SEXT_SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_ETC__q171 =
	     { {15{SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q170[8]}},
	       SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q170 } ;
  assign SEXT_SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_ETC__q174 =
	     { {15{SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q173[8]}},
	       SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q173 } ;
  assign SEXT_SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_ETC__q177 =
	     { {15{SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q176[8]}},
	       SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q176 } ;
  assign SEXT_SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_ETC__q180 =
	     { {15{SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q179[8]}},
	       SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q179 } ;
  assign SEXT_SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_ETC__q183 =
	     { {15{SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q182[8]}},
	       SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q182 } ;
  assign SEXT_SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_ETC__q186 =
	     { {15{SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q185[8]}},
	       SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q185 } ;
  assign SEXT_SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_ETC__q191 =
	     { {15{SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q190[8]}},
	       SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q190 } ;
  assign SEXT_SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_ETC__q194 =
	     { {15{SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q193[8]}},
	       SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC__q193 } ;
  assign _0_CONCAT_IF_init_xtile_EQ_0_358_THEN_1_ELSE_in_ETC___d2364 =
	     { 15'd0,
	       IF_init_xtile_EQ_0_358_THEN_1_ELSE_init_xtile___d2359 } *
	     { 15'd0,
	       IF_init_ytile_EQ_0_356_THEN_1_ELSE_init_ytile___d2357 } ;
  assign _0_CONCAT_pm_len_0_044_045_PLUS_0_CONCAT_pm_len_ETC___d2048 =
	     { 4'd0, pm_len_0 } + { 4'd0, pm_len_1 } ;
  assign _0_CONCAT_pm_len_0_044_045_PLUS_0_CONCAT_pm_len_ETC___d2051 =
	     _0_CONCAT_pm_len_0_044_045_PLUS_0_CONCAT_pm_len_ETC___d2048 +
	     { 4'd0, pm_len_2 } ;
  assign _0_CONCAT_pm_len_0_044_045_PLUS_0_CONCAT_pm_len_ETC___d2054 =
	     _0_CONCAT_pm_len_0_044_045_PLUS_0_CONCAT_pm_len_ETC___d2051 +
	     { 4'd0, pm_len_3 } ;
  assign _0_CONCAT_pm_len_0_044_045_PLUS_0_CONCAT_pm_len_ETC___d2057 =
	     _0_CONCAT_pm_len_0_044_045_PLUS_0_CONCAT_pm_len_ETC___d2054 +
	     { 4'd0, pm_len_4 } ;
  assign _0_CONCAT_pm_len_0_044_045_PLUS_0_CONCAT_pm_len_ETC___d2060 =
	     _0_CONCAT_pm_len_0_044_045_PLUS_0_CONCAT_pm_len_ETC___d2057 +
	     { 4'd0, pm_len_5 } ;
  assign _0_CONCAT_pm_len_0_044_045_PLUS_0_CONCAT_pm_len_ETC___d2063 =
	     _0_CONCAT_pm_len_0_044_045_PLUS_0_CONCAT_pm_len_ETC___d2060 +
	     { 4'd0, pm_len_6 } ;
  assign b__h25442 = { 1'd1, c_len_0 } ;
  assign b__h25642 = { 1'd1, c_len_1 } ;
  assign b__h25842 = { 1'd1, c_len_2 } ;
  assign b__h26042 = { 1'd1, c_len_3 } ;
  assign b__h26242 = { 1'd1, c_len_4 } ;
  assign b__h26442 = { 1'd1, c_len_5 } ;
  assign b__h26642 = { 1'd1, c_len_6 } ;
  assign b__h26842 = { 1'd1, c_len_7 } ;
  assign bits__h158021 = x__h158094 | y__h158095 ;
  assign c_prev_zcnt_612_PLUS_IF_IF_qnt_sy_self_reg_585_ETC___d1614 =
	     c_prev_zcnt +
	     ((IF_qnt_sy_self_reg_585_BIT_3_586_THEN_qnt_sy_s_ETC___d1588 ==
	       3'd0 ||
	       qnt_pixels[7:0] != 8'd0) ?
		4'd0 :
		4'd1) ;
  assign c_valid_1_self_reg_950_BIT_1_951_AND_c_valid_2_ETC___d1969 =
	     c_valid_1_self_reg[1] && c_valid_2_self_reg[1] &&
	     c_valid_3_self_reg[1] &&
	     c_valid_4_self_reg[1] &&
	     c_valid_5_self_reg[1] &&
	     c_valid_6_self_reg[1] &&
	     c_valid_7_self_reg[1] ;
  assign code__h103823 = c_code_0 << x__h104181 ;
  assign code__h104610 = c_code_1 << x__h104736 ;
  assign code__h104933 = c_code_2 << x__h105059 ;
  assign code__h105256 = c_code_3 << x__h105382 ;
  assign code__h105579 = c_code_4 << x__h105705 ;
  assign code__h105902 = c_code_5 << x__h106028 ;
  assign code__h106225 = c_code_6 << x__h106351 ;
  assign code__h106548 = c_code_7 << x__h106674 ;
  assign dcta_double_buffer_rcnt_88_PLUS_1_89_ULT_8___d590 =
	     dcta_double_buffer_rcnt_88_PLUS_1___d589 < 32'd8 ;
  assign dcta_double_buffer_rcnt_88_PLUS_1___d589 =
	     dcta_double_buffer_rcnt + 32'd1 ;
  assign dctb_double_buffer_rcnt_017_PLUS_1_018_ULT_8___d1019 =
	     dctb_double_buffer_rcnt_017_PLUS_1___d1018 < 32'd8 ;
  assign dctb_double_buffer_rcnt_017_PLUS_1___d1018 =
	     dctb_double_buffer_rcnt + 32'd1 ;
  assign fsm_abort_whas__108_AND_fsm_abort_wget__109_11_ETC___d2353 =
	     (fsm_state_mkFSMstate == 4'd0 ||
	      fsm_state_mkFSMstate == 4'd11) &&
	     (!fsm_start_reg_1 || fsm_state_fired) ;
  assign fsm_par_blocks_1_abort_whas__158_AND_fsm_par_b_ETC___d2315 =
	     (fsm_par_blocks_1_state_mkFSMstate == 3'd0 ||
	      fsm_par_blocks_1_state_mkFSMstate == 3'd3) &&
	     (!fsm_par_blocks_1_start_reg || fsm_par_blocks_1_state_fired) ;
  assign fsm_par_blocks_abort_whas__129_AND_fsm_par_blo_ETC___d2318 =
	     (fsm_par_blocks_state_mkFSMstate == 3'd0 ||
	      fsm_par_blocks_state_mkFSMstate == 3'd3) &&
	     (!fsm_par_blocks_start_reg || fsm_par_blocks_state_fired) ;
  assign header_idx_203_ULT_18___d2204 = header_idx < 5'd18 ;
  assign linebuf_ram_serverAdapterB_cnt_8_PLUS_IF_lineb_ETC___d84 =
	     linebuf_ram_serverAdapterB_cnt +
	     (WILL_FIRE_RL_linebuf_ram_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (linebuf_ram_serverAdapterB_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign linebuf_ri_20_ULT_linebuf_maxi_19___d133 =
	     linebuf_ri < linebuf_maxi ;
  assign linebuf_rj_25_ULT_linebuf_maxj_24___d130 =
	     linebuf_rj < linebuf_maxj ;
  assign linebuf_wi_296_ULT_linebuf_maxi_19___d2303 =
	     linebuf_wi < linebuf_maxi ;
  assign linebuf_wj_297_EQ_linebuf_maxj_24___d2300 =
	     linebuf_wj == linebuf_maxj ;
  assign norm_pixels_1_self_reg_19_BIT_8_20_AND_norm_pi_ETC___d338 =
	     norm_pixels_1_self_reg[8] && norm_pixels_2_self_reg[8] &&
	     norm_pixels_3_self_reg[8] &&
	     norm_pixels_4_self_reg[8] &&
	     norm_pixels_5_self_reg[8] &&
	     norm_pixels_6_self_reg[8] &&
	     norm_pixels_7_self_reg[8] ;
  assign st_rem_len_243_PLUS_lm_len_244_245_ULT_128___d2246 =
	     st_rem_len_243_PLUS_lm_len_244___d2245 < 8'd128 ;
  assign st_rem_len_243_PLUS_lm_len_244___d2245 = st_rem_len + lm_len ;
  assign x__h104181 = 3'd7 - c_len_0 ;
  assign x__h104736 = 3'd7 - c_len_1 ;
  assign x__h105059 = 3'd7 - c_len_2 ;
  assign x__h105382 = 3'd7 - c_len_3 ;
  assign x__h105705 = 3'd7 - c_len_4 ;
  assign x__h106028 = 3'd7 - c_len_5 ;
  assign x__h106351 = 3'd7 - c_len_6 ;
  assign x__h106674 = 3'd7 - c_len_7 ;
  assign x__h107162 = x__h107175 | y__h107176 ;
  assign x__h107175 = x__h107188 | y__h107189 ;
  assign x__h107188 = x__h107201 | y__h107202 ;
  assign x__h107201 = x__h107214 | y__h107215 ;
  assign x__h107214 = x__h107227 | y__h107228 ;
  assign x__h107227 = x__h107240 | y__h107241 ;
  assign x__h107240 = { 1'd0, pm_bits_0, 105'd0 } ;
  assign x__h107297 = { 106'b0, pm_bits_1 } ;
  assign x__h107347 = 8'd105 - { 4'd0, pm_len_0 } ;
  assign x__h107349 = { 106'b0, pm_bits_2 } ;
  assign x__h107399 =
	     8'd105 -
	     _0_CONCAT_pm_len_0_044_045_PLUS_0_CONCAT_pm_len_ETC___d2048 ;
  assign x__h107401 = { 106'b0, pm_bits_3 } ;
  assign x__h107451 =
	     8'd105 -
	     _0_CONCAT_pm_len_0_044_045_PLUS_0_CONCAT_pm_len_ETC___d2051 ;
  assign x__h107453 = { 106'b0, pm_bits_4 } ;
  assign x__h107503 =
	     8'd105 -
	     _0_CONCAT_pm_len_0_044_045_PLUS_0_CONCAT_pm_len_ETC___d2054 ;
  assign x__h107505 = { 106'b0, pm_bits_5 } ;
  assign x__h107555 =
	     8'd105 -
	     _0_CONCAT_pm_len_0_044_045_PLUS_0_CONCAT_pm_len_ETC___d2057 ;
  assign x__h107557 = { 106'b0, pm_bits_6 } ;
  assign x__h107607 =
	     8'd105 -
	     _0_CONCAT_pm_len_0_044_045_PLUS_0_CONCAT_pm_len_ETC___d2060 ;
  assign x__h107609 = { 106'b0, pm_bits_7 } ;
  assign x__h107659 =
	     8'd105 -
	     _0_CONCAT_pm_len_0_044_045_PLUS_0_CONCAT_pm_len_ETC___d2063 ;
  assign x__h158094 = { st_rem_bits, 120'b0 } ;
  assign x__h158098 = { x__read__h28891, 128'b0 } ;
  assign x__h27294 = { c_zcnt_0, c_len_0 - 3'd1, code__h103823 } ;
  assign x__h27445 = { c_zcnt_1, c_len_1 - 3'd1, code__h104610 } ;
  assign x__h27596 = { c_zcnt_2, c_len_2 - 3'd1, code__h104933 } ;
  assign x__h27747 = { c_zcnt_3, c_len_3 - 3'd1, code__h105256 } ;
  assign x__h27898 = { c_zcnt_4, c_len_4 - 3'd1, code__h105579 } ;
  assign x__h28049 = { c_zcnt_5, c_len_5 - 3'd1, code__h105902 } ;
  assign x__h28200 = { c_zcnt_6, c_len_6 - 3'd1, code__h106225 } ;
  assign x__h28351 = { c_zcnt_7, c_len_7 - 3'd1, code__h106548 } ;
  assign x__h91682 =
	     (IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492 ==
	      3'd0) ?
	       3'd1 :
	       { 1'd0,
		 IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492[2:1] } ;
  assign x__read__h28891 =
	     lm_bits_self_reg[120] ? lm_bits_self_reg[119:0] : 120'd0 ;
  assign y__h107163 = x__h107609 << x__h107659 ;
  assign y__h107176 = x__h107557 << x__h107607 ;
  assign y__h107189 = x__h107505 << x__h107555 ;
  assign y__h107202 = x__h107453 << x__h107503 ;
  assign y__h107215 = x__h107401 << x__h107451 ;
  assign y__h107228 = x__h107349 << x__h107399 ;
  assign y__h107241 = x__h107297 << x__h107347 ;
  assign y__h12215 = { ~linebuf_rblock[1], linebuf_rblock[0] } ;
  assign y__h158095 = x__h158098 >> st_rem_len ;
  assign y__h17571 =
	     { ~dcta_double_buffer_rblock[1], dcta_double_buffer_rblock[0] } ;
  assign y__h18982 =
	     { ~dctb_double_buffer_rblock[1], dctb_double_buffer_rblock[0] } ;
  assign y_avValue_snd__h158202 = { bits__h158021[119:0], 128'b0 } ;
  assign zig_pixels_0_494_BITS_8_TO_1_495_SRA_IF_IF_zig_ETC___d1502 =
	     (zig_pixels_0[8:1] >> x__h91682 |
	      ~(8'hFF >> x__h91682) &
	      {8{zig_pixels_0_BITS_8_TO_1__q153[7]}}) +
	     (zig_pixels_0[x__h91682] ? 8'd1 : 8'd0) ;
  assign zig_pixels_0_BITS_8_TO_1__q153 = zig_pixels_0[8:1] ;
  assign zig_pixels_1_570_BITS_8_TO_1_571_SRA_0_CONCAT__ETC___d1575 =
	     (zig_pixels_1[8:1] >>
	      IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492[2:1] |
	      ~(8'hFF >>
		IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492[2:1]) &
	      {8{zig_pixels_1_BITS_8_TO_1__q160[7]}}) +
	     (zig_pixels_1[IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492[2:1]] ?
		8'd1 :
		8'd0) ;
  assign zig_pixels_1_BITS_8_TO_1__q160 = zig_pixels_1[8:1] ;
  assign zig_pixels_2_559_BITS_8_TO_1_560_SRA_0_CONCAT__ETC___d1564 =
	     (zig_pixels_2[8:1] >>
	      IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492[2:1] |
	      ~(8'hFF >>
		IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492[2:1]) &
	      {8{zig_pixels_2_BITS_8_TO_1__q159[7]}}) +
	     (zig_pixels_2[IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492[2:1]] ?
		8'd1 :
		8'd0) ;
  assign zig_pixels_2_BITS_8_TO_1__q159 = zig_pixels_2[8:1] ;
  assign zig_pixels_3_549_BITS_8_TO_1_550_SRA_0_CONCAT__ETC___d1554 =
	     (zig_pixels_3[8:1] >>
	      IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492[2:1] |
	      ~(8'hFF >>
		IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492[2:1]) &
	      {8{zig_pixels_3_BITS_8_TO_1__q158[7]}}) +
	     (zig_pixels_3[IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492[2:1]] ?
		8'd1 :
		8'd0) ;
  assign zig_pixels_3_BITS_8_TO_1__q158 = zig_pixels_3[8:1] ;
  assign zig_pixels_4_538_BITS_8_TO_1_539_SRA_0_CONCAT__ETC___d1543 =
	     (zig_pixels_4[8:1] >>
	      IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492[2:1] |
	      ~(8'hFF >>
		IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492[2:1]) &
	      {8{zig_pixels_4_BITS_8_TO_1__q157[7]}}) +
	     (zig_pixels_4[IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492[2:1]] ?
		8'd1 :
		8'd0) ;
  assign zig_pixels_4_BITS_8_TO_1__q157 = zig_pixels_4[8:1] ;
  assign zig_pixels_5_528_BITS_8_TO_1_529_SRA_0_CONCAT__ETC___d1533 =
	     (zig_pixels_5[8:1] >>
	      IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492[2:1] |
	      ~(8'hFF >>
		IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492[2:1]) &
	      {8{zig_pixels_5_BITS_8_TO_1__q156[7]}}) +
	     (zig_pixels_5[IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492[2:1]] ?
		8'd1 :
		8'd0) ;
  assign zig_pixels_5_BITS_8_TO_1__q156 = zig_pixels_5[8:1] ;
  assign zig_pixels_6_517_BITS_8_TO_1_518_SRA_0_CONCAT__ETC___d1522 =
	     (zig_pixels_6[8:1] >>
	      IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492[2:1] |
	      ~(8'hFF >>
		IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492[2:1]) &
	      {8{zig_pixels_6_BITS_8_TO_1__q155[7]}}) +
	     (zig_pixels_6[IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492[2:1]] ?
		8'd1 :
		8'd0) ;
  assign zig_pixels_6_BITS_8_TO_1__q155 = zig_pixels_6[8:1] ;
  assign zig_pixels_7_507_BITS_8_TO_1_508_SRA_0_CONCAT__ETC___d1512 =
	     (zig_pixels_7[8:1] >>
	      IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492[2:1] |
	      ~(8'hFF >>
		IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492[2:1]) &
	      {8{zig_pixels_7_BITS_8_TO_1__q154[7]}}) +
	     (zig_pixels_7[IF_zig_sy_self_reg_489_BIT_3_490_THEN_zig_sy_s_ETC___d1492[2:1]] ?
		8'd1 :
		8'd0) ;
  assign zig_pixels_7_BITS_8_TO_1__q154 = zig_pixels_7[8:1] ;
  always@(dctb_double_buffer_rcnt)
  begin
    case (dctb_double_buffer_rcnt)
      32'd0: x__h79299 = 3'd0;
      32'd1: x__h79299 = 3'd2;
      32'd2: x__h79299 = 3'd1;
      32'd3, 32'd5: x__h79299 = 3'd3;
      32'd4: x__h79299 = 3'd4;
      32'd6: x__h79299 = 3'd7;
      32'd7: x__h79299 = 3'd6;
      default: x__h79299 = 3'b010 /* unspecified value */ ;
    endcase
  end
  always@(dctb_double_buffer_rcnt)
  begin
    case (dctb_double_buffer_rcnt)
      32'd0: x__h79394 = 3'd0;
      32'd1: x__h79394 = 3'd1;
      32'd2: x__h79394 = 3'd4;
      32'd3, 32'd4: x__h79394 = 3'd3;
      32'd5, 32'd7: x__h79394 = 3'd5;
      32'd6: x__h79394 = 3'd2;
      default: x__h79394 = 3'b010 /* unspecified value */ ;
    endcase
  end
  always@(dctb_double_buffer_rcnt)
  begin
    case (dctb_double_buffer_rcnt)
      32'd0, 32'd3, 32'd5: x__h86978 = 3'd1;
      32'd1: x__h86978 = 3'd4;
      32'd2: x__h86978 = 3'd3;
      32'd4, 32'd6: x__h86978 = 3'd6;
      32'd7: x__h86978 = 3'd7;
      default: x__h86978 = 3'b010 /* unspecified value */ ;
    endcase
  end
  always@(dctb_double_buffer_rcnt)
  begin
    case (dctb_double_buffer_rcnt)
      32'd0: x__h86252 = 3'd0;
      32'd1: x__h86252 = 3'd3;
      32'd2, 32'd3, 32'd5: x__h86252 = 3'd2;
      32'd4: x__h86252 = 3'd5;
      32'd6, 32'd7: x__h86252 = 3'd7;
      default: x__h86252 = 3'b010 /* unspecified value */ ;
    endcase
  end
  always@(dctb_double_buffer_rcnt)
  begin
    case (dctb_double_buffer_rcnt)
      32'd0, 32'd5: x__h87704 = 3'd2;
      32'd1: x__h87704 = 3'd3;
      32'd2: x__h87704 = 3'd4;
      32'd3: x__h87704 = 3'd0;
      32'd4: x__h87704 = 3'd7;
      32'd6: x__h87704 = 3'd5;
      32'd7: x__h87704 = 3'd6;
      default: x__h87704 = 3'b010 /* unspecified value */ ;
    endcase
  end
  always@(dctb_double_buffer_rcnt)
  begin
    case (dctb_double_buffer_rcnt)
      32'd0: x__h88430 = 3'd1;
      32'd1: x__h88430 = 3'd2;
      32'd2, 32'd7: x__h88430 = 3'd5;
      32'd3: x__h88430 = 3'd0;
      32'd4: x__h88430 = 3'd7;
      32'd5: x__h88430 = 3'd3;
      32'd6: x__h88430 = 3'd4;
      default: x__h88430 = 3'b010 /* unspecified value */ ;
    endcase
  end
  always@(dctb_double_buffer_rcnt)
  begin
    case (dctb_double_buffer_rcnt)
      32'd0: x__h89156 = 3'd0;
      32'd1, 32'd3: x__h89156 = 3'd1;
      32'd2, 32'd4, 32'd7: x__h89156 = 3'd6;
      32'd5: x__h89156 = 3'd4;
      32'd6: x__h89156 = 3'd3;
      default: x__h89156 = 3'b010 /* unspecified value */ ;
    endcase
  end
  always@(dctb_double_buffer_rcnt)
  begin
    case (dctb_double_buffer_rcnt)
      32'd0, 32'd1: x__h89882 = 3'd0;
      32'd2, 32'd4, 32'd5: x__h89882 = 3'd5;
      32'd3: x__h89882 = 3'd2;
      32'd6: x__h89882 = 3'd4;
      32'd7: x__h89882 = 3'd7;
      default: x__h89882 = 3'b010 /* unspecified value */ ;
    endcase
  end
  always@(dctb_double_buffer_rcnt)
  begin
    case (dctb_double_buffer_rcnt)
      32'd0: x__h90608 = 3'd1;
      32'd1: x__h90608 = 3'd0;
      32'd2, 32'd4: x__h90608 = 3'd4;
      32'd3: x__h90608 = 3'd3;
      32'd5: x__h90608 = 3'd6;
      32'd6: x__h90608 = 3'd5;
      32'd7: x__h90608 = 3'd7;
      default: x__h90608 = 3'b010 /* unspecified value */ ;
    endcase
  end
  always@(dctb_double_buffer_rcnt)
  begin
    case (dctb_double_buffer_rcnt)
      32'd0: x__h86347 = 3'd1;
      32'd1: x__h86347 = 3'd0;
      32'd2, 32'd6: x__h86347 = 3'd3;
      32'd3, 32'd7: x__h86347 = 3'd4;
      32'd4: x__h86347 = 3'd2;
      32'd5: x__h86347 = 3'd6;
      default: x__h86347 = 3'b010 /* unspecified value */ ;
    endcase
  end
  always@(dctb_double_buffer_rcnt)
  begin
    case (dctb_double_buffer_rcnt)
      32'd0, 32'd1: x__h87073 = 3'd0;
      32'd2: x__h87073 = 3'd2;
      32'd3, 32'd7: x__h87073 = 3'd5;
      32'd4: x__h87073 = 3'd1;
      32'd5: x__h87073 = 3'd7;
      32'd6: x__h87073 = 3'd4;
      default: x__h87073 = 3'b010 /* unspecified value */ ;
    endcase
  end
  always@(dctb_double_buffer_rcnt)
  begin
    case (dctb_double_buffer_rcnt)
      32'd0, 32'd4: x__h87799 = 3'd0;
      32'd1, 32'd2: x__h87799 = 3'd1;
      32'd3, 32'd7: x__h87799 = 3'd6;
      32'd5: x__h87799 = 3'd7;
      32'd6: x__h87799 = 3'd5;
      default: x__h87799 = 3'b010 /* unspecified value */ ;
    endcase
  end
  always@(dctb_double_buffer_rcnt)
  begin
    case (dctb_double_buffer_rcnt)
      32'd0, 32'd4: x__h88525 = 3'd1;
      32'd1: x__h88525 = 3'd2;
      32'd2: x__h88525 = 3'd0;
      32'd3, 32'd7: x__h88525 = 3'd7;
      32'd5, 32'd6: x__h88525 = 3'd6;
      default: x__h88525 = 3'b010 /* unspecified value */ ;
    endcase
  end
  always@(dctb_double_buffer_rcnt)
  begin
    case (dctb_double_buffer_rcnt)
      32'd0, 32'd4: x__h89251 = 3'd2;
      32'd1: x__h89251 = 3'd3;
      32'd2: x__h89251 = 3'd0;
      32'd3: x__h89251 = 3'd6;
      32'd5: x__h89251 = 3'd5;
      32'd6, 32'd7: x__h89251 = 3'd7;
      default: x__h89251 = 3'b010 /* unspecified value */ ;
    endcase
  end
  always@(dctb_double_buffer_rcnt)
  begin
    case (dctb_double_buffer_rcnt)
      32'd0, 32'd4: x__h89977 = 3'd3;
      32'd1, 32'd5: x__h89977 = 3'd4;
      32'd2: x__h89977 = 3'd1;
      32'd3: x__h89977 = 3'd5;
      32'd6: x__h89977 = 3'd7;
      32'd7: x__h89977 = 3'd6;
      default: x__h89977 = 3'b010 /* unspecified value */ ;
    endcase
  end
  always@(dctb_double_buffer_rcnt)
  begin
    case (dctb_double_buffer_rcnt)
      32'd0, 32'd2: x__h90703 = 3'd2;
      32'd1: x__h90703 = 3'd5;
      32'd3, 32'd4: x__h90703 = 3'd4;
      32'd5: x__h90703 = 3'd3;
      32'd6: x__h90703 = 3'd6;
      32'd7: x__h90703 = 3'd7;
      default: x__h90703 = 3'b010 /* unspecified value */ ;
    endcase
  end
  always@(dcta_double_buffer_rcnt or dcta_double_buffer_buffer_0_0)
  begin
    case (dcta_double_buffer_rcnt)
      32'd0:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q9 =
	      dcta_double_buffer_buffer_0_0[23:0];
      32'd1:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q9 =
	      dcta_double_buffer_buffer_0_0[47:24];
      32'd2:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q9 =
	      dcta_double_buffer_buffer_0_0[71:48];
      32'd3:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q9 =
	      dcta_double_buffer_buffer_0_0[95:72];
      32'd4:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q9 =
	      dcta_double_buffer_buffer_0_0[119:96];
      32'd5:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q9 =
	      dcta_double_buffer_buffer_0_0[143:120];
      32'd6:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q9 =
	      dcta_double_buffer_buffer_0_0[167:144];
      32'd7:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q9 =
	      dcta_double_buffer_buffer_0_0[191:168];
      default: CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q9 =
		   24'b101010101010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(dcta_double_buffer_rcnt or dcta_double_buffer_buffer_1_0)
  begin
    case (dcta_double_buffer_rcnt)
      32'd0:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q10 =
	      dcta_double_buffer_buffer_1_0[23:0];
      32'd1:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q10 =
	      dcta_double_buffer_buffer_1_0[47:24];
      32'd2:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q10 =
	      dcta_double_buffer_buffer_1_0[71:48];
      32'd3:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q10 =
	      dcta_double_buffer_buffer_1_0[95:72];
      32'd4:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q10 =
	      dcta_double_buffer_buffer_1_0[119:96];
      32'd5:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q10 =
	      dcta_double_buffer_buffer_1_0[143:120];
      32'd6:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q10 =
	      dcta_double_buffer_buffer_1_0[167:144];
      32'd7:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q10 =
	      dcta_double_buffer_buffer_1_0[191:168];
      default: CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q10 =
		   24'b101010101010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(dcta_double_buffer_rblock or
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q9 or
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q10)
  begin
    case (dcta_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d622 =
	      CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q9;
      1'd1:
	  SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_0__ETC___d622 =
	      CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q10;
    endcase
  end
  always@(dcta_double_buffer_rcnt or dcta_double_buffer_buffer_0_1)
  begin
    case (dcta_double_buffer_rcnt)
      32'd0:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q11 =
	      dcta_double_buffer_buffer_0_1[23:0];
      32'd1:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q11 =
	      dcta_double_buffer_buffer_0_1[47:24];
      32'd2:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q11 =
	      dcta_double_buffer_buffer_0_1[71:48];
      32'd3:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q11 =
	      dcta_double_buffer_buffer_0_1[95:72];
      32'd4:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q11 =
	      dcta_double_buffer_buffer_0_1[119:96];
      32'd5:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q11 =
	      dcta_double_buffer_buffer_0_1[143:120];
      32'd6:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q11 =
	      dcta_double_buffer_buffer_0_1[167:144];
      32'd7:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q11 =
	      dcta_double_buffer_buffer_0_1[191:168];
      default: CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q11 =
		   24'b101010101010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(dcta_double_buffer_rcnt or dcta_double_buffer_buffer_1_1)
  begin
    case (dcta_double_buffer_rcnt)
      32'd0:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q12 =
	      dcta_double_buffer_buffer_1_1[23:0];
      32'd1:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q12 =
	      dcta_double_buffer_buffer_1_1[47:24];
      32'd2:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q12 =
	      dcta_double_buffer_buffer_1_1[71:48];
      32'd3:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q12 =
	      dcta_double_buffer_buffer_1_1[95:72];
      32'd4:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q12 =
	      dcta_double_buffer_buffer_1_1[119:96];
      32'd5:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q12 =
	      dcta_double_buffer_buffer_1_1[143:120];
      32'd6:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q12 =
	      dcta_double_buffer_buffer_1_1[167:144];
      32'd7:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q12 =
	      dcta_double_buffer_buffer_1_1[191:168];
      default: CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q12 =
		   24'b101010101010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(dcta_double_buffer_rblock or
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q11 or
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q12)
  begin
    case (dcta_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d648 =
	      CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q11;
      1'd1:
	  SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_1__ETC___d648 =
	      CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q12;
    endcase
  end
  always@(dcta_double_buffer_rcnt or dcta_double_buffer_buffer_0_2)
  begin
    case (dcta_double_buffer_rcnt)
      32'd0:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q13 =
	      dcta_double_buffer_buffer_0_2[23:0];
      32'd1:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q13 =
	      dcta_double_buffer_buffer_0_2[47:24];
      32'd2:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q13 =
	      dcta_double_buffer_buffer_0_2[71:48];
      32'd3:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q13 =
	      dcta_double_buffer_buffer_0_2[95:72];
      32'd4:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q13 =
	      dcta_double_buffer_buffer_0_2[119:96];
      32'd5:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q13 =
	      dcta_double_buffer_buffer_0_2[143:120];
      32'd6:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q13 =
	      dcta_double_buffer_buffer_0_2[167:144];
      32'd7:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q13 =
	      dcta_double_buffer_buffer_0_2[191:168];
      default: CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q13 =
		   24'b101010101010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(dcta_double_buffer_rcnt or dcta_double_buffer_buffer_1_2)
  begin
    case (dcta_double_buffer_rcnt)
      32'd0:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q14 =
	      dcta_double_buffer_buffer_1_2[23:0];
      32'd1:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q14 =
	      dcta_double_buffer_buffer_1_2[47:24];
      32'd2:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q14 =
	      dcta_double_buffer_buffer_1_2[71:48];
      32'd3:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q14 =
	      dcta_double_buffer_buffer_1_2[95:72];
      32'd4:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q14 =
	      dcta_double_buffer_buffer_1_2[119:96];
      32'd5:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q14 =
	      dcta_double_buffer_buffer_1_2[143:120];
      32'd6:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q14 =
	      dcta_double_buffer_buffer_1_2[167:144];
      32'd7:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q14 =
	      dcta_double_buffer_buffer_1_2[191:168];
      default: CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q14 =
		   24'b101010101010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(dcta_double_buffer_rblock or
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q13 or
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q14)
  begin
    case (dcta_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d675 =
	      CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q13;
      1'd1:
	  SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_2__ETC___d675 =
	      CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q14;
    endcase
  end
  always@(dcta_double_buffer_rcnt or dcta_double_buffer_buffer_0_3)
  begin
    case (dcta_double_buffer_rcnt)
      32'd0:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q15 =
	      dcta_double_buffer_buffer_0_3[23:0];
      32'd1:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q15 =
	      dcta_double_buffer_buffer_0_3[47:24];
      32'd2:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q15 =
	      dcta_double_buffer_buffer_0_3[71:48];
      32'd3:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q15 =
	      dcta_double_buffer_buffer_0_3[95:72];
      32'd4:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q15 =
	      dcta_double_buffer_buffer_0_3[119:96];
      32'd5:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q15 =
	      dcta_double_buffer_buffer_0_3[143:120];
      32'd6:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q15 =
	      dcta_double_buffer_buffer_0_3[167:144];
      32'd7:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q15 =
	      dcta_double_buffer_buffer_0_3[191:168];
      default: CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q15 =
		   24'b101010101010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(dcta_double_buffer_rcnt or dcta_double_buffer_buffer_1_3)
  begin
    case (dcta_double_buffer_rcnt)
      32'd0:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q16 =
	      dcta_double_buffer_buffer_1_3[23:0];
      32'd1:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q16 =
	      dcta_double_buffer_buffer_1_3[47:24];
      32'd2:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q16 =
	      dcta_double_buffer_buffer_1_3[71:48];
      32'd3:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q16 =
	      dcta_double_buffer_buffer_1_3[95:72];
      32'd4:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q16 =
	      dcta_double_buffer_buffer_1_3[119:96];
      32'd5:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q16 =
	      dcta_double_buffer_buffer_1_3[143:120];
      32'd6:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q16 =
	      dcta_double_buffer_buffer_1_3[167:144];
      32'd7:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q16 =
	      dcta_double_buffer_buffer_1_3[191:168];
      default: CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q16 =
		   24'b101010101010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(dcta_double_buffer_rblock or
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q15 or
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q16)
  begin
    case (dcta_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d702 =
	      CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q15;
      1'd1:
	  SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_3__ETC___d702 =
	      CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q16;
    endcase
  end
  always@(dcta_double_buffer_rcnt or dcta_double_buffer_buffer_0_4)
  begin
    case (dcta_double_buffer_rcnt)
      32'd0:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q17 =
	      dcta_double_buffer_buffer_0_4[23:0];
      32'd1:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q17 =
	      dcta_double_buffer_buffer_0_4[47:24];
      32'd2:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q17 =
	      dcta_double_buffer_buffer_0_4[71:48];
      32'd3:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q17 =
	      dcta_double_buffer_buffer_0_4[95:72];
      32'd4:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q17 =
	      dcta_double_buffer_buffer_0_4[119:96];
      32'd5:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q17 =
	      dcta_double_buffer_buffer_0_4[143:120];
      32'd6:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q17 =
	      dcta_double_buffer_buffer_0_4[167:144];
      32'd7:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q17 =
	      dcta_double_buffer_buffer_0_4[191:168];
      default: CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q17 =
		   24'b101010101010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(dcta_double_buffer_rcnt or dcta_double_buffer_buffer_1_4)
  begin
    case (dcta_double_buffer_rcnt)
      32'd0:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q18 =
	      dcta_double_buffer_buffer_1_4[23:0];
      32'd1:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q18 =
	      dcta_double_buffer_buffer_1_4[47:24];
      32'd2:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q18 =
	      dcta_double_buffer_buffer_1_4[71:48];
      32'd3:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q18 =
	      dcta_double_buffer_buffer_1_4[95:72];
      32'd4:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q18 =
	      dcta_double_buffer_buffer_1_4[119:96];
      32'd5:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q18 =
	      dcta_double_buffer_buffer_1_4[143:120];
      32'd6:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q18 =
	      dcta_double_buffer_buffer_1_4[167:144];
      32'd7:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q18 =
	      dcta_double_buffer_buffer_1_4[191:168];
      default: CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q18 =
		   24'b101010101010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(dcta_double_buffer_rblock or
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q17 or
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q18)
  begin
    case (dcta_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d729 =
	      CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q17;
      1'd1:
	  SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_4__ETC___d729 =
	      CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q18;
    endcase
  end
  always@(dcta_double_buffer_rcnt or dcta_double_buffer_buffer_0_5)
  begin
    case (dcta_double_buffer_rcnt)
      32'd0:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q19 =
	      dcta_double_buffer_buffer_0_5[23:0];
      32'd1:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q19 =
	      dcta_double_buffer_buffer_0_5[47:24];
      32'd2:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q19 =
	      dcta_double_buffer_buffer_0_5[71:48];
      32'd3:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q19 =
	      dcta_double_buffer_buffer_0_5[95:72];
      32'd4:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q19 =
	      dcta_double_buffer_buffer_0_5[119:96];
      32'd5:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q19 =
	      dcta_double_buffer_buffer_0_5[143:120];
      32'd6:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q19 =
	      dcta_double_buffer_buffer_0_5[167:144];
      32'd7:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q19 =
	      dcta_double_buffer_buffer_0_5[191:168];
      default: CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q19 =
		   24'b101010101010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(dcta_double_buffer_rcnt or dcta_double_buffer_buffer_1_5)
  begin
    case (dcta_double_buffer_rcnt)
      32'd0:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q20 =
	      dcta_double_buffer_buffer_1_5[23:0];
      32'd1:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q20 =
	      dcta_double_buffer_buffer_1_5[47:24];
      32'd2:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q20 =
	      dcta_double_buffer_buffer_1_5[71:48];
      32'd3:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q20 =
	      dcta_double_buffer_buffer_1_5[95:72];
      32'd4:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q20 =
	      dcta_double_buffer_buffer_1_5[119:96];
      32'd5:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q20 =
	      dcta_double_buffer_buffer_1_5[143:120];
      32'd6:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q20 =
	      dcta_double_buffer_buffer_1_5[167:144];
      32'd7:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q20 =
	      dcta_double_buffer_buffer_1_5[191:168];
      default: CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q20 =
		   24'b101010101010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(dcta_double_buffer_rblock or
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q19 or
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q20)
  begin
    case (dcta_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d756 =
	      CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q19;
      1'd1:
	  SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_5__ETC___d756 =
	      CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q20;
    endcase
  end
  always@(dcta_double_buffer_rcnt or dcta_double_buffer_buffer_0_6)
  begin
    case (dcta_double_buffer_rcnt)
      32'd0:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q21 =
	      dcta_double_buffer_buffer_0_6[23:0];
      32'd1:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q21 =
	      dcta_double_buffer_buffer_0_6[47:24];
      32'd2:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q21 =
	      dcta_double_buffer_buffer_0_6[71:48];
      32'd3:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q21 =
	      dcta_double_buffer_buffer_0_6[95:72];
      32'd4:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q21 =
	      dcta_double_buffer_buffer_0_6[119:96];
      32'd5:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q21 =
	      dcta_double_buffer_buffer_0_6[143:120];
      32'd6:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q21 =
	      dcta_double_buffer_buffer_0_6[167:144];
      32'd7:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q21 =
	      dcta_double_buffer_buffer_0_6[191:168];
      default: CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q21 =
		   24'b101010101010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(dcta_double_buffer_rcnt or dcta_double_buffer_buffer_1_6)
  begin
    case (dcta_double_buffer_rcnt)
      32'd0:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q22 =
	      dcta_double_buffer_buffer_1_6[23:0];
      32'd1:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q22 =
	      dcta_double_buffer_buffer_1_6[47:24];
      32'd2:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q22 =
	      dcta_double_buffer_buffer_1_6[71:48];
      32'd3:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q22 =
	      dcta_double_buffer_buffer_1_6[95:72];
      32'd4:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q22 =
	      dcta_double_buffer_buffer_1_6[119:96];
      32'd5:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q22 =
	      dcta_double_buffer_buffer_1_6[143:120];
      32'd6:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q22 =
	      dcta_double_buffer_buffer_1_6[167:144];
      32'd7:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q22 =
	      dcta_double_buffer_buffer_1_6[191:168];
      default: CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q22 =
		   24'b101010101010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(dcta_double_buffer_rblock or
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q21 or
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q22)
  begin
    case (dcta_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d783 =
	      CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q21;
      1'd1:
	  SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_6__ETC___d783 =
	      CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q22;
    endcase
  end
  always@(dcta_double_buffer_rcnt or dcta_double_buffer_buffer_0_7)
  begin
    case (dcta_double_buffer_rcnt)
      32'd0:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q23 =
	      dcta_double_buffer_buffer_0_7[23:0];
      32'd1:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q23 =
	      dcta_double_buffer_buffer_0_7[47:24];
      32'd2:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q23 =
	      dcta_double_buffer_buffer_0_7[71:48];
      32'd3:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q23 =
	      dcta_double_buffer_buffer_0_7[95:72];
      32'd4:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q23 =
	      dcta_double_buffer_buffer_0_7[119:96];
      32'd5:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q23 =
	      dcta_double_buffer_buffer_0_7[143:120];
      32'd6:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q23 =
	      dcta_double_buffer_buffer_0_7[167:144];
      32'd7:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q23 =
	      dcta_double_buffer_buffer_0_7[191:168];
      default: CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q23 =
		   24'b101010101010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(dcta_double_buffer_rcnt or dcta_double_buffer_buffer_1_7)
  begin
    case (dcta_double_buffer_rcnt)
      32'd0:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q24 =
	      dcta_double_buffer_buffer_1_7[23:0];
      32'd1:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q24 =
	      dcta_double_buffer_buffer_1_7[47:24];
      32'd2:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q24 =
	      dcta_double_buffer_buffer_1_7[71:48];
      32'd3:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q24 =
	      dcta_double_buffer_buffer_1_7[95:72];
      32'd4:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q24 =
	      dcta_double_buffer_buffer_1_7[119:96];
      32'd5:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q24 =
	      dcta_double_buffer_buffer_1_7[143:120];
      32'd6:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q24 =
	      dcta_double_buffer_buffer_1_7[167:144];
      32'd7:
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q24 =
	      dcta_double_buffer_buffer_1_7[191:168];
      default: CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q24 =
		   24'b101010101010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(dcta_double_buffer_rblock or
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q23 or
	  CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q24)
  begin
    case (dcta_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d810 =
	      CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q23;
      1'd1:
	  SEL_ARR_SEL_ARR_dcta_double_buffer_buffer_0_7__ETC___d810 =
	      CASE_dcta_double_buffer_rcnt_0_dcta_double_buf_ETC__q24;
    endcase
  end
  always@(x__h79299 or dctb_double_buffer_buffer_0_0)
  begin
    case (x__h79299)
      3'd0:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q25 =
	      dctb_double_buffer_buffer_0_0[8:0];
      3'd1:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q25 =
	      dctb_double_buffer_buffer_0_0[17:9];
      3'd2:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q25 =
	      dctb_double_buffer_buffer_0_0[26:18];
      3'd3:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q25 =
	      dctb_double_buffer_buffer_0_0[35:27];
      3'd4:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q25 =
	      dctb_double_buffer_buffer_0_0[44:36];
      3'd5:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q25 =
	      dctb_double_buffer_buffer_0_0[53:45];
      3'd6:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q25 =
	      dctb_double_buffer_buffer_0_0[62:54];
      3'd7:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q25 =
	      dctb_double_buffer_buffer_0_0[71:63];
    endcase
  end
  always@(x__h79299 or dctb_double_buffer_buffer_1_0)
  begin
    case (x__h79299)
      3'd0:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q26 =
	      dctb_double_buffer_buffer_1_0[8:0];
      3'd1:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q26 =
	      dctb_double_buffer_buffer_1_0[17:9];
      3'd2:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q26 =
	      dctb_double_buffer_buffer_1_0[26:18];
      3'd3:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q26 =
	      dctb_double_buffer_buffer_1_0[35:27];
      3'd4:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q26 =
	      dctb_double_buffer_buffer_1_0[44:36];
      3'd5:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q26 =
	      dctb_double_buffer_buffer_1_0[53:45];
      3'd6:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q26 =
	      dctb_double_buffer_buffer_1_0[62:54];
      3'd7:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q26 =
	      dctb_double_buffer_buffer_1_0[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x9299_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q25 or
	  CASE_x9299_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q26)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1048 =
	      CASE_x9299_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q25;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1048 =
	      CASE_x9299_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q26;
    endcase
  end
  always@(x__h79299 or dctb_double_buffer_buffer_0_1)
  begin
    case (x__h79299)
      3'd0:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q27 =
	      dctb_double_buffer_buffer_0_1[8:0];
      3'd1:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q27 =
	      dctb_double_buffer_buffer_0_1[17:9];
      3'd2:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q27 =
	      dctb_double_buffer_buffer_0_1[26:18];
      3'd3:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q27 =
	      dctb_double_buffer_buffer_0_1[35:27];
      3'd4:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q27 =
	      dctb_double_buffer_buffer_0_1[44:36];
      3'd5:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q27 =
	      dctb_double_buffer_buffer_0_1[53:45];
      3'd6:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q27 =
	      dctb_double_buffer_buffer_0_1[62:54];
      3'd7:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q27 =
	      dctb_double_buffer_buffer_0_1[71:63];
    endcase
  end
  always@(x__h79299 or dctb_double_buffer_buffer_1_1)
  begin
    case (x__h79299)
      3'd0:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q28 =
	      dctb_double_buffer_buffer_1_1[8:0];
      3'd1:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q28 =
	      dctb_double_buffer_buffer_1_1[17:9];
      3'd2:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q28 =
	      dctb_double_buffer_buffer_1_1[26:18];
      3'd3:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q28 =
	      dctb_double_buffer_buffer_1_1[35:27];
      3'd4:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q28 =
	      dctb_double_buffer_buffer_1_1[44:36];
      3'd5:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q28 =
	      dctb_double_buffer_buffer_1_1[53:45];
      3'd6:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q28 =
	      dctb_double_buffer_buffer_1_1[62:54];
      3'd7:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q28 =
	      dctb_double_buffer_buffer_1_1[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x9299_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q27 or
	  CASE_x9299_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q28)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1072 =
	      CASE_x9299_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q27;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1072 =
	      CASE_x9299_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q28;
    endcase
  end
  always@(x__h79299 or dctb_double_buffer_buffer_0_3)
  begin
    case (x__h79299)
      3'd0:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q29 =
	      dctb_double_buffer_buffer_0_3[8:0];
      3'd1:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q29 =
	      dctb_double_buffer_buffer_0_3[17:9];
      3'd2:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q29 =
	      dctb_double_buffer_buffer_0_3[26:18];
      3'd3:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q29 =
	      dctb_double_buffer_buffer_0_3[35:27];
      3'd4:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q29 =
	      dctb_double_buffer_buffer_0_3[44:36];
      3'd5:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q29 =
	      dctb_double_buffer_buffer_0_3[53:45];
      3'd6:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q29 =
	      dctb_double_buffer_buffer_0_3[62:54];
      3'd7:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q29 =
	      dctb_double_buffer_buffer_0_3[71:63];
    endcase
  end
  always@(x__h79299 or dctb_double_buffer_buffer_1_3)
  begin
    case (x__h79299)
      3'd0:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q30 =
	      dctb_double_buffer_buffer_1_3[8:0];
      3'd1:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q30 =
	      dctb_double_buffer_buffer_1_3[17:9];
      3'd2:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q30 =
	      dctb_double_buffer_buffer_1_3[26:18];
      3'd3:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q30 =
	      dctb_double_buffer_buffer_1_3[35:27];
      3'd4:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q30 =
	      dctb_double_buffer_buffer_1_3[44:36];
      3'd5:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q30 =
	      dctb_double_buffer_buffer_1_3[53:45];
      3'd6:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q30 =
	      dctb_double_buffer_buffer_1_3[62:54];
      3'd7:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q30 =
	      dctb_double_buffer_buffer_1_3[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x9299_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q29 or
	  CASE_x9299_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q30)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1120 =
	      CASE_x9299_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q29;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1120 =
	      CASE_x9299_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q30;
    endcase
  end
  always@(x__h79299 or dctb_double_buffer_buffer_0_2)
  begin
    case (x__h79299)
      3'd0:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q31 =
	      dctb_double_buffer_buffer_0_2[8:0];
      3'd1:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q31 =
	      dctb_double_buffer_buffer_0_2[17:9];
      3'd2:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q31 =
	      dctb_double_buffer_buffer_0_2[26:18];
      3'd3:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q31 =
	      dctb_double_buffer_buffer_0_2[35:27];
      3'd4:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q31 =
	      dctb_double_buffer_buffer_0_2[44:36];
      3'd5:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q31 =
	      dctb_double_buffer_buffer_0_2[53:45];
      3'd6:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q31 =
	      dctb_double_buffer_buffer_0_2[62:54];
      3'd7:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q31 =
	      dctb_double_buffer_buffer_0_2[71:63];
    endcase
  end
  always@(x__h79299 or dctb_double_buffer_buffer_1_2)
  begin
    case (x__h79299)
      3'd0:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q32 =
	      dctb_double_buffer_buffer_1_2[8:0];
      3'd1:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q32 =
	      dctb_double_buffer_buffer_1_2[17:9];
      3'd2:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q32 =
	      dctb_double_buffer_buffer_1_2[26:18];
      3'd3:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q32 =
	      dctb_double_buffer_buffer_1_2[35:27];
      3'd4:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q32 =
	      dctb_double_buffer_buffer_1_2[44:36];
      3'd5:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q32 =
	      dctb_double_buffer_buffer_1_2[53:45];
      3'd6:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q32 =
	      dctb_double_buffer_buffer_1_2[62:54];
      3'd7:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q32 =
	      dctb_double_buffer_buffer_1_2[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x9299_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q31 or
	  CASE_x9299_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q32)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1096 =
	      CASE_x9299_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q31;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1096 =
	      CASE_x9299_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q32;
    endcase
  end
  always@(x__h79299 or dctb_double_buffer_buffer_0_4)
  begin
    case (x__h79299)
      3'd0:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q33 =
	      dctb_double_buffer_buffer_0_4[8:0];
      3'd1:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q33 =
	      dctb_double_buffer_buffer_0_4[17:9];
      3'd2:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q33 =
	      dctb_double_buffer_buffer_0_4[26:18];
      3'd3:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q33 =
	      dctb_double_buffer_buffer_0_4[35:27];
      3'd4:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q33 =
	      dctb_double_buffer_buffer_0_4[44:36];
      3'd5:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q33 =
	      dctb_double_buffer_buffer_0_4[53:45];
      3'd6:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q33 =
	      dctb_double_buffer_buffer_0_4[62:54];
      3'd7:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q33 =
	      dctb_double_buffer_buffer_0_4[71:63];
    endcase
  end
  always@(x__h79299 or dctb_double_buffer_buffer_1_4)
  begin
    case (x__h79299)
      3'd0:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q34 =
	      dctb_double_buffer_buffer_1_4[8:0];
      3'd1:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q34 =
	      dctb_double_buffer_buffer_1_4[17:9];
      3'd2:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q34 =
	      dctb_double_buffer_buffer_1_4[26:18];
      3'd3:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q34 =
	      dctb_double_buffer_buffer_1_4[35:27];
      3'd4:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q34 =
	      dctb_double_buffer_buffer_1_4[44:36];
      3'd5:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q34 =
	      dctb_double_buffer_buffer_1_4[53:45];
      3'd6:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q34 =
	      dctb_double_buffer_buffer_1_4[62:54];
      3'd7:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q34 =
	      dctb_double_buffer_buffer_1_4[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x9299_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q33 or
	  CASE_x9299_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q34)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1144 =
	      CASE_x9299_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q33;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1144 =
	      CASE_x9299_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q34;
    endcase
  end
  always@(x__h79299 or dctb_double_buffer_buffer_0_5)
  begin
    case (x__h79299)
      3'd0:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q35 =
	      dctb_double_buffer_buffer_0_5[8:0];
      3'd1:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q35 =
	      dctb_double_buffer_buffer_0_5[17:9];
      3'd2:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q35 =
	      dctb_double_buffer_buffer_0_5[26:18];
      3'd3:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q35 =
	      dctb_double_buffer_buffer_0_5[35:27];
      3'd4:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q35 =
	      dctb_double_buffer_buffer_0_5[44:36];
      3'd5:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q35 =
	      dctb_double_buffer_buffer_0_5[53:45];
      3'd6:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q35 =
	      dctb_double_buffer_buffer_0_5[62:54];
      3'd7:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q35 =
	      dctb_double_buffer_buffer_0_5[71:63];
    endcase
  end
  always@(x__h79299 or dctb_double_buffer_buffer_1_5)
  begin
    case (x__h79299)
      3'd0:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q36 =
	      dctb_double_buffer_buffer_1_5[8:0];
      3'd1:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q36 =
	      dctb_double_buffer_buffer_1_5[17:9];
      3'd2:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q36 =
	      dctb_double_buffer_buffer_1_5[26:18];
      3'd3:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q36 =
	      dctb_double_buffer_buffer_1_5[35:27];
      3'd4:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q36 =
	      dctb_double_buffer_buffer_1_5[44:36];
      3'd5:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q36 =
	      dctb_double_buffer_buffer_1_5[53:45];
      3'd6:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q36 =
	      dctb_double_buffer_buffer_1_5[62:54];
      3'd7:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q36 =
	      dctb_double_buffer_buffer_1_5[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x9299_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q35 or
	  CASE_x9299_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q36)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1168 =
	      CASE_x9299_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q35;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1168 =
	      CASE_x9299_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q36;
    endcase
  end
  always@(x__h79299 or dctb_double_buffer_buffer_0_6)
  begin
    case (x__h79299)
      3'd0:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q37 =
	      dctb_double_buffer_buffer_0_6[8:0];
      3'd1:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q37 =
	      dctb_double_buffer_buffer_0_6[17:9];
      3'd2:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q37 =
	      dctb_double_buffer_buffer_0_6[26:18];
      3'd3:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q37 =
	      dctb_double_buffer_buffer_0_6[35:27];
      3'd4:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q37 =
	      dctb_double_buffer_buffer_0_6[44:36];
      3'd5:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q37 =
	      dctb_double_buffer_buffer_0_6[53:45];
      3'd6:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q37 =
	      dctb_double_buffer_buffer_0_6[62:54];
      3'd7:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q37 =
	      dctb_double_buffer_buffer_0_6[71:63];
    endcase
  end
  always@(x__h79299 or dctb_double_buffer_buffer_1_6)
  begin
    case (x__h79299)
      3'd0:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q38 =
	      dctb_double_buffer_buffer_1_6[8:0];
      3'd1:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q38 =
	      dctb_double_buffer_buffer_1_6[17:9];
      3'd2:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q38 =
	      dctb_double_buffer_buffer_1_6[26:18];
      3'd3:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q38 =
	      dctb_double_buffer_buffer_1_6[35:27];
      3'd4:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q38 =
	      dctb_double_buffer_buffer_1_6[44:36];
      3'd5:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q38 =
	      dctb_double_buffer_buffer_1_6[53:45];
      3'd6:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q38 =
	      dctb_double_buffer_buffer_1_6[62:54];
      3'd7:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q38 =
	      dctb_double_buffer_buffer_1_6[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x9299_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q37 or
	  CASE_x9299_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q38)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1192 =
	      CASE_x9299_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q37;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1192 =
	      CASE_x9299_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q38;
    endcase
  end
  always@(x__h79299 or dctb_double_buffer_buffer_0_7)
  begin
    case (x__h79299)
      3'd0:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q39 =
	      dctb_double_buffer_buffer_0_7[8:0];
      3'd1:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q39 =
	      dctb_double_buffer_buffer_0_7[17:9];
      3'd2:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q39 =
	      dctb_double_buffer_buffer_0_7[26:18];
      3'd3:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q39 =
	      dctb_double_buffer_buffer_0_7[35:27];
      3'd4:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q39 =
	      dctb_double_buffer_buffer_0_7[44:36];
      3'd5:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q39 =
	      dctb_double_buffer_buffer_0_7[53:45];
      3'd6:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q39 =
	      dctb_double_buffer_buffer_0_7[62:54];
      3'd7:
	  CASE_x9299_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q39 =
	      dctb_double_buffer_buffer_0_7[71:63];
    endcase
  end
  always@(x__h79299 or dctb_double_buffer_buffer_1_7)
  begin
    case (x__h79299)
      3'd0:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q40 =
	      dctb_double_buffer_buffer_1_7[8:0];
      3'd1:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q40 =
	      dctb_double_buffer_buffer_1_7[17:9];
      3'd2:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q40 =
	      dctb_double_buffer_buffer_1_7[26:18];
      3'd3:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q40 =
	      dctb_double_buffer_buffer_1_7[35:27];
      3'd4:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q40 =
	      dctb_double_buffer_buffer_1_7[44:36];
      3'd5:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q40 =
	      dctb_double_buffer_buffer_1_7[53:45];
      3'd6:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q40 =
	      dctb_double_buffer_buffer_1_7[62:54];
      3'd7:
	  CASE_x9299_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q40 =
	      dctb_double_buffer_buffer_1_7[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x9299_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q39 or
	  CASE_x9299_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q40)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1216 =
	      CASE_x9299_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q39;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1216 =
	      CASE_x9299_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q40;
    endcase
  end
  always@(x__h86252 or dctb_double_buffer_buffer_0_0)
  begin
    case (x__h86252)
      3'd0:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q41 =
	      dctb_double_buffer_buffer_0_0[8:0];
      3'd1:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q41 =
	      dctb_double_buffer_buffer_0_0[17:9];
      3'd2:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q41 =
	      dctb_double_buffer_buffer_0_0[26:18];
      3'd3:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q41 =
	      dctb_double_buffer_buffer_0_0[35:27];
      3'd4:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q41 =
	      dctb_double_buffer_buffer_0_0[44:36];
      3'd5:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q41 =
	      dctb_double_buffer_buffer_0_0[53:45];
      3'd6:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q41 =
	      dctb_double_buffer_buffer_0_0[62:54];
      3'd7:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q41 =
	      dctb_double_buffer_buffer_0_0[71:63];
    endcase
  end
  always@(x__h86252 or dctb_double_buffer_buffer_1_0)
  begin
    case (x__h86252)
      3'd0:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q42 =
	      dctb_double_buffer_buffer_1_0[8:0];
      3'd1:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q42 =
	      dctb_double_buffer_buffer_1_0[17:9];
      3'd2:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q42 =
	      dctb_double_buffer_buffer_1_0[26:18];
      3'd3:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q42 =
	      dctb_double_buffer_buffer_1_0[35:27];
      3'd4:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q42 =
	      dctb_double_buffer_buffer_1_0[44:36];
      3'd5:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q42 =
	      dctb_double_buffer_buffer_1_0[53:45];
      3'd6:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q42 =
	      dctb_double_buffer_buffer_1_0[62:54];
      3'd7:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q42 =
	      dctb_double_buffer_buffer_1_0[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x6252_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q41 or
	  CASE_x6252_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q42)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1226 =
	      CASE_x6252_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q41;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1226 =
	      CASE_x6252_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q42;
    endcase
  end
  always@(x__h86252 or dctb_double_buffer_buffer_0_1)
  begin
    case (x__h86252)
      3'd0:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q43 =
	      dctb_double_buffer_buffer_0_1[8:0];
      3'd1:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q43 =
	      dctb_double_buffer_buffer_0_1[17:9];
      3'd2:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q43 =
	      dctb_double_buffer_buffer_0_1[26:18];
      3'd3:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q43 =
	      dctb_double_buffer_buffer_0_1[35:27];
      3'd4:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q43 =
	      dctb_double_buffer_buffer_0_1[44:36];
      3'd5:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q43 =
	      dctb_double_buffer_buffer_0_1[53:45];
      3'd6:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q43 =
	      dctb_double_buffer_buffer_0_1[62:54];
      3'd7:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q43 =
	      dctb_double_buffer_buffer_0_1[71:63];
    endcase
  end
  always@(x__h86252 or dctb_double_buffer_buffer_1_1)
  begin
    case (x__h86252)
      3'd0:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q44 =
	      dctb_double_buffer_buffer_1_1[8:0];
      3'd1:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q44 =
	      dctb_double_buffer_buffer_1_1[17:9];
      3'd2:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q44 =
	      dctb_double_buffer_buffer_1_1[26:18];
      3'd3:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q44 =
	      dctb_double_buffer_buffer_1_1[35:27];
      3'd4:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q44 =
	      dctb_double_buffer_buffer_1_1[44:36];
      3'd5:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q44 =
	      dctb_double_buffer_buffer_1_1[53:45];
      3'd6:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q44 =
	      dctb_double_buffer_buffer_1_1[62:54];
      3'd7:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q44 =
	      dctb_double_buffer_buffer_1_1[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x6252_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q43 or
	  CASE_x6252_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q44)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1230 =
	      CASE_x6252_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q43;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1230 =
	      CASE_x6252_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q44;
    endcase
  end
  always@(x__h86252 or dctb_double_buffer_buffer_0_2)
  begin
    case (x__h86252)
      3'd0:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q45 =
	      dctb_double_buffer_buffer_0_2[8:0];
      3'd1:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q45 =
	      dctb_double_buffer_buffer_0_2[17:9];
      3'd2:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q45 =
	      dctb_double_buffer_buffer_0_2[26:18];
      3'd3:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q45 =
	      dctb_double_buffer_buffer_0_2[35:27];
      3'd4:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q45 =
	      dctb_double_buffer_buffer_0_2[44:36];
      3'd5:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q45 =
	      dctb_double_buffer_buffer_0_2[53:45];
      3'd6:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q45 =
	      dctb_double_buffer_buffer_0_2[62:54];
      3'd7:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q45 =
	      dctb_double_buffer_buffer_0_2[71:63];
    endcase
  end
  always@(x__h86252 or dctb_double_buffer_buffer_1_2)
  begin
    case (x__h86252)
      3'd0:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q46 =
	      dctb_double_buffer_buffer_1_2[8:0];
      3'd1:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q46 =
	      dctb_double_buffer_buffer_1_2[17:9];
      3'd2:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q46 =
	      dctb_double_buffer_buffer_1_2[26:18];
      3'd3:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q46 =
	      dctb_double_buffer_buffer_1_2[35:27];
      3'd4:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q46 =
	      dctb_double_buffer_buffer_1_2[44:36];
      3'd5:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q46 =
	      dctb_double_buffer_buffer_1_2[53:45];
      3'd6:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q46 =
	      dctb_double_buffer_buffer_1_2[62:54];
      3'd7:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q46 =
	      dctb_double_buffer_buffer_1_2[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x6252_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q45 or
	  CASE_x6252_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q46)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1234 =
	      CASE_x6252_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q45;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1234 =
	      CASE_x6252_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q46;
    endcase
  end
  always@(x__h86252 or dctb_double_buffer_buffer_0_3)
  begin
    case (x__h86252)
      3'd0:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q47 =
	      dctb_double_buffer_buffer_0_3[8:0];
      3'd1:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q47 =
	      dctb_double_buffer_buffer_0_3[17:9];
      3'd2:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q47 =
	      dctb_double_buffer_buffer_0_3[26:18];
      3'd3:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q47 =
	      dctb_double_buffer_buffer_0_3[35:27];
      3'd4:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q47 =
	      dctb_double_buffer_buffer_0_3[44:36];
      3'd5:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q47 =
	      dctb_double_buffer_buffer_0_3[53:45];
      3'd6:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q47 =
	      dctb_double_buffer_buffer_0_3[62:54];
      3'd7:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q47 =
	      dctb_double_buffer_buffer_0_3[71:63];
    endcase
  end
  always@(x__h86252 or dctb_double_buffer_buffer_1_3)
  begin
    case (x__h86252)
      3'd0:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q48 =
	      dctb_double_buffer_buffer_1_3[8:0];
      3'd1:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q48 =
	      dctb_double_buffer_buffer_1_3[17:9];
      3'd2:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q48 =
	      dctb_double_buffer_buffer_1_3[26:18];
      3'd3:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q48 =
	      dctb_double_buffer_buffer_1_3[35:27];
      3'd4:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q48 =
	      dctb_double_buffer_buffer_1_3[44:36];
      3'd5:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q48 =
	      dctb_double_buffer_buffer_1_3[53:45];
      3'd6:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q48 =
	      dctb_double_buffer_buffer_1_3[62:54];
      3'd7:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q48 =
	      dctb_double_buffer_buffer_1_3[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x6252_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q47 or
	  CASE_x6252_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q48)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1238 =
	      CASE_x6252_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q47;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1238 =
	      CASE_x6252_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q48;
    endcase
  end
  always@(x__h86252 or dctb_double_buffer_buffer_0_4)
  begin
    case (x__h86252)
      3'd0:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q49 =
	      dctb_double_buffer_buffer_0_4[8:0];
      3'd1:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q49 =
	      dctb_double_buffer_buffer_0_4[17:9];
      3'd2:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q49 =
	      dctb_double_buffer_buffer_0_4[26:18];
      3'd3:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q49 =
	      dctb_double_buffer_buffer_0_4[35:27];
      3'd4:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q49 =
	      dctb_double_buffer_buffer_0_4[44:36];
      3'd5:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q49 =
	      dctb_double_buffer_buffer_0_4[53:45];
      3'd6:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q49 =
	      dctb_double_buffer_buffer_0_4[62:54];
      3'd7:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q49 =
	      dctb_double_buffer_buffer_0_4[71:63];
    endcase
  end
  always@(x__h86252 or dctb_double_buffer_buffer_1_4)
  begin
    case (x__h86252)
      3'd0:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q50 =
	      dctb_double_buffer_buffer_1_4[8:0];
      3'd1:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q50 =
	      dctb_double_buffer_buffer_1_4[17:9];
      3'd2:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q50 =
	      dctb_double_buffer_buffer_1_4[26:18];
      3'd3:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q50 =
	      dctb_double_buffer_buffer_1_4[35:27];
      3'd4:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q50 =
	      dctb_double_buffer_buffer_1_4[44:36];
      3'd5:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q50 =
	      dctb_double_buffer_buffer_1_4[53:45];
      3'd6:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q50 =
	      dctb_double_buffer_buffer_1_4[62:54];
      3'd7:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q50 =
	      dctb_double_buffer_buffer_1_4[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x6252_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q49 or
	  CASE_x6252_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q50)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1242 =
	      CASE_x6252_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q49;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1242 =
	      CASE_x6252_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q50;
    endcase
  end
  always@(x__h86252 or dctb_double_buffer_buffer_0_5)
  begin
    case (x__h86252)
      3'd0:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q51 =
	      dctb_double_buffer_buffer_0_5[8:0];
      3'd1:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q51 =
	      dctb_double_buffer_buffer_0_5[17:9];
      3'd2:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q51 =
	      dctb_double_buffer_buffer_0_5[26:18];
      3'd3:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q51 =
	      dctb_double_buffer_buffer_0_5[35:27];
      3'd4:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q51 =
	      dctb_double_buffer_buffer_0_5[44:36];
      3'd5:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q51 =
	      dctb_double_buffer_buffer_0_5[53:45];
      3'd6:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q51 =
	      dctb_double_buffer_buffer_0_5[62:54];
      3'd7:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q51 =
	      dctb_double_buffer_buffer_0_5[71:63];
    endcase
  end
  always@(x__h86252 or dctb_double_buffer_buffer_1_5)
  begin
    case (x__h86252)
      3'd0:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q52 =
	      dctb_double_buffer_buffer_1_5[8:0];
      3'd1:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q52 =
	      dctb_double_buffer_buffer_1_5[17:9];
      3'd2:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q52 =
	      dctb_double_buffer_buffer_1_5[26:18];
      3'd3:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q52 =
	      dctb_double_buffer_buffer_1_5[35:27];
      3'd4:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q52 =
	      dctb_double_buffer_buffer_1_5[44:36];
      3'd5:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q52 =
	      dctb_double_buffer_buffer_1_5[53:45];
      3'd6:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q52 =
	      dctb_double_buffer_buffer_1_5[62:54];
      3'd7:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q52 =
	      dctb_double_buffer_buffer_1_5[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x6252_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q51 or
	  CASE_x6252_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q52)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1246 =
	      CASE_x6252_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q51;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1246 =
	      CASE_x6252_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q52;
    endcase
  end
  always@(x__h86252 or dctb_double_buffer_buffer_0_6)
  begin
    case (x__h86252)
      3'd0:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q53 =
	      dctb_double_buffer_buffer_0_6[8:0];
      3'd1:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q53 =
	      dctb_double_buffer_buffer_0_6[17:9];
      3'd2:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q53 =
	      dctb_double_buffer_buffer_0_6[26:18];
      3'd3:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q53 =
	      dctb_double_buffer_buffer_0_6[35:27];
      3'd4:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q53 =
	      dctb_double_buffer_buffer_0_6[44:36];
      3'd5:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q53 =
	      dctb_double_buffer_buffer_0_6[53:45];
      3'd6:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q53 =
	      dctb_double_buffer_buffer_0_6[62:54];
      3'd7:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q53 =
	      dctb_double_buffer_buffer_0_6[71:63];
    endcase
  end
  always@(x__h86252 or dctb_double_buffer_buffer_1_6)
  begin
    case (x__h86252)
      3'd0:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q54 =
	      dctb_double_buffer_buffer_1_6[8:0];
      3'd1:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q54 =
	      dctb_double_buffer_buffer_1_6[17:9];
      3'd2:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q54 =
	      dctb_double_buffer_buffer_1_6[26:18];
      3'd3:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q54 =
	      dctb_double_buffer_buffer_1_6[35:27];
      3'd4:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q54 =
	      dctb_double_buffer_buffer_1_6[44:36];
      3'd5:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q54 =
	      dctb_double_buffer_buffer_1_6[53:45];
      3'd6:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q54 =
	      dctb_double_buffer_buffer_1_6[62:54];
      3'd7:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q54 =
	      dctb_double_buffer_buffer_1_6[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x6252_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q53 or
	  CASE_x6252_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q54)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1250 =
	      CASE_x6252_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q53;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1250 =
	      CASE_x6252_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q54;
    endcase
  end
  always@(x__h86252 or dctb_double_buffer_buffer_0_7)
  begin
    case (x__h86252)
      3'd0:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q55 =
	      dctb_double_buffer_buffer_0_7[8:0];
      3'd1:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q55 =
	      dctb_double_buffer_buffer_0_7[17:9];
      3'd2:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q55 =
	      dctb_double_buffer_buffer_0_7[26:18];
      3'd3:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q55 =
	      dctb_double_buffer_buffer_0_7[35:27];
      3'd4:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q55 =
	      dctb_double_buffer_buffer_0_7[44:36];
      3'd5:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q55 =
	      dctb_double_buffer_buffer_0_7[53:45];
      3'd6:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q55 =
	      dctb_double_buffer_buffer_0_7[62:54];
      3'd7:
	  CASE_x6252_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q55 =
	      dctb_double_buffer_buffer_0_7[71:63];
    endcase
  end
  always@(x__h86252 or dctb_double_buffer_buffer_1_7)
  begin
    case (x__h86252)
      3'd0:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q56 =
	      dctb_double_buffer_buffer_1_7[8:0];
      3'd1:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q56 =
	      dctb_double_buffer_buffer_1_7[17:9];
      3'd2:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q56 =
	      dctb_double_buffer_buffer_1_7[26:18];
      3'd3:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q56 =
	      dctb_double_buffer_buffer_1_7[35:27];
      3'd4:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q56 =
	      dctb_double_buffer_buffer_1_7[44:36];
      3'd5:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q56 =
	      dctb_double_buffer_buffer_1_7[53:45];
      3'd6:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q56 =
	      dctb_double_buffer_buffer_1_7[62:54];
      3'd7:
	  CASE_x6252_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q56 =
	      dctb_double_buffer_buffer_1_7[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x6252_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q55 or
	  CASE_x6252_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q56)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1254 =
	      CASE_x6252_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q55;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1254 =
	      CASE_x6252_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q56;
    endcase
  end
  always@(x__h86978 or dctb_double_buffer_buffer_0_0)
  begin
    case (x__h86978)
      3'd0:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q57 =
	      dctb_double_buffer_buffer_0_0[8:0];
      3'd1:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q57 =
	      dctb_double_buffer_buffer_0_0[17:9];
      3'd2:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q57 =
	      dctb_double_buffer_buffer_0_0[26:18];
      3'd3:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q57 =
	      dctb_double_buffer_buffer_0_0[35:27];
      3'd4:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q57 =
	      dctb_double_buffer_buffer_0_0[44:36];
      3'd5:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q57 =
	      dctb_double_buffer_buffer_0_0[53:45];
      3'd6:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q57 =
	      dctb_double_buffer_buffer_0_0[62:54];
      3'd7:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q57 =
	      dctb_double_buffer_buffer_0_0[71:63];
    endcase
  end
  always@(x__h86978 or dctb_double_buffer_buffer_1_0)
  begin
    case (x__h86978)
      3'd0:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q58 =
	      dctb_double_buffer_buffer_1_0[8:0];
      3'd1:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q58 =
	      dctb_double_buffer_buffer_1_0[17:9];
      3'd2:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q58 =
	      dctb_double_buffer_buffer_1_0[26:18];
      3'd3:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q58 =
	      dctb_double_buffer_buffer_1_0[35:27];
      3'd4:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q58 =
	      dctb_double_buffer_buffer_1_0[44:36];
      3'd5:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q58 =
	      dctb_double_buffer_buffer_1_0[53:45];
      3'd6:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q58 =
	      dctb_double_buffer_buffer_1_0[62:54];
      3'd7:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q58 =
	      dctb_double_buffer_buffer_1_0[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x6978_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q57 or
	  CASE_x6978_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q58)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1264 =
	      CASE_x6978_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q57;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1264 =
	      CASE_x6978_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q58;
    endcase
  end
  always@(x__h86978 or dctb_double_buffer_buffer_0_1)
  begin
    case (x__h86978)
      3'd0:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q59 =
	      dctb_double_buffer_buffer_0_1[8:0];
      3'd1:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q59 =
	      dctb_double_buffer_buffer_0_1[17:9];
      3'd2:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q59 =
	      dctb_double_buffer_buffer_0_1[26:18];
      3'd3:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q59 =
	      dctb_double_buffer_buffer_0_1[35:27];
      3'd4:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q59 =
	      dctb_double_buffer_buffer_0_1[44:36];
      3'd5:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q59 =
	      dctb_double_buffer_buffer_0_1[53:45];
      3'd6:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q59 =
	      dctb_double_buffer_buffer_0_1[62:54];
      3'd7:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q59 =
	      dctb_double_buffer_buffer_0_1[71:63];
    endcase
  end
  always@(x__h86978 or dctb_double_buffer_buffer_1_1)
  begin
    case (x__h86978)
      3'd0:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q60 =
	      dctb_double_buffer_buffer_1_1[8:0];
      3'd1:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q60 =
	      dctb_double_buffer_buffer_1_1[17:9];
      3'd2:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q60 =
	      dctb_double_buffer_buffer_1_1[26:18];
      3'd3:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q60 =
	      dctb_double_buffer_buffer_1_1[35:27];
      3'd4:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q60 =
	      dctb_double_buffer_buffer_1_1[44:36];
      3'd5:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q60 =
	      dctb_double_buffer_buffer_1_1[53:45];
      3'd6:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q60 =
	      dctb_double_buffer_buffer_1_1[62:54];
      3'd7:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q60 =
	      dctb_double_buffer_buffer_1_1[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x6978_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q59 or
	  CASE_x6978_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q60)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1268 =
	      CASE_x6978_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q59;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1268 =
	      CASE_x6978_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q60;
    endcase
  end
  always@(x__h86978 or dctb_double_buffer_buffer_0_2)
  begin
    case (x__h86978)
      3'd0:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q61 =
	      dctb_double_buffer_buffer_0_2[8:0];
      3'd1:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q61 =
	      dctb_double_buffer_buffer_0_2[17:9];
      3'd2:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q61 =
	      dctb_double_buffer_buffer_0_2[26:18];
      3'd3:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q61 =
	      dctb_double_buffer_buffer_0_2[35:27];
      3'd4:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q61 =
	      dctb_double_buffer_buffer_0_2[44:36];
      3'd5:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q61 =
	      dctb_double_buffer_buffer_0_2[53:45];
      3'd6:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q61 =
	      dctb_double_buffer_buffer_0_2[62:54];
      3'd7:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q61 =
	      dctb_double_buffer_buffer_0_2[71:63];
    endcase
  end
  always@(x__h86978 or dctb_double_buffer_buffer_1_2)
  begin
    case (x__h86978)
      3'd0:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q62 =
	      dctb_double_buffer_buffer_1_2[8:0];
      3'd1:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q62 =
	      dctb_double_buffer_buffer_1_2[17:9];
      3'd2:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q62 =
	      dctb_double_buffer_buffer_1_2[26:18];
      3'd3:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q62 =
	      dctb_double_buffer_buffer_1_2[35:27];
      3'd4:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q62 =
	      dctb_double_buffer_buffer_1_2[44:36];
      3'd5:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q62 =
	      dctb_double_buffer_buffer_1_2[53:45];
      3'd6:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q62 =
	      dctb_double_buffer_buffer_1_2[62:54];
      3'd7:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q62 =
	      dctb_double_buffer_buffer_1_2[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x6978_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q61 or
	  CASE_x6978_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q62)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1272 =
	      CASE_x6978_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q61;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1272 =
	      CASE_x6978_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q62;
    endcase
  end
  always@(x__h86978 or dctb_double_buffer_buffer_0_3)
  begin
    case (x__h86978)
      3'd0:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q63 =
	      dctb_double_buffer_buffer_0_3[8:0];
      3'd1:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q63 =
	      dctb_double_buffer_buffer_0_3[17:9];
      3'd2:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q63 =
	      dctb_double_buffer_buffer_0_3[26:18];
      3'd3:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q63 =
	      dctb_double_buffer_buffer_0_3[35:27];
      3'd4:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q63 =
	      dctb_double_buffer_buffer_0_3[44:36];
      3'd5:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q63 =
	      dctb_double_buffer_buffer_0_3[53:45];
      3'd6:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q63 =
	      dctb_double_buffer_buffer_0_3[62:54];
      3'd7:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q63 =
	      dctb_double_buffer_buffer_0_3[71:63];
    endcase
  end
  always@(x__h86978 or dctb_double_buffer_buffer_1_3)
  begin
    case (x__h86978)
      3'd0:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q64 =
	      dctb_double_buffer_buffer_1_3[8:0];
      3'd1:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q64 =
	      dctb_double_buffer_buffer_1_3[17:9];
      3'd2:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q64 =
	      dctb_double_buffer_buffer_1_3[26:18];
      3'd3:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q64 =
	      dctb_double_buffer_buffer_1_3[35:27];
      3'd4:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q64 =
	      dctb_double_buffer_buffer_1_3[44:36];
      3'd5:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q64 =
	      dctb_double_buffer_buffer_1_3[53:45];
      3'd6:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q64 =
	      dctb_double_buffer_buffer_1_3[62:54];
      3'd7:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q64 =
	      dctb_double_buffer_buffer_1_3[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x6978_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q63 or
	  CASE_x6978_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q64)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1276 =
	      CASE_x6978_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q63;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1276 =
	      CASE_x6978_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q64;
    endcase
  end
  always@(x__h86978 or dctb_double_buffer_buffer_0_4)
  begin
    case (x__h86978)
      3'd0:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q65 =
	      dctb_double_buffer_buffer_0_4[8:0];
      3'd1:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q65 =
	      dctb_double_buffer_buffer_0_4[17:9];
      3'd2:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q65 =
	      dctb_double_buffer_buffer_0_4[26:18];
      3'd3:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q65 =
	      dctb_double_buffer_buffer_0_4[35:27];
      3'd4:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q65 =
	      dctb_double_buffer_buffer_0_4[44:36];
      3'd5:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q65 =
	      dctb_double_buffer_buffer_0_4[53:45];
      3'd6:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q65 =
	      dctb_double_buffer_buffer_0_4[62:54];
      3'd7:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q65 =
	      dctb_double_buffer_buffer_0_4[71:63];
    endcase
  end
  always@(x__h86978 or dctb_double_buffer_buffer_1_4)
  begin
    case (x__h86978)
      3'd0:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q66 =
	      dctb_double_buffer_buffer_1_4[8:0];
      3'd1:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q66 =
	      dctb_double_buffer_buffer_1_4[17:9];
      3'd2:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q66 =
	      dctb_double_buffer_buffer_1_4[26:18];
      3'd3:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q66 =
	      dctb_double_buffer_buffer_1_4[35:27];
      3'd4:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q66 =
	      dctb_double_buffer_buffer_1_4[44:36];
      3'd5:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q66 =
	      dctb_double_buffer_buffer_1_4[53:45];
      3'd6:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q66 =
	      dctb_double_buffer_buffer_1_4[62:54];
      3'd7:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q66 =
	      dctb_double_buffer_buffer_1_4[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x6978_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q65 or
	  CASE_x6978_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q66)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1280 =
	      CASE_x6978_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q65;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1280 =
	      CASE_x6978_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q66;
    endcase
  end
  always@(x__h86978 or dctb_double_buffer_buffer_0_5)
  begin
    case (x__h86978)
      3'd0:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q67 =
	      dctb_double_buffer_buffer_0_5[8:0];
      3'd1:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q67 =
	      dctb_double_buffer_buffer_0_5[17:9];
      3'd2:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q67 =
	      dctb_double_buffer_buffer_0_5[26:18];
      3'd3:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q67 =
	      dctb_double_buffer_buffer_0_5[35:27];
      3'd4:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q67 =
	      dctb_double_buffer_buffer_0_5[44:36];
      3'd5:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q67 =
	      dctb_double_buffer_buffer_0_5[53:45];
      3'd6:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q67 =
	      dctb_double_buffer_buffer_0_5[62:54];
      3'd7:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q67 =
	      dctb_double_buffer_buffer_0_5[71:63];
    endcase
  end
  always@(x__h86978 or dctb_double_buffer_buffer_1_5)
  begin
    case (x__h86978)
      3'd0:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q68 =
	      dctb_double_buffer_buffer_1_5[8:0];
      3'd1:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q68 =
	      dctb_double_buffer_buffer_1_5[17:9];
      3'd2:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q68 =
	      dctb_double_buffer_buffer_1_5[26:18];
      3'd3:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q68 =
	      dctb_double_buffer_buffer_1_5[35:27];
      3'd4:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q68 =
	      dctb_double_buffer_buffer_1_5[44:36];
      3'd5:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q68 =
	      dctb_double_buffer_buffer_1_5[53:45];
      3'd6:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q68 =
	      dctb_double_buffer_buffer_1_5[62:54];
      3'd7:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q68 =
	      dctb_double_buffer_buffer_1_5[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x6978_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q67 or
	  CASE_x6978_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q68)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1284 =
	      CASE_x6978_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q67;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1284 =
	      CASE_x6978_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q68;
    endcase
  end
  always@(x__h86978 or dctb_double_buffer_buffer_0_6)
  begin
    case (x__h86978)
      3'd0:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q69 =
	      dctb_double_buffer_buffer_0_6[8:0];
      3'd1:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q69 =
	      dctb_double_buffer_buffer_0_6[17:9];
      3'd2:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q69 =
	      dctb_double_buffer_buffer_0_6[26:18];
      3'd3:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q69 =
	      dctb_double_buffer_buffer_0_6[35:27];
      3'd4:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q69 =
	      dctb_double_buffer_buffer_0_6[44:36];
      3'd5:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q69 =
	      dctb_double_buffer_buffer_0_6[53:45];
      3'd6:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q69 =
	      dctb_double_buffer_buffer_0_6[62:54];
      3'd7:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q69 =
	      dctb_double_buffer_buffer_0_6[71:63];
    endcase
  end
  always@(x__h86978 or dctb_double_buffer_buffer_1_6)
  begin
    case (x__h86978)
      3'd0:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q70 =
	      dctb_double_buffer_buffer_1_6[8:0];
      3'd1:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q70 =
	      dctb_double_buffer_buffer_1_6[17:9];
      3'd2:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q70 =
	      dctb_double_buffer_buffer_1_6[26:18];
      3'd3:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q70 =
	      dctb_double_buffer_buffer_1_6[35:27];
      3'd4:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q70 =
	      dctb_double_buffer_buffer_1_6[44:36];
      3'd5:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q70 =
	      dctb_double_buffer_buffer_1_6[53:45];
      3'd6:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q70 =
	      dctb_double_buffer_buffer_1_6[62:54];
      3'd7:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q70 =
	      dctb_double_buffer_buffer_1_6[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x6978_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q69 or
	  CASE_x6978_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q70)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1288 =
	      CASE_x6978_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q69;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1288 =
	      CASE_x6978_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q70;
    endcase
  end
  always@(x__h86978 or dctb_double_buffer_buffer_0_7)
  begin
    case (x__h86978)
      3'd0:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q71 =
	      dctb_double_buffer_buffer_0_7[8:0];
      3'd1:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q71 =
	      dctb_double_buffer_buffer_0_7[17:9];
      3'd2:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q71 =
	      dctb_double_buffer_buffer_0_7[26:18];
      3'd3:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q71 =
	      dctb_double_buffer_buffer_0_7[35:27];
      3'd4:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q71 =
	      dctb_double_buffer_buffer_0_7[44:36];
      3'd5:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q71 =
	      dctb_double_buffer_buffer_0_7[53:45];
      3'd6:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q71 =
	      dctb_double_buffer_buffer_0_7[62:54];
      3'd7:
	  CASE_x6978_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q71 =
	      dctb_double_buffer_buffer_0_7[71:63];
    endcase
  end
  always@(x__h86978 or dctb_double_buffer_buffer_1_7)
  begin
    case (x__h86978)
      3'd0:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q72 =
	      dctb_double_buffer_buffer_1_7[8:0];
      3'd1:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q72 =
	      dctb_double_buffer_buffer_1_7[17:9];
      3'd2:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q72 =
	      dctb_double_buffer_buffer_1_7[26:18];
      3'd3:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q72 =
	      dctb_double_buffer_buffer_1_7[35:27];
      3'd4:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q72 =
	      dctb_double_buffer_buffer_1_7[44:36];
      3'd5:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q72 =
	      dctb_double_buffer_buffer_1_7[53:45];
      3'd6:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q72 =
	      dctb_double_buffer_buffer_1_7[62:54];
      3'd7:
	  CASE_x6978_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q72 =
	      dctb_double_buffer_buffer_1_7[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x6978_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q71 or
	  CASE_x6978_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q72)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1292 =
	      CASE_x6978_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q71;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1292 =
	      CASE_x6978_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q72;
    endcase
  end
  always@(x__h87704 or dctb_double_buffer_buffer_0_0)
  begin
    case (x__h87704)
      3'd0:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q73 =
	      dctb_double_buffer_buffer_0_0[8:0];
      3'd1:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q73 =
	      dctb_double_buffer_buffer_0_0[17:9];
      3'd2:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q73 =
	      dctb_double_buffer_buffer_0_0[26:18];
      3'd3:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q73 =
	      dctb_double_buffer_buffer_0_0[35:27];
      3'd4:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q73 =
	      dctb_double_buffer_buffer_0_0[44:36];
      3'd5:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q73 =
	      dctb_double_buffer_buffer_0_0[53:45];
      3'd6:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q73 =
	      dctb_double_buffer_buffer_0_0[62:54];
      3'd7:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q73 =
	      dctb_double_buffer_buffer_0_0[71:63];
    endcase
  end
  always@(x__h87704 or dctb_double_buffer_buffer_1_0)
  begin
    case (x__h87704)
      3'd0:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q74 =
	      dctb_double_buffer_buffer_1_0[8:0];
      3'd1:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q74 =
	      dctb_double_buffer_buffer_1_0[17:9];
      3'd2:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q74 =
	      dctb_double_buffer_buffer_1_0[26:18];
      3'd3:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q74 =
	      dctb_double_buffer_buffer_1_0[35:27];
      3'd4:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q74 =
	      dctb_double_buffer_buffer_1_0[44:36];
      3'd5:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q74 =
	      dctb_double_buffer_buffer_1_0[53:45];
      3'd6:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q74 =
	      dctb_double_buffer_buffer_1_0[62:54];
      3'd7:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q74 =
	      dctb_double_buffer_buffer_1_0[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x7704_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q73 or
	  CASE_x7704_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q74)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1302 =
	      CASE_x7704_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q73;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1302 =
	      CASE_x7704_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q74;
    endcase
  end
  always@(x__h87704 or dctb_double_buffer_buffer_0_1)
  begin
    case (x__h87704)
      3'd0:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q75 =
	      dctb_double_buffer_buffer_0_1[8:0];
      3'd1:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q75 =
	      dctb_double_buffer_buffer_0_1[17:9];
      3'd2:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q75 =
	      dctb_double_buffer_buffer_0_1[26:18];
      3'd3:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q75 =
	      dctb_double_buffer_buffer_0_1[35:27];
      3'd4:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q75 =
	      dctb_double_buffer_buffer_0_1[44:36];
      3'd5:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q75 =
	      dctb_double_buffer_buffer_0_1[53:45];
      3'd6:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q75 =
	      dctb_double_buffer_buffer_0_1[62:54];
      3'd7:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q75 =
	      dctb_double_buffer_buffer_0_1[71:63];
    endcase
  end
  always@(x__h87704 or dctb_double_buffer_buffer_1_1)
  begin
    case (x__h87704)
      3'd0:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q76 =
	      dctb_double_buffer_buffer_1_1[8:0];
      3'd1:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q76 =
	      dctb_double_buffer_buffer_1_1[17:9];
      3'd2:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q76 =
	      dctb_double_buffer_buffer_1_1[26:18];
      3'd3:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q76 =
	      dctb_double_buffer_buffer_1_1[35:27];
      3'd4:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q76 =
	      dctb_double_buffer_buffer_1_1[44:36];
      3'd5:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q76 =
	      dctb_double_buffer_buffer_1_1[53:45];
      3'd6:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q76 =
	      dctb_double_buffer_buffer_1_1[62:54];
      3'd7:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q76 =
	      dctb_double_buffer_buffer_1_1[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x7704_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q75 or
	  CASE_x7704_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q76)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1306 =
	      CASE_x7704_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q75;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1306 =
	      CASE_x7704_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q76;
    endcase
  end
  always@(x__h87704 or dctb_double_buffer_buffer_0_2)
  begin
    case (x__h87704)
      3'd0:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q77 =
	      dctb_double_buffer_buffer_0_2[8:0];
      3'd1:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q77 =
	      dctb_double_buffer_buffer_0_2[17:9];
      3'd2:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q77 =
	      dctb_double_buffer_buffer_0_2[26:18];
      3'd3:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q77 =
	      dctb_double_buffer_buffer_0_2[35:27];
      3'd4:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q77 =
	      dctb_double_buffer_buffer_0_2[44:36];
      3'd5:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q77 =
	      dctb_double_buffer_buffer_0_2[53:45];
      3'd6:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q77 =
	      dctb_double_buffer_buffer_0_2[62:54];
      3'd7:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q77 =
	      dctb_double_buffer_buffer_0_2[71:63];
    endcase
  end
  always@(x__h87704 or dctb_double_buffer_buffer_1_2)
  begin
    case (x__h87704)
      3'd0:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q78 =
	      dctb_double_buffer_buffer_1_2[8:0];
      3'd1:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q78 =
	      dctb_double_buffer_buffer_1_2[17:9];
      3'd2:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q78 =
	      dctb_double_buffer_buffer_1_2[26:18];
      3'd3:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q78 =
	      dctb_double_buffer_buffer_1_2[35:27];
      3'd4:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q78 =
	      dctb_double_buffer_buffer_1_2[44:36];
      3'd5:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q78 =
	      dctb_double_buffer_buffer_1_2[53:45];
      3'd6:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q78 =
	      dctb_double_buffer_buffer_1_2[62:54];
      3'd7:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q78 =
	      dctb_double_buffer_buffer_1_2[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x7704_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q77 or
	  CASE_x7704_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q78)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1310 =
	      CASE_x7704_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q77;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1310 =
	      CASE_x7704_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q78;
    endcase
  end
  always@(x__h87704 or dctb_double_buffer_buffer_0_3)
  begin
    case (x__h87704)
      3'd0:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q79 =
	      dctb_double_buffer_buffer_0_3[8:0];
      3'd1:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q79 =
	      dctb_double_buffer_buffer_0_3[17:9];
      3'd2:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q79 =
	      dctb_double_buffer_buffer_0_3[26:18];
      3'd3:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q79 =
	      dctb_double_buffer_buffer_0_3[35:27];
      3'd4:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q79 =
	      dctb_double_buffer_buffer_0_3[44:36];
      3'd5:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q79 =
	      dctb_double_buffer_buffer_0_3[53:45];
      3'd6:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q79 =
	      dctb_double_buffer_buffer_0_3[62:54];
      3'd7:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q79 =
	      dctb_double_buffer_buffer_0_3[71:63];
    endcase
  end
  always@(x__h87704 or dctb_double_buffer_buffer_1_3)
  begin
    case (x__h87704)
      3'd0:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q80 =
	      dctb_double_buffer_buffer_1_3[8:0];
      3'd1:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q80 =
	      dctb_double_buffer_buffer_1_3[17:9];
      3'd2:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q80 =
	      dctb_double_buffer_buffer_1_3[26:18];
      3'd3:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q80 =
	      dctb_double_buffer_buffer_1_3[35:27];
      3'd4:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q80 =
	      dctb_double_buffer_buffer_1_3[44:36];
      3'd5:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q80 =
	      dctb_double_buffer_buffer_1_3[53:45];
      3'd6:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q80 =
	      dctb_double_buffer_buffer_1_3[62:54];
      3'd7:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q80 =
	      dctb_double_buffer_buffer_1_3[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x7704_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q79 or
	  CASE_x7704_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q80)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1314 =
	      CASE_x7704_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q79;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1314 =
	      CASE_x7704_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q80;
    endcase
  end
  always@(x__h87704 or dctb_double_buffer_buffer_0_4)
  begin
    case (x__h87704)
      3'd0:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q81 =
	      dctb_double_buffer_buffer_0_4[8:0];
      3'd1:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q81 =
	      dctb_double_buffer_buffer_0_4[17:9];
      3'd2:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q81 =
	      dctb_double_buffer_buffer_0_4[26:18];
      3'd3:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q81 =
	      dctb_double_buffer_buffer_0_4[35:27];
      3'd4:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q81 =
	      dctb_double_buffer_buffer_0_4[44:36];
      3'd5:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q81 =
	      dctb_double_buffer_buffer_0_4[53:45];
      3'd6:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q81 =
	      dctb_double_buffer_buffer_0_4[62:54];
      3'd7:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q81 =
	      dctb_double_buffer_buffer_0_4[71:63];
    endcase
  end
  always@(x__h87704 or dctb_double_buffer_buffer_1_4)
  begin
    case (x__h87704)
      3'd0:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q82 =
	      dctb_double_buffer_buffer_1_4[8:0];
      3'd1:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q82 =
	      dctb_double_buffer_buffer_1_4[17:9];
      3'd2:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q82 =
	      dctb_double_buffer_buffer_1_4[26:18];
      3'd3:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q82 =
	      dctb_double_buffer_buffer_1_4[35:27];
      3'd4:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q82 =
	      dctb_double_buffer_buffer_1_4[44:36];
      3'd5:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q82 =
	      dctb_double_buffer_buffer_1_4[53:45];
      3'd6:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q82 =
	      dctb_double_buffer_buffer_1_4[62:54];
      3'd7:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q82 =
	      dctb_double_buffer_buffer_1_4[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x7704_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q81 or
	  CASE_x7704_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q82)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1318 =
	      CASE_x7704_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q81;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1318 =
	      CASE_x7704_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q82;
    endcase
  end
  always@(x__h87704 or dctb_double_buffer_buffer_0_5)
  begin
    case (x__h87704)
      3'd0:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q83 =
	      dctb_double_buffer_buffer_0_5[8:0];
      3'd1:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q83 =
	      dctb_double_buffer_buffer_0_5[17:9];
      3'd2:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q83 =
	      dctb_double_buffer_buffer_0_5[26:18];
      3'd3:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q83 =
	      dctb_double_buffer_buffer_0_5[35:27];
      3'd4:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q83 =
	      dctb_double_buffer_buffer_0_5[44:36];
      3'd5:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q83 =
	      dctb_double_buffer_buffer_0_5[53:45];
      3'd6:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q83 =
	      dctb_double_buffer_buffer_0_5[62:54];
      3'd7:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q83 =
	      dctb_double_buffer_buffer_0_5[71:63];
    endcase
  end
  always@(x__h87704 or dctb_double_buffer_buffer_1_5)
  begin
    case (x__h87704)
      3'd0:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q84 =
	      dctb_double_buffer_buffer_1_5[8:0];
      3'd1:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q84 =
	      dctb_double_buffer_buffer_1_5[17:9];
      3'd2:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q84 =
	      dctb_double_buffer_buffer_1_5[26:18];
      3'd3:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q84 =
	      dctb_double_buffer_buffer_1_5[35:27];
      3'd4:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q84 =
	      dctb_double_buffer_buffer_1_5[44:36];
      3'd5:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q84 =
	      dctb_double_buffer_buffer_1_5[53:45];
      3'd6:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q84 =
	      dctb_double_buffer_buffer_1_5[62:54];
      3'd7:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q84 =
	      dctb_double_buffer_buffer_1_5[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x7704_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q83 or
	  CASE_x7704_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q84)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1322 =
	      CASE_x7704_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q83;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1322 =
	      CASE_x7704_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q84;
    endcase
  end
  always@(x__h87704 or dctb_double_buffer_buffer_0_6)
  begin
    case (x__h87704)
      3'd0:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q85 =
	      dctb_double_buffer_buffer_0_6[8:0];
      3'd1:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q85 =
	      dctb_double_buffer_buffer_0_6[17:9];
      3'd2:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q85 =
	      dctb_double_buffer_buffer_0_6[26:18];
      3'd3:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q85 =
	      dctb_double_buffer_buffer_0_6[35:27];
      3'd4:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q85 =
	      dctb_double_buffer_buffer_0_6[44:36];
      3'd5:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q85 =
	      dctb_double_buffer_buffer_0_6[53:45];
      3'd6:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q85 =
	      dctb_double_buffer_buffer_0_6[62:54];
      3'd7:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q85 =
	      dctb_double_buffer_buffer_0_6[71:63];
    endcase
  end
  always@(x__h87704 or dctb_double_buffer_buffer_1_6)
  begin
    case (x__h87704)
      3'd0:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q86 =
	      dctb_double_buffer_buffer_1_6[8:0];
      3'd1:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q86 =
	      dctb_double_buffer_buffer_1_6[17:9];
      3'd2:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q86 =
	      dctb_double_buffer_buffer_1_6[26:18];
      3'd3:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q86 =
	      dctb_double_buffer_buffer_1_6[35:27];
      3'd4:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q86 =
	      dctb_double_buffer_buffer_1_6[44:36];
      3'd5:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q86 =
	      dctb_double_buffer_buffer_1_6[53:45];
      3'd6:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q86 =
	      dctb_double_buffer_buffer_1_6[62:54];
      3'd7:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q86 =
	      dctb_double_buffer_buffer_1_6[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x7704_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q85 or
	  CASE_x7704_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q86)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1326 =
	      CASE_x7704_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q85;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1326 =
	      CASE_x7704_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q86;
    endcase
  end
  always@(x__h87704 or dctb_double_buffer_buffer_0_7)
  begin
    case (x__h87704)
      3'd0:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q87 =
	      dctb_double_buffer_buffer_0_7[8:0];
      3'd1:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q87 =
	      dctb_double_buffer_buffer_0_7[17:9];
      3'd2:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q87 =
	      dctb_double_buffer_buffer_0_7[26:18];
      3'd3:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q87 =
	      dctb_double_buffer_buffer_0_7[35:27];
      3'd4:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q87 =
	      dctb_double_buffer_buffer_0_7[44:36];
      3'd5:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q87 =
	      dctb_double_buffer_buffer_0_7[53:45];
      3'd6:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q87 =
	      dctb_double_buffer_buffer_0_7[62:54];
      3'd7:
	  CASE_x7704_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q87 =
	      dctb_double_buffer_buffer_0_7[71:63];
    endcase
  end
  always@(x__h87704 or dctb_double_buffer_buffer_1_7)
  begin
    case (x__h87704)
      3'd0:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q88 =
	      dctb_double_buffer_buffer_1_7[8:0];
      3'd1:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q88 =
	      dctb_double_buffer_buffer_1_7[17:9];
      3'd2:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q88 =
	      dctb_double_buffer_buffer_1_7[26:18];
      3'd3:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q88 =
	      dctb_double_buffer_buffer_1_7[35:27];
      3'd4:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q88 =
	      dctb_double_buffer_buffer_1_7[44:36];
      3'd5:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q88 =
	      dctb_double_buffer_buffer_1_7[53:45];
      3'd6:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q88 =
	      dctb_double_buffer_buffer_1_7[62:54];
      3'd7:
	  CASE_x7704_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q88 =
	      dctb_double_buffer_buffer_1_7[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x7704_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q87 or
	  CASE_x7704_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q88)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1330 =
	      CASE_x7704_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q87;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1330 =
	      CASE_x7704_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q88;
    endcase
  end
  always@(x__h88430 or dctb_double_buffer_buffer_0_0)
  begin
    case (x__h88430)
      3'd0:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q89 =
	      dctb_double_buffer_buffer_0_0[8:0];
      3'd1:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q89 =
	      dctb_double_buffer_buffer_0_0[17:9];
      3'd2:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q89 =
	      dctb_double_buffer_buffer_0_0[26:18];
      3'd3:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q89 =
	      dctb_double_buffer_buffer_0_0[35:27];
      3'd4:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q89 =
	      dctb_double_buffer_buffer_0_0[44:36];
      3'd5:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q89 =
	      dctb_double_buffer_buffer_0_0[53:45];
      3'd6:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q89 =
	      dctb_double_buffer_buffer_0_0[62:54];
      3'd7:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q89 =
	      dctb_double_buffer_buffer_0_0[71:63];
    endcase
  end
  always@(x__h88430 or dctb_double_buffer_buffer_1_0)
  begin
    case (x__h88430)
      3'd0:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q90 =
	      dctb_double_buffer_buffer_1_0[8:0];
      3'd1:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q90 =
	      dctb_double_buffer_buffer_1_0[17:9];
      3'd2:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q90 =
	      dctb_double_buffer_buffer_1_0[26:18];
      3'd3:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q90 =
	      dctb_double_buffer_buffer_1_0[35:27];
      3'd4:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q90 =
	      dctb_double_buffer_buffer_1_0[44:36];
      3'd5:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q90 =
	      dctb_double_buffer_buffer_1_0[53:45];
      3'd6:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q90 =
	      dctb_double_buffer_buffer_1_0[62:54];
      3'd7:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q90 =
	      dctb_double_buffer_buffer_1_0[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x8430_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q89 or
	  CASE_x8430_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q90)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1340 =
	      CASE_x8430_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q89;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1340 =
	      CASE_x8430_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q90;
    endcase
  end
  always@(x__h88430 or dctb_double_buffer_buffer_0_1)
  begin
    case (x__h88430)
      3'd0:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q91 =
	      dctb_double_buffer_buffer_0_1[8:0];
      3'd1:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q91 =
	      dctb_double_buffer_buffer_0_1[17:9];
      3'd2:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q91 =
	      dctb_double_buffer_buffer_0_1[26:18];
      3'd3:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q91 =
	      dctb_double_buffer_buffer_0_1[35:27];
      3'd4:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q91 =
	      dctb_double_buffer_buffer_0_1[44:36];
      3'd5:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q91 =
	      dctb_double_buffer_buffer_0_1[53:45];
      3'd6:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q91 =
	      dctb_double_buffer_buffer_0_1[62:54];
      3'd7:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q91 =
	      dctb_double_buffer_buffer_0_1[71:63];
    endcase
  end
  always@(x__h88430 or dctb_double_buffer_buffer_1_1)
  begin
    case (x__h88430)
      3'd0:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q92 =
	      dctb_double_buffer_buffer_1_1[8:0];
      3'd1:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q92 =
	      dctb_double_buffer_buffer_1_1[17:9];
      3'd2:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q92 =
	      dctb_double_buffer_buffer_1_1[26:18];
      3'd3:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q92 =
	      dctb_double_buffer_buffer_1_1[35:27];
      3'd4:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q92 =
	      dctb_double_buffer_buffer_1_1[44:36];
      3'd5:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q92 =
	      dctb_double_buffer_buffer_1_1[53:45];
      3'd6:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q92 =
	      dctb_double_buffer_buffer_1_1[62:54];
      3'd7:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q92 =
	      dctb_double_buffer_buffer_1_1[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x8430_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q91 or
	  CASE_x8430_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q92)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1344 =
	      CASE_x8430_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q91;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1344 =
	      CASE_x8430_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q92;
    endcase
  end
  always@(x__h88430 or dctb_double_buffer_buffer_0_2)
  begin
    case (x__h88430)
      3'd0:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q93 =
	      dctb_double_buffer_buffer_0_2[8:0];
      3'd1:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q93 =
	      dctb_double_buffer_buffer_0_2[17:9];
      3'd2:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q93 =
	      dctb_double_buffer_buffer_0_2[26:18];
      3'd3:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q93 =
	      dctb_double_buffer_buffer_0_2[35:27];
      3'd4:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q93 =
	      dctb_double_buffer_buffer_0_2[44:36];
      3'd5:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q93 =
	      dctb_double_buffer_buffer_0_2[53:45];
      3'd6:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q93 =
	      dctb_double_buffer_buffer_0_2[62:54];
      3'd7:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q93 =
	      dctb_double_buffer_buffer_0_2[71:63];
    endcase
  end
  always@(x__h88430 or dctb_double_buffer_buffer_1_2)
  begin
    case (x__h88430)
      3'd0:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q94 =
	      dctb_double_buffer_buffer_1_2[8:0];
      3'd1:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q94 =
	      dctb_double_buffer_buffer_1_2[17:9];
      3'd2:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q94 =
	      dctb_double_buffer_buffer_1_2[26:18];
      3'd3:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q94 =
	      dctb_double_buffer_buffer_1_2[35:27];
      3'd4:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q94 =
	      dctb_double_buffer_buffer_1_2[44:36];
      3'd5:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q94 =
	      dctb_double_buffer_buffer_1_2[53:45];
      3'd6:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q94 =
	      dctb_double_buffer_buffer_1_2[62:54];
      3'd7:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q94 =
	      dctb_double_buffer_buffer_1_2[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x8430_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q93 or
	  CASE_x8430_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q94)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1348 =
	      CASE_x8430_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q93;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1348 =
	      CASE_x8430_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q94;
    endcase
  end
  always@(x__h88430 or dctb_double_buffer_buffer_0_3)
  begin
    case (x__h88430)
      3'd0:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q95 =
	      dctb_double_buffer_buffer_0_3[8:0];
      3'd1:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q95 =
	      dctb_double_buffer_buffer_0_3[17:9];
      3'd2:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q95 =
	      dctb_double_buffer_buffer_0_3[26:18];
      3'd3:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q95 =
	      dctb_double_buffer_buffer_0_3[35:27];
      3'd4:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q95 =
	      dctb_double_buffer_buffer_0_3[44:36];
      3'd5:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q95 =
	      dctb_double_buffer_buffer_0_3[53:45];
      3'd6:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q95 =
	      dctb_double_buffer_buffer_0_3[62:54];
      3'd7:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q95 =
	      dctb_double_buffer_buffer_0_3[71:63];
    endcase
  end
  always@(x__h88430 or dctb_double_buffer_buffer_1_3)
  begin
    case (x__h88430)
      3'd0:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q96 =
	      dctb_double_buffer_buffer_1_3[8:0];
      3'd1:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q96 =
	      dctb_double_buffer_buffer_1_3[17:9];
      3'd2:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q96 =
	      dctb_double_buffer_buffer_1_3[26:18];
      3'd3:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q96 =
	      dctb_double_buffer_buffer_1_3[35:27];
      3'd4:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q96 =
	      dctb_double_buffer_buffer_1_3[44:36];
      3'd5:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q96 =
	      dctb_double_buffer_buffer_1_3[53:45];
      3'd6:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q96 =
	      dctb_double_buffer_buffer_1_3[62:54];
      3'd7:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q96 =
	      dctb_double_buffer_buffer_1_3[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x8430_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q95 or
	  CASE_x8430_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q96)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1352 =
	      CASE_x8430_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q95;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1352 =
	      CASE_x8430_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q96;
    endcase
  end
  always@(x__h88430 or dctb_double_buffer_buffer_0_4)
  begin
    case (x__h88430)
      3'd0:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q97 =
	      dctb_double_buffer_buffer_0_4[8:0];
      3'd1:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q97 =
	      dctb_double_buffer_buffer_0_4[17:9];
      3'd2:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q97 =
	      dctb_double_buffer_buffer_0_4[26:18];
      3'd3:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q97 =
	      dctb_double_buffer_buffer_0_4[35:27];
      3'd4:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q97 =
	      dctb_double_buffer_buffer_0_4[44:36];
      3'd5:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q97 =
	      dctb_double_buffer_buffer_0_4[53:45];
      3'd6:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q97 =
	      dctb_double_buffer_buffer_0_4[62:54];
      3'd7:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q97 =
	      dctb_double_buffer_buffer_0_4[71:63];
    endcase
  end
  always@(x__h88430 or dctb_double_buffer_buffer_1_4)
  begin
    case (x__h88430)
      3'd0:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q98 =
	      dctb_double_buffer_buffer_1_4[8:0];
      3'd1:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q98 =
	      dctb_double_buffer_buffer_1_4[17:9];
      3'd2:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q98 =
	      dctb_double_buffer_buffer_1_4[26:18];
      3'd3:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q98 =
	      dctb_double_buffer_buffer_1_4[35:27];
      3'd4:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q98 =
	      dctb_double_buffer_buffer_1_4[44:36];
      3'd5:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q98 =
	      dctb_double_buffer_buffer_1_4[53:45];
      3'd6:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q98 =
	      dctb_double_buffer_buffer_1_4[62:54];
      3'd7:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q98 =
	      dctb_double_buffer_buffer_1_4[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x8430_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q97 or
	  CASE_x8430_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q98)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1356 =
	      CASE_x8430_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q97;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1356 =
	      CASE_x8430_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q98;
    endcase
  end
  always@(x__h88430 or dctb_double_buffer_buffer_0_5)
  begin
    case (x__h88430)
      3'd0:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q99 =
	      dctb_double_buffer_buffer_0_5[8:0];
      3'd1:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q99 =
	      dctb_double_buffer_buffer_0_5[17:9];
      3'd2:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q99 =
	      dctb_double_buffer_buffer_0_5[26:18];
      3'd3:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q99 =
	      dctb_double_buffer_buffer_0_5[35:27];
      3'd4:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q99 =
	      dctb_double_buffer_buffer_0_5[44:36];
      3'd5:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q99 =
	      dctb_double_buffer_buffer_0_5[53:45];
      3'd6:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q99 =
	      dctb_double_buffer_buffer_0_5[62:54];
      3'd7:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q99 =
	      dctb_double_buffer_buffer_0_5[71:63];
    endcase
  end
  always@(x__h88430 or dctb_double_buffer_buffer_1_5)
  begin
    case (x__h88430)
      3'd0:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q100 =
	      dctb_double_buffer_buffer_1_5[8:0];
      3'd1:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q100 =
	      dctb_double_buffer_buffer_1_5[17:9];
      3'd2:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q100 =
	      dctb_double_buffer_buffer_1_5[26:18];
      3'd3:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q100 =
	      dctb_double_buffer_buffer_1_5[35:27];
      3'd4:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q100 =
	      dctb_double_buffer_buffer_1_5[44:36];
      3'd5:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q100 =
	      dctb_double_buffer_buffer_1_5[53:45];
      3'd6:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q100 =
	      dctb_double_buffer_buffer_1_5[62:54];
      3'd7:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q100 =
	      dctb_double_buffer_buffer_1_5[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x8430_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q99 or
	  CASE_x8430_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q100)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1360 =
	      CASE_x8430_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q99;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1360 =
	      CASE_x8430_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q100;
    endcase
  end
  always@(x__h88430 or dctb_double_buffer_buffer_0_6)
  begin
    case (x__h88430)
      3'd0:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q101 =
	      dctb_double_buffer_buffer_0_6[8:0];
      3'd1:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q101 =
	      dctb_double_buffer_buffer_0_6[17:9];
      3'd2:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q101 =
	      dctb_double_buffer_buffer_0_6[26:18];
      3'd3:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q101 =
	      dctb_double_buffer_buffer_0_6[35:27];
      3'd4:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q101 =
	      dctb_double_buffer_buffer_0_6[44:36];
      3'd5:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q101 =
	      dctb_double_buffer_buffer_0_6[53:45];
      3'd6:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q101 =
	      dctb_double_buffer_buffer_0_6[62:54];
      3'd7:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q101 =
	      dctb_double_buffer_buffer_0_6[71:63];
    endcase
  end
  always@(x__h88430 or dctb_double_buffer_buffer_1_6)
  begin
    case (x__h88430)
      3'd0:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q102 =
	      dctb_double_buffer_buffer_1_6[8:0];
      3'd1:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q102 =
	      dctb_double_buffer_buffer_1_6[17:9];
      3'd2:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q102 =
	      dctb_double_buffer_buffer_1_6[26:18];
      3'd3:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q102 =
	      dctb_double_buffer_buffer_1_6[35:27];
      3'd4:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q102 =
	      dctb_double_buffer_buffer_1_6[44:36];
      3'd5:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q102 =
	      dctb_double_buffer_buffer_1_6[53:45];
      3'd6:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q102 =
	      dctb_double_buffer_buffer_1_6[62:54];
      3'd7:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q102 =
	      dctb_double_buffer_buffer_1_6[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x8430_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q101 or
	  CASE_x8430_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q102)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1364 =
	      CASE_x8430_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q101;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1364 =
	      CASE_x8430_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q102;
    endcase
  end
  always@(x__h88430 or dctb_double_buffer_buffer_0_7)
  begin
    case (x__h88430)
      3'd0:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q103 =
	      dctb_double_buffer_buffer_0_7[8:0];
      3'd1:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q103 =
	      dctb_double_buffer_buffer_0_7[17:9];
      3'd2:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q103 =
	      dctb_double_buffer_buffer_0_7[26:18];
      3'd3:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q103 =
	      dctb_double_buffer_buffer_0_7[35:27];
      3'd4:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q103 =
	      dctb_double_buffer_buffer_0_7[44:36];
      3'd5:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q103 =
	      dctb_double_buffer_buffer_0_7[53:45];
      3'd6:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q103 =
	      dctb_double_buffer_buffer_0_7[62:54];
      3'd7:
	  CASE_x8430_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q103 =
	      dctb_double_buffer_buffer_0_7[71:63];
    endcase
  end
  always@(x__h88430 or dctb_double_buffer_buffer_1_7)
  begin
    case (x__h88430)
      3'd0:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q104 =
	      dctb_double_buffer_buffer_1_7[8:0];
      3'd1:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q104 =
	      dctb_double_buffer_buffer_1_7[17:9];
      3'd2:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q104 =
	      dctb_double_buffer_buffer_1_7[26:18];
      3'd3:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q104 =
	      dctb_double_buffer_buffer_1_7[35:27];
      3'd4:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q104 =
	      dctb_double_buffer_buffer_1_7[44:36];
      3'd5:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q104 =
	      dctb_double_buffer_buffer_1_7[53:45];
      3'd6:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q104 =
	      dctb_double_buffer_buffer_1_7[62:54];
      3'd7:
	  CASE_x8430_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q104 =
	      dctb_double_buffer_buffer_1_7[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x8430_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q103 or
	  CASE_x8430_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q104)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1368 =
	      CASE_x8430_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q103;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1368 =
	      CASE_x8430_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q104;
    endcase
  end
  always@(x__h89156 or dctb_double_buffer_buffer_0_0)
  begin
    case (x__h89156)
      3'd0:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q105 =
	      dctb_double_buffer_buffer_0_0[8:0];
      3'd1:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q105 =
	      dctb_double_buffer_buffer_0_0[17:9];
      3'd2:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q105 =
	      dctb_double_buffer_buffer_0_0[26:18];
      3'd3:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q105 =
	      dctb_double_buffer_buffer_0_0[35:27];
      3'd4:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q105 =
	      dctb_double_buffer_buffer_0_0[44:36];
      3'd5:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q105 =
	      dctb_double_buffer_buffer_0_0[53:45];
      3'd6:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q105 =
	      dctb_double_buffer_buffer_0_0[62:54];
      3'd7:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q105 =
	      dctb_double_buffer_buffer_0_0[71:63];
    endcase
  end
  always@(x__h89156 or dctb_double_buffer_buffer_1_0)
  begin
    case (x__h89156)
      3'd0:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q106 =
	      dctb_double_buffer_buffer_1_0[8:0];
      3'd1:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q106 =
	      dctb_double_buffer_buffer_1_0[17:9];
      3'd2:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q106 =
	      dctb_double_buffer_buffer_1_0[26:18];
      3'd3:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q106 =
	      dctb_double_buffer_buffer_1_0[35:27];
      3'd4:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q106 =
	      dctb_double_buffer_buffer_1_0[44:36];
      3'd5:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q106 =
	      dctb_double_buffer_buffer_1_0[53:45];
      3'd6:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q106 =
	      dctb_double_buffer_buffer_1_0[62:54];
      3'd7:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q106 =
	      dctb_double_buffer_buffer_1_0[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x9156_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q105 or
	  CASE_x9156_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q106)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1378 =
	      CASE_x9156_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q105;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1378 =
	      CASE_x9156_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q106;
    endcase
  end
  always@(x__h89156 or dctb_double_buffer_buffer_0_1)
  begin
    case (x__h89156)
      3'd0:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q107 =
	      dctb_double_buffer_buffer_0_1[8:0];
      3'd1:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q107 =
	      dctb_double_buffer_buffer_0_1[17:9];
      3'd2:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q107 =
	      dctb_double_buffer_buffer_0_1[26:18];
      3'd3:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q107 =
	      dctb_double_buffer_buffer_0_1[35:27];
      3'd4:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q107 =
	      dctb_double_buffer_buffer_0_1[44:36];
      3'd5:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q107 =
	      dctb_double_buffer_buffer_0_1[53:45];
      3'd6:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q107 =
	      dctb_double_buffer_buffer_0_1[62:54];
      3'd7:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q107 =
	      dctb_double_buffer_buffer_0_1[71:63];
    endcase
  end
  always@(x__h89156 or dctb_double_buffer_buffer_1_1)
  begin
    case (x__h89156)
      3'd0:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q108 =
	      dctb_double_buffer_buffer_1_1[8:0];
      3'd1:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q108 =
	      dctb_double_buffer_buffer_1_1[17:9];
      3'd2:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q108 =
	      dctb_double_buffer_buffer_1_1[26:18];
      3'd3:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q108 =
	      dctb_double_buffer_buffer_1_1[35:27];
      3'd4:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q108 =
	      dctb_double_buffer_buffer_1_1[44:36];
      3'd5:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q108 =
	      dctb_double_buffer_buffer_1_1[53:45];
      3'd6:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q108 =
	      dctb_double_buffer_buffer_1_1[62:54];
      3'd7:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q108 =
	      dctb_double_buffer_buffer_1_1[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x9156_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q107 or
	  CASE_x9156_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q108)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1382 =
	      CASE_x9156_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q107;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1382 =
	      CASE_x9156_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q108;
    endcase
  end
  always@(x__h89156 or dctb_double_buffer_buffer_0_2)
  begin
    case (x__h89156)
      3'd0:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q109 =
	      dctb_double_buffer_buffer_0_2[8:0];
      3'd1:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q109 =
	      dctb_double_buffer_buffer_0_2[17:9];
      3'd2:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q109 =
	      dctb_double_buffer_buffer_0_2[26:18];
      3'd3:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q109 =
	      dctb_double_buffer_buffer_0_2[35:27];
      3'd4:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q109 =
	      dctb_double_buffer_buffer_0_2[44:36];
      3'd5:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q109 =
	      dctb_double_buffer_buffer_0_2[53:45];
      3'd6:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q109 =
	      dctb_double_buffer_buffer_0_2[62:54];
      3'd7:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q109 =
	      dctb_double_buffer_buffer_0_2[71:63];
    endcase
  end
  always@(x__h89156 or dctb_double_buffer_buffer_1_2)
  begin
    case (x__h89156)
      3'd0:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q110 =
	      dctb_double_buffer_buffer_1_2[8:0];
      3'd1:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q110 =
	      dctb_double_buffer_buffer_1_2[17:9];
      3'd2:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q110 =
	      dctb_double_buffer_buffer_1_2[26:18];
      3'd3:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q110 =
	      dctb_double_buffer_buffer_1_2[35:27];
      3'd4:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q110 =
	      dctb_double_buffer_buffer_1_2[44:36];
      3'd5:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q110 =
	      dctb_double_buffer_buffer_1_2[53:45];
      3'd6:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q110 =
	      dctb_double_buffer_buffer_1_2[62:54];
      3'd7:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q110 =
	      dctb_double_buffer_buffer_1_2[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x9156_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q109 or
	  CASE_x9156_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q110)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1386 =
	      CASE_x9156_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q109;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1386 =
	      CASE_x9156_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q110;
    endcase
  end
  always@(x__h89156 or dctb_double_buffer_buffer_0_3)
  begin
    case (x__h89156)
      3'd0:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q111 =
	      dctb_double_buffer_buffer_0_3[8:0];
      3'd1:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q111 =
	      dctb_double_buffer_buffer_0_3[17:9];
      3'd2:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q111 =
	      dctb_double_buffer_buffer_0_3[26:18];
      3'd3:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q111 =
	      dctb_double_buffer_buffer_0_3[35:27];
      3'd4:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q111 =
	      dctb_double_buffer_buffer_0_3[44:36];
      3'd5:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q111 =
	      dctb_double_buffer_buffer_0_3[53:45];
      3'd6:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q111 =
	      dctb_double_buffer_buffer_0_3[62:54];
      3'd7:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q111 =
	      dctb_double_buffer_buffer_0_3[71:63];
    endcase
  end
  always@(x__h89156 or dctb_double_buffer_buffer_1_3)
  begin
    case (x__h89156)
      3'd0:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q112 =
	      dctb_double_buffer_buffer_1_3[8:0];
      3'd1:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q112 =
	      dctb_double_buffer_buffer_1_3[17:9];
      3'd2:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q112 =
	      dctb_double_buffer_buffer_1_3[26:18];
      3'd3:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q112 =
	      dctb_double_buffer_buffer_1_3[35:27];
      3'd4:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q112 =
	      dctb_double_buffer_buffer_1_3[44:36];
      3'd5:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q112 =
	      dctb_double_buffer_buffer_1_3[53:45];
      3'd6:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q112 =
	      dctb_double_buffer_buffer_1_3[62:54];
      3'd7:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q112 =
	      dctb_double_buffer_buffer_1_3[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x9156_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q111 or
	  CASE_x9156_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q112)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1390 =
	      CASE_x9156_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q111;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1390 =
	      CASE_x9156_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q112;
    endcase
  end
  always@(x__h89156 or dctb_double_buffer_buffer_0_4)
  begin
    case (x__h89156)
      3'd0:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q113 =
	      dctb_double_buffer_buffer_0_4[8:0];
      3'd1:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q113 =
	      dctb_double_buffer_buffer_0_4[17:9];
      3'd2:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q113 =
	      dctb_double_buffer_buffer_0_4[26:18];
      3'd3:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q113 =
	      dctb_double_buffer_buffer_0_4[35:27];
      3'd4:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q113 =
	      dctb_double_buffer_buffer_0_4[44:36];
      3'd5:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q113 =
	      dctb_double_buffer_buffer_0_4[53:45];
      3'd6:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q113 =
	      dctb_double_buffer_buffer_0_4[62:54];
      3'd7:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q113 =
	      dctb_double_buffer_buffer_0_4[71:63];
    endcase
  end
  always@(x__h89156 or dctb_double_buffer_buffer_1_4)
  begin
    case (x__h89156)
      3'd0:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q114 =
	      dctb_double_buffer_buffer_1_4[8:0];
      3'd1:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q114 =
	      dctb_double_buffer_buffer_1_4[17:9];
      3'd2:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q114 =
	      dctb_double_buffer_buffer_1_4[26:18];
      3'd3:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q114 =
	      dctb_double_buffer_buffer_1_4[35:27];
      3'd4:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q114 =
	      dctb_double_buffer_buffer_1_4[44:36];
      3'd5:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q114 =
	      dctb_double_buffer_buffer_1_4[53:45];
      3'd6:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q114 =
	      dctb_double_buffer_buffer_1_4[62:54];
      3'd7:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q114 =
	      dctb_double_buffer_buffer_1_4[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x9156_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q113 or
	  CASE_x9156_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q114)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1394 =
	      CASE_x9156_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q113;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1394 =
	      CASE_x9156_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q114;
    endcase
  end
  always@(x__h89156 or dctb_double_buffer_buffer_0_5)
  begin
    case (x__h89156)
      3'd0:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q115 =
	      dctb_double_buffer_buffer_0_5[8:0];
      3'd1:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q115 =
	      dctb_double_buffer_buffer_0_5[17:9];
      3'd2:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q115 =
	      dctb_double_buffer_buffer_0_5[26:18];
      3'd3:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q115 =
	      dctb_double_buffer_buffer_0_5[35:27];
      3'd4:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q115 =
	      dctb_double_buffer_buffer_0_5[44:36];
      3'd5:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q115 =
	      dctb_double_buffer_buffer_0_5[53:45];
      3'd6:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q115 =
	      dctb_double_buffer_buffer_0_5[62:54];
      3'd7:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q115 =
	      dctb_double_buffer_buffer_0_5[71:63];
    endcase
  end
  always@(x__h89156 or dctb_double_buffer_buffer_1_5)
  begin
    case (x__h89156)
      3'd0:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q116 =
	      dctb_double_buffer_buffer_1_5[8:0];
      3'd1:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q116 =
	      dctb_double_buffer_buffer_1_5[17:9];
      3'd2:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q116 =
	      dctb_double_buffer_buffer_1_5[26:18];
      3'd3:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q116 =
	      dctb_double_buffer_buffer_1_5[35:27];
      3'd4:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q116 =
	      dctb_double_buffer_buffer_1_5[44:36];
      3'd5:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q116 =
	      dctb_double_buffer_buffer_1_5[53:45];
      3'd6:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q116 =
	      dctb_double_buffer_buffer_1_5[62:54];
      3'd7:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q116 =
	      dctb_double_buffer_buffer_1_5[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x9156_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q115 or
	  CASE_x9156_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q116)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1398 =
	      CASE_x9156_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q115;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1398 =
	      CASE_x9156_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q116;
    endcase
  end
  always@(x__h89156 or dctb_double_buffer_buffer_0_6)
  begin
    case (x__h89156)
      3'd0:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q117 =
	      dctb_double_buffer_buffer_0_6[8:0];
      3'd1:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q117 =
	      dctb_double_buffer_buffer_0_6[17:9];
      3'd2:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q117 =
	      dctb_double_buffer_buffer_0_6[26:18];
      3'd3:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q117 =
	      dctb_double_buffer_buffer_0_6[35:27];
      3'd4:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q117 =
	      dctb_double_buffer_buffer_0_6[44:36];
      3'd5:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q117 =
	      dctb_double_buffer_buffer_0_6[53:45];
      3'd6:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q117 =
	      dctb_double_buffer_buffer_0_6[62:54];
      3'd7:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q117 =
	      dctb_double_buffer_buffer_0_6[71:63];
    endcase
  end
  always@(x__h89156 or dctb_double_buffer_buffer_1_6)
  begin
    case (x__h89156)
      3'd0:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q118 =
	      dctb_double_buffer_buffer_1_6[8:0];
      3'd1:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q118 =
	      dctb_double_buffer_buffer_1_6[17:9];
      3'd2:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q118 =
	      dctb_double_buffer_buffer_1_6[26:18];
      3'd3:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q118 =
	      dctb_double_buffer_buffer_1_6[35:27];
      3'd4:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q118 =
	      dctb_double_buffer_buffer_1_6[44:36];
      3'd5:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q118 =
	      dctb_double_buffer_buffer_1_6[53:45];
      3'd6:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q118 =
	      dctb_double_buffer_buffer_1_6[62:54];
      3'd7:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q118 =
	      dctb_double_buffer_buffer_1_6[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x9156_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q117 or
	  CASE_x9156_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q118)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1402 =
	      CASE_x9156_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q117;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1402 =
	      CASE_x9156_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q118;
    endcase
  end
  always@(x__h89156 or dctb_double_buffer_buffer_0_7)
  begin
    case (x__h89156)
      3'd0:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q119 =
	      dctb_double_buffer_buffer_0_7[8:0];
      3'd1:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q119 =
	      dctb_double_buffer_buffer_0_7[17:9];
      3'd2:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q119 =
	      dctb_double_buffer_buffer_0_7[26:18];
      3'd3:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q119 =
	      dctb_double_buffer_buffer_0_7[35:27];
      3'd4:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q119 =
	      dctb_double_buffer_buffer_0_7[44:36];
      3'd5:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q119 =
	      dctb_double_buffer_buffer_0_7[53:45];
      3'd6:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q119 =
	      dctb_double_buffer_buffer_0_7[62:54];
      3'd7:
	  CASE_x9156_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q119 =
	      dctb_double_buffer_buffer_0_7[71:63];
    endcase
  end
  always@(x__h89156 or dctb_double_buffer_buffer_1_7)
  begin
    case (x__h89156)
      3'd0:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q120 =
	      dctb_double_buffer_buffer_1_7[8:0];
      3'd1:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q120 =
	      dctb_double_buffer_buffer_1_7[17:9];
      3'd2:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q120 =
	      dctb_double_buffer_buffer_1_7[26:18];
      3'd3:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q120 =
	      dctb_double_buffer_buffer_1_7[35:27];
      3'd4:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q120 =
	      dctb_double_buffer_buffer_1_7[44:36];
      3'd5:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q120 =
	      dctb_double_buffer_buffer_1_7[53:45];
      3'd6:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q120 =
	      dctb_double_buffer_buffer_1_7[62:54];
      3'd7:
	  CASE_x9156_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q120 =
	      dctb_double_buffer_buffer_1_7[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x9156_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q119 or
	  CASE_x9156_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q120)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1406 =
	      CASE_x9156_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q119;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1406 =
	      CASE_x9156_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q120;
    endcase
  end
  always@(x__h89882 or dctb_double_buffer_buffer_0_0)
  begin
    case (x__h89882)
      3'd0:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q121 =
	      dctb_double_buffer_buffer_0_0[8:0];
      3'd1:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q121 =
	      dctb_double_buffer_buffer_0_0[17:9];
      3'd2:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q121 =
	      dctb_double_buffer_buffer_0_0[26:18];
      3'd3:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q121 =
	      dctb_double_buffer_buffer_0_0[35:27];
      3'd4:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q121 =
	      dctb_double_buffer_buffer_0_0[44:36];
      3'd5:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q121 =
	      dctb_double_buffer_buffer_0_0[53:45];
      3'd6:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q121 =
	      dctb_double_buffer_buffer_0_0[62:54];
      3'd7:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q121 =
	      dctb_double_buffer_buffer_0_0[71:63];
    endcase
  end
  always@(x__h89882 or dctb_double_buffer_buffer_1_0)
  begin
    case (x__h89882)
      3'd0:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q122 =
	      dctb_double_buffer_buffer_1_0[8:0];
      3'd1:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q122 =
	      dctb_double_buffer_buffer_1_0[17:9];
      3'd2:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q122 =
	      dctb_double_buffer_buffer_1_0[26:18];
      3'd3:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q122 =
	      dctb_double_buffer_buffer_1_0[35:27];
      3'd4:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q122 =
	      dctb_double_buffer_buffer_1_0[44:36];
      3'd5:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q122 =
	      dctb_double_buffer_buffer_1_0[53:45];
      3'd6:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q122 =
	      dctb_double_buffer_buffer_1_0[62:54];
      3'd7:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q122 =
	      dctb_double_buffer_buffer_1_0[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x9882_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q121 or
	  CASE_x9882_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q122)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1416 =
	      CASE_x9882_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q121;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1416 =
	      CASE_x9882_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q122;
    endcase
  end
  always@(x__h89882 or dctb_double_buffer_buffer_0_1)
  begin
    case (x__h89882)
      3'd0:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q123 =
	      dctb_double_buffer_buffer_0_1[8:0];
      3'd1:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q123 =
	      dctb_double_buffer_buffer_0_1[17:9];
      3'd2:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q123 =
	      dctb_double_buffer_buffer_0_1[26:18];
      3'd3:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q123 =
	      dctb_double_buffer_buffer_0_1[35:27];
      3'd4:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q123 =
	      dctb_double_buffer_buffer_0_1[44:36];
      3'd5:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q123 =
	      dctb_double_buffer_buffer_0_1[53:45];
      3'd6:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q123 =
	      dctb_double_buffer_buffer_0_1[62:54];
      3'd7:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q123 =
	      dctb_double_buffer_buffer_0_1[71:63];
    endcase
  end
  always@(x__h89882 or dctb_double_buffer_buffer_1_1)
  begin
    case (x__h89882)
      3'd0:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q124 =
	      dctb_double_buffer_buffer_1_1[8:0];
      3'd1:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q124 =
	      dctb_double_buffer_buffer_1_1[17:9];
      3'd2:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q124 =
	      dctb_double_buffer_buffer_1_1[26:18];
      3'd3:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q124 =
	      dctb_double_buffer_buffer_1_1[35:27];
      3'd4:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q124 =
	      dctb_double_buffer_buffer_1_1[44:36];
      3'd5:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q124 =
	      dctb_double_buffer_buffer_1_1[53:45];
      3'd6:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q124 =
	      dctb_double_buffer_buffer_1_1[62:54];
      3'd7:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q124 =
	      dctb_double_buffer_buffer_1_1[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x9882_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q123 or
	  CASE_x9882_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q124)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1420 =
	      CASE_x9882_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q123;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1420 =
	      CASE_x9882_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q124;
    endcase
  end
  always@(x__h89882 or dctb_double_buffer_buffer_0_2)
  begin
    case (x__h89882)
      3'd0:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q125 =
	      dctb_double_buffer_buffer_0_2[8:0];
      3'd1:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q125 =
	      dctb_double_buffer_buffer_0_2[17:9];
      3'd2:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q125 =
	      dctb_double_buffer_buffer_0_2[26:18];
      3'd3:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q125 =
	      dctb_double_buffer_buffer_0_2[35:27];
      3'd4:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q125 =
	      dctb_double_buffer_buffer_0_2[44:36];
      3'd5:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q125 =
	      dctb_double_buffer_buffer_0_2[53:45];
      3'd6:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q125 =
	      dctb_double_buffer_buffer_0_2[62:54];
      3'd7:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q125 =
	      dctb_double_buffer_buffer_0_2[71:63];
    endcase
  end
  always@(x__h89882 or dctb_double_buffer_buffer_1_2)
  begin
    case (x__h89882)
      3'd0:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q126 =
	      dctb_double_buffer_buffer_1_2[8:0];
      3'd1:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q126 =
	      dctb_double_buffer_buffer_1_2[17:9];
      3'd2:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q126 =
	      dctb_double_buffer_buffer_1_2[26:18];
      3'd3:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q126 =
	      dctb_double_buffer_buffer_1_2[35:27];
      3'd4:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q126 =
	      dctb_double_buffer_buffer_1_2[44:36];
      3'd5:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q126 =
	      dctb_double_buffer_buffer_1_2[53:45];
      3'd6:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q126 =
	      dctb_double_buffer_buffer_1_2[62:54];
      3'd7:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q126 =
	      dctb_double_buffer_buffer_1_2[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x9882_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q125 or
	  CASE_x9882_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q126)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1424 =
	      CASE_x9882_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q125;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1424 =
	      CASE_x9882_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q126;
    endcase
  end
  always@(x__h89882 or dctb_double_buffer_buffer_0_3)
  begin
    case (x__h89882)
      3'd0:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q127 =
	      dctb_double_buffer_buffer_0_3[8:0];
      3'd1:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q127 =
	      dctb_double_buffer_buffer_0_3[17:9];
      3'd2:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q127 =
	      dctb_double_buffer_buffer_0_3[26:18];
      3'd3:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q127 =
	      dctb_double_buffer_buffer_0_3[35:27];
      3'd4:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q127 =
	      dctb_double_buffer_buffer_0_3[44:36];
      3'd5:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q127 =
	      dctb_double_buffer_buffer_0_3[53:45];
      3'd6:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q127 =
	      dctb_double_buffer_buffer_0_3[62:54];
      3'd7:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q127 =
	      dctb_double_buffer_buffer_0_3[71:63];
    endcase
  end
  always@(x__h89882 or dctb_double_buffer_buffer_1_3)
  begin
    case (x__h89882)
      3'd0:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q128 =
	      dctb_double_buffer_buffer_1_3[8:0];
      3'd1:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q128 =
	      dctb_double_buffer_buffer_1_3[17:9];
      3'd2:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q128 =
	      dctb_double_buffer_buffer_1_3[26:18];
      3'd3:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q128 =
	      dctb_double_buffer_buffer_1_3[35:27];
      3'd4:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q128 =
	      dctb_double_buffer_buffer_1_3[44:36];
      3'd5:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q128 =
	      dctb_double_buffer_buffer_1_3[53:45];
      3'd6:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q128 =
	      dctb_double_buffer_buffer_1_3[62:54];
      3'd7:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q128 =
	      dctb_double_buffer_buffer_1_3[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x9882_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q127 or
	  CASE_x9882_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q128)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1428 =
	      CASE_x9882_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q127;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1428 =
	      CASE_x9882_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q128;
    endcase
  end
  always@(x__h89882 or dctb_double_buffer_buffer_0_4)
  begin
    case (x__h89882)
      3'd0:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q129 =
	      dctb_double_buffer_buffer_0_4[8:0];
      3'd1:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q129 =
	      dctb_double_buffer_buffer_0_4[17:9];
      3'd2:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q129 =
	      dctb_double_buffer_buffer_0_4[26:18];
      3'd3:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q129 =
	      dctb_double_buffer_buffer_0_4[35:27];
      3'd4:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q129 =
	      dctb_double_buffer_buffer_0_4[44:36];
      3'd5:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q129 =
	      dctb_double_buffer_buffer_0_4[53:45];
      3'd6:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q129 =
	      dctb_double_buffer_buffer_0_4[62:54];
      3'd7:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q129 =
	      dctb_double_buffer_buffer_0_4[71:63];
    endcase
  end
  always@(x__h89882 or dctb_double_buffer_buffer_1_4)
  begin
    case (x__h89882)
      3'd0:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q130 =
	      dctb_double_buffer_buffer_1_4[8:0];
      3'd1:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q130 =
	      dctb_double_buffer_buffer_1_4[17:9];
      3'd2:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q130 =
	      dctb_double_buffer_buffer_1_4[26:18];
      3'd3:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q130 =
	      dctb_double_buffer_buffer_1_4[35:27];
      3'd4:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q130 =
	      dctb_double_buffer_buffer_1_4[44:36];
      3'd5:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q130 =
	      dctb_double_buffer_buffer_1_4[53:45];
      3'd6:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q130 =
	      dctb_double_buffer_buffer_1_4[62:54];
      3'd7:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q130 =
	      dctb_double_buffer_buffer_1_4[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x9882_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q129 or
	  CASE_x9882_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q130)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1432 =
	      CASE_x9882_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q129;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1432 =
	      CASE_x9882_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q130;
    endcase
  end
  always@(x__h89882 or dctb_double_buffer_buffer_0_5)
  begin
    case (x__h89882)
      3'd0:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q131 =
	      dctb_double_buffer_buffer_0_5[8:0];
      3'd1:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q131 =
	      dctb_double_buffer_buffer_0_5[17:9];
      3'd2:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q131 =
	      dctb_double_buffer_buffer_0_5[26:18];
      3'd3:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q131 =
	      dctb_double_buffer_buffer_0_5[35:27];
      3'd4:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q131 =
	      dctb_double_buffer_buffer_0_5[44:36];
      3'd5:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q131 =
	      dctb_double_buffer_buffer_0_5[53:45];
      3'd6:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q131 =
	      dctb_double_buffer_buffer_0_5[62:54];
      3'd7:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q131 =
	      dctb_double_buffer_buffer_0_5[71:63];
    endcase
  end
  always@(x__h89882 or dctb_double_buffer_buffer_1_5)
  begin
    case (x__h89882)
      3'd0:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q132 =
	      dctb_double_buffer_buffer_1_5[8:0];
      3'd1:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q132 =
	      dctb_double_buffer_buffer_1_5[17:9];
      3'd2:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q132 =
	      dctb_double_buffer_buffer_1_5[26:18];
      3'd3:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q132 =
	      dctb_double_buffer_buffer_1_5[35:27];
      3'd4:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q132 =
	      dctb_double_buffer_buffer_1_5[44:36];
      3'd5:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q132 =
	      dctb_double_buffer_buffer_1_5[53:45];
      3'd6:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q132 =
	      dctb_double_buffer_buffer_1_5[62:54];
      3'd7:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q132 =
	      dctb_double_buffer_buffer_1_5[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x9882_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q131 or
	  CASE_x9882_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q132)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1436 =
	      CASE_x9882_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q131;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1436 =
	      CASE_x9882_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q132;
    endcase
  end
  always@(x__h89882 or dctb_double_buffer_buffer_0_6)
  begin
    case (x__h89882)
      3'd0:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q133 =
	      dctb_double_buffer_buffer_0_6[8:0];
      3'd1:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q133 =
	      dctb_double_buffer_buffer_0_6[17:9];
      3'd2:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q133 =
	      dctb_double_buffer_buffer_0_6[26:18];
      3'd3:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q133 =
	      dctb_double_buffer_buffer_0_6[35:27];
      3'd4:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q133 =
	      dctb_double_buffer_buffer_0_6[44:36];
      3'd5:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q133 =
	      dctb_double_buffer_buffer_0_6[53:45];
      3'd6:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q133 =
	      dctb_double_buffer_buffer_0_6[62:54];
      3'd7:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q133 =
	      dctb_double_buffer_buffer_0_6[71:63];
    endcase
  end
  always@(x__h89882 or dctb_double_buffer_buffer_1_6)
  begin
    case (x__h89882)
      3'd0:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q134 =
	      dctb_double_buffer_buffer_1_6[8:0];
      3'd1:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q134 =
	      dctb_double_buffer_buffer_1_6[17:9];
      3'd2:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q134 =
	      dctb_double_buffer_buffer_1_6[26:18];
      3'd3:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q134 =
	      dctb_double_buffer_buffer_1_6[35:27];
      3'd4:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q134 =
	      dctb_double_buffer_buffer_1_6[44:36];
      3'd5:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q134 =
	      dctb_double_buffer_buffer_1_6[53:45];
      3'd6:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q134 =
	      dctb_double_buffer_buffer_1_6[62:54];
      3'd7:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q134 =
	      dctb_double_buffer_buffer_1_6[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x9882_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q133 or
	  CASE_x9882_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q134)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1440 =
	      CASE_x9882_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q133;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1440 =
	      CASE_x9882_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q134;
    endcase
  end
  always@(x__h89882 or dctb_double_buffer_buffer_0_7)
  begin
    case (x__h89882)
      3'd0:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q135 =
	      dctb_double_buffer_buffer_0_7[8:0];
      3'd1:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q135 =
	      dctb_double_buffer_buffer_0_7[17:9];
      3'd2:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q135 =
	      dctb_double_buffer_buffer_0_7[26:18];
      3'd3:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q135 =
	      dctb_double_buffer_buffer_0_7[35:27];
      3'd4:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q135 =
	      dctb_double_buffer_buffer_0_7[44:36];
      3'd5:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q135 =
	      dctb_double_buffer_buffer_0_7[53:45];
      3'd6:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q135 =
	      dctb_double_buffer_buffer_0_7[62:54];
      3'd7:
	  CASE_x9882_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q135 =
	      dctb_double_buffer_buffer_0_7[71:63];
    endcase
  end
  always@(x__h89882 or dctb_double_buffer_buffer_1_7)
  begin
    case (x__h89882)
      3'd0:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q136 =
	      dctb_double_buffer_buffer_1_7[8:0];
      3'd1:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q136 =
	      dctb_double_buffer_buffer_1_7[17:9];
      3'd2:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q136 =
	      dctb_double_buffer_buffer_1_7[26:18];
      3'd3:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q136 =
	      dctb_double_buffer_buffer_1_7[35:27];
      3'd4:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q136 =
	      dctb_double_buffer_buffer_1_7[44:36];
      3'd5:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q136 =
	      dctb_double_buffer_buffer_1_7[53:45];
      3'd6:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q136 =
	      dctb_double_buffer_buffer_1_7[62:54];
      3'd7:
	  CASE_x9882_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q136 =
	      dctb_double_buffer_buffer_1_7[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x9882_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q135 or
	  CASE_x9882_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q136)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1444 =
	      CASE_x9882_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q135;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1444 =
	      CASE_x9882_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q136;
    endcase
  end
  always@(x__h90608 or dctb_double_buffer_buffer_0_0)
  begin
    case (x__h90608)
      3'd0:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q137 =
	      dctb_double_buffer_buffer_0_0[8:0];
      3'd1:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q137 =
	      dctb_double_buffer_buffer_0_0[17:9];
      3'd2:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q137 =
	      dctb_double_buffer_buffer_0_0[26:18];
      3'd3:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q137 =
	      dctb_double_buffer_buffer_0_0[35:27];
      3'd4:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q137 =
	      dctb_double_buffer_buffer_0_0[44:36];
      3'd5:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q137 =
	      dctb_double_buffer_buffer_0_0[53:45];
      3'd6:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q137 =
	      dctb_double_buffer_buffer_0_0[62:54];
      3'd7:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q137 =
	      dctb_double_buffer_buffer_0_0[71:63];
    endcase
  end
  always@(x__h90608 or dctb_double_buffer_buffer_1_0)
  begin
    case (x__h90608)
      3'd0:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q138 =
	      dctb_double_buffer_buffer_1_0[8:0];
      3'd1:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q138 =
	      dctb_double_buffer_buffer_1_0[17:9];
      3'd2:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q138 =
	      dctb_double_buffer_buffer_1_0[26:18];
      3'd3:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q138 =
	      dctb_double_buffer_buffer_1_0[35:27];
      3'd4:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q138 =
	      dctb_double_buffer_buffer_1_0[44:36];
      3'd5:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q138 =
	      dctb_double_buffer_buffer_1_0[53:45];
      3'd6:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q138 =
	      dctb_double_buffer_buffer_1_0[62:54];
      3'd7:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q138 =
	      dctb_double_buffer_buffer_1_0[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x0608_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q137 or
	  CASE_x0608_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q138)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1454 =
	      CASE_x0608_0_dctb_double_buffer_buffer_0_0_BIT_ETC__q137;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_0__ETC___d1454 =
	      CASE_x0608_0_dctb_double_buffer_buffer_1_0_BIT_ETC__q138;
    endcase
  end
  always@(x__h90608 or dctb_double_buffer_buffer_0_1)
  begin
    case (x__h90608)
      3'd0:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q139 =
	      dctb_double_buffer_buffer_0_1[8:0];
      3'd1:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q139 =
	      dctb_double_buffer_buffer_0_1[17:9];
      3'd2:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q139 =
	      dctb_double_buffer_buffer_0_1[26:18];
      3'd3:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q139 =
	      dctb_double_buffer_buffer_0_1[35:27];
      3'd4:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q139 =
	      dctb_double_buffer_buffer_0_1[44:36];
      3'd5:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q139 =
	      dctb_double_buffer_buffer_0_1[53:45];
      3'd6:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q139 =
	      dctb_double_buffer_buffer_0_1[62:54];
      3'd7:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q139 =
	      dctb_double_buffer_buffer_0_1[71:63];
    endcase
  end
  always@(x__h90608 or dctb_double_buffer_buffer_1_1)
  begin
    case (x__h90608)
      3'd0:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q140 =
	      dctb_double_buffer_buffer_1_1[8:0];
      3'd1:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q140 =
	      dctb_double_buffer_buffer_1_1[17:9];
      3'd2:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q140 =
	      dctb_double_buffer_buffer_1_1[26:18];
      3'd3:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q140 =
	      dctb_double_buffer_buffer_1_1[35:27];
      3'd4:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q140 =
	      dctb_double_buffer_buffer_1_1[44:36];
      3'd5:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q140 =
	      dctb_double_buffer_buffer_1_1[53:45];
      3'd6:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q140 =
	      dctb_double_buffer_buffer_1_1[62:54];
      3'd7:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q140 =
	      dctb_double_buffer_buffer_1_1[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x0608_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q139 or
	  CASE_x0608_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q140)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1458 =
	      CASE_x0608_0_dctb_double_buffer_buffer_0_1_BIT_ETC__q139;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_1__ETC___d1458 =
	      CASE_x0608_0_dctb_double_buffer_buffer_1_1_BIT_ETC__q140;
    endcase
  end
  always@(x__h90608 or dctb_double_buffer_buffer_0_2)
  begin
    case (x__h90608)
      3'd0:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q141 =
	      dctb_double_buffer_buffer_0_2[8:0];
      3'd1:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q141 =
	      dctb_double_buffer_buffer_0_2[17:9];
      3'd2:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q141 =
	      dctb_double_buffer_buffer_0_2[26:18];
      3'd3:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q141 =
	      dctb_double_buffer_buffer_0_2[35:27];
      3'd4:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q141 =
	      dctb_double_buffer_buffer_0_2[44:36];
      3'd5:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q141 =
	      dctb_double_buffer_buffer_0_2[53:45];
      3'd6:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q141 =
	      dctb_double_buffer_buffer_0_2[62:54];
      3'd7:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q141 =
	      dctb_double_buffer_buffer_0_2[71:63];
    endcase
  end
  always@(x__h90608 or dctb_double_buffer_buffer_1_2)
  begin
    case (x__h90608)
      3'd0:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q142 =
	      dctb_double_buffer_buffer_1_2[8:0];
      3'd1:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q142 =
	      dctb_double_buffer_buffer_1_2[17:9];
      3'd2:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q142 =
	      dctb_double_buffer_buffer_1_2[26:18];
      3'd3:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q142 =
	      dctb_double_buffer_buffer_1_2[35:27];
      3'd4:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q142 =
	      dctb_double_buffer_buffer_1_2[44:36];
      3'd5:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q142 =
	      dctb_double_buffer_buffer_1_2[53:45];
      3'd6:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q142 =
	      dctb_double_buffer_buffer_1_2[62:54];
      3'd7:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q142 =
	      dctb_double_buffer_buffer_1_2[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x0608_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q141 or
	  CASE_x0608_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q142)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1462 =
	      CASE_x0608_0_dctb_double_buffer_buffer_0_2_BIT_ETC__q141;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_2__ETC___d1462 =
	      CASE_x0608_0_dctb_double_buffer_buffer_1_2_BIT_ETC__q142;
    endcase
  end
  always@(x__h90608 or dctb_double_buffer_buffer_0_3)
  begin
    case (x__h90608)
      3'd0:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q143 =
	      dctb_double_buffer_buffer_0_3[8:0];
      3'd1:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q143 =
	      dctb_double_buffer_buffer_0_3[17:9];
      3'd2:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q143 =
	      dctb_double_buffer_buffer_0_3[26:18];
      3'd3:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q143 =
	      dctb_double_buffer_buffer_0_3[35:27];
      3'd4:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q143 =
	      dctb_double_buffer_buffer_0_3[44:36];
      3'd5:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q143 =
	      dctb_double_buffer_buffer_0_3[53:45];
      3'd6:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q143 =
	      dctb_double_buffer_buffer_0_3[62:54];
      3'd7:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q143 =
	      dctb_double_buffer_buffer_0_3[71:63];
    endcase
  end
  always@(x__h90608 or dctb_double_buffer_buffer_1_3)
  begin
    case (x__h90608)
      3'd0:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q144 =
	      dctb_double_buffer_buffer_1_3[8:0];
      3'd1:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q144 =
	      dctb_double_buffer_buffer_1_3[17:9];
      3'd2:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q144 =
	      dctb_double_buffer_buffer_1_3[26:18];
      3'd3:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q144 =
	      dctb_double_buffer_buffer_1_3[35:27];
      3'd4:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q144 =
	      dctb_double_buffer_buffer_1_3[44:36];
      3'd5:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q144 =
	      dctb_double_buffer_buffer_1_3[53:45];
      3'd6:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q144 =
	      dctb_double_buffer_buffer_1_3[62:54];
      3'd7:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q144 =
	      dctb_double_buffer_buffer_1_3[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x0608_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q143 or
	  CASE_x0608_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q144)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1466 =
	      CASE_x0608_0_dctb_double_buffer_buffer_0_3_BIT_ETC__q143;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_3__ETC___d1466 =
	      CASE_x0608_0_dctb_double_buffer_buffer_1_3_BIT_ETC__q144;
    endcase
  end
  always@(x__h90608 or dctb_double_buffer_buffer_0_4)
  begin
    case (x__h90608)
      3'd0:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q145 =
	      dctb_double_buffer_buffer_0_4[8:0];
      3'd1:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q145 =
	      dctb_double_buffer_buffer_0_4[17:9];
      3'd2:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q145 =
	      dctb_double_buffer_buffer_0_4[26:18];
      3'd3:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q145 =
	      dctb_double_buffer_buffer_0_4[35:27];
      3'd4:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q145 =
	      dctb_double_buffer_buffer_0_4[44:36];
      3'd5:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q145 =
	      dctb_double_buffer_buffer_0_4[53:45];
      3'd6:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q145 =
	      dctb_double_buffer_buffer_0_4[62:54];
      3'd7:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q145 =
	      dctb_double_buffer_buffer_0_4[71:63];
    endcase
  end
  always@(x__h90608 or dctb_double_buffer_buffer_1_4)
  begin
    case (x__h90608)
      3'd0:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q146 =
	      dctb_double_buffer_buffer_1_4[8:0];
      3'd1:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q146 =
	      dctb_double_buffer_buffer_1_4[17:9];
      3'd2:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q146 =
	      dctb_double_buffer_buffer_1_4[26:18];
      3'd3:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q146 =
	      dctb_double_buffer_buffer_1_4[35:27];
      3'd4:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q146 =
	      dctb_double_buffer_buffer_1_4[44:36];
      3'd5:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q146 =
	      dctb_double_buffer_buffer_1_4[53:45];
      3'd6:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q146 =
	      dctb_double_buffer_buffer_1_4[62:54];
      3'd7:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q146 =
	      dctb_double_buffer_buffer_1_4[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x0608_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q145 or
	  CASE_x0608_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q146)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1470 =
	      CASE_x0608_0_dctb_double_buffer_buffer_0_4_BIT_ETC__q145;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_4__ETC___d1470 =
	      CASE_x0608_0_dctb_double_buffer_buffer_1_4_BIT_ETC__q146;
    endcase
  end
  always@(x__h90608 or dctb_double_buffer_buffer_0_5)
  begin
    case (x__h90608)
      3'd0:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q147 =
	      dctb_double_buffer_buffer_0_5[8:0];
      3'd1:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q147 =
	      dctb_double_buffer_buffer_0_5[17:9];
      3'd2:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q147 =
	      dctb_double_buffer_buffer_0_5[26:18];
      3'd3:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q147 =
	      dctb_double_buffer_buffer_0_5[35:27];
      3'd4:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q147 =
	      dctb_double_buffer_buffer_0_5[44:36];
      3'd5:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q147 =
	      dctb_double_buffer_buffer_0_5[53:45];
      3'd6:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q147 =
	      dctb_double_buffer_buffer_0_5[62:54];
      3'd7:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q147 =
	      dctb_double_buffer_buffer_0_5[71:63];
    endcase
  end
  always@(x__h90608 or dctb_double_buffer_buffer_1_5)
  begin
    case (x__h90608)
      3'd0:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q148 =
	      dctb_double_buffer_buffer_1_5[8:0];
      3'd1:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q148 =
	      dctb_double_buffer_buffer_1_5[17:9];
      3'd2:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q148 =
	      dctb_double_buffer_buffer_1_5[26:18];
      3'd3:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q148 =
	      dctb_double_buffer_buffer_1_5[35:27];
      3'd4:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q148 =
	      dctb_double_buffer_buffer_1_5[44:36];
      3'd5:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q148 =
	      dctb_double_buffer_buffer_1_5[53:45];
      3'd6:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q148 =
	      dctb_double_buffer_buffer_1_5[62:54];
      3'd7:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q148 =
	      dctb_double_buffer_buffer_1_5[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x0608_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q147 or
	  CASE_x0608_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q148)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1474 =
	      CASE_x0608_0_dctb_double_buffer_buffer_0_5_BIT_ETC__q147;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_5__ETC___d1474 =
	      CASE_x0608_0_dctb_double_buffer_buffer_1_5_BIT_ETC__q148;
    endcase
  end
  always@(x__h90608 or dctb_double_buffer_buffer_0_6)
  begin
    case (x__h90608)
      3'd0:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q149 =
	      dctb_double_buffer_buffer_0_6[8:0];
      3'd1:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q149 =
	      dctb_double_buffer_buffer_0_6[17:9];
      3'd2:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q149 =
	      dctb_double_buffer_buffer_0_6[26:18];
      3'd3:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q149 =
	      dctb_double_buffer_buffer_0_6[35:27];
      3'd4:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q149 =
	      dctb_double_buffer_buffer_0_6[44:36];
      3'd5:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q149 =
	      dctb_double_buffer_buffer_0_6[53:45];
      3'd6:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q149 =
	      dctb_double_buffer_buffer_0_6[62:54];
      3'd7:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q149 =
	      dctb_double_buffer_buffer_0_6[71:63];
    endcase
  end
  always@(x__h90608 or dctb_double_buffer_buffer_1_6)
  begin
    case (x__h90608)
      3'd0:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q150 =
	      dctb_double_buffer_buffer_1_6[8:0];
      3'd1:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q150 =
	      dctb_double_buffer_buffer_1_6[17:9];
      3'd2:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q150 =
	      dctb_double_buffer_buffer_1_6[26:18];
      3'd3:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q150 =
	      dctb_double_buffer_buffer_1_6[35:27];
      3'd4:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q150 =
	      dctb_double_buffer_buffer_1_6[44:36];
      3'd5:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q150 =
	      dctb_double_buffer_buffer_1_6[53:45];
      3'd6:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q150 =
	      dctb_double_buffer_buffer_1_6[62:54];
      3'd7:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q150 =
	      dctb_double_buffer_buffer_1_6[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x0608_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q149 or
	  CASE_x0608_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q150)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1478 =
	      CASE_x0608_0_dctb_double_buffer_buffer_0_6_BIT_ETC__q149;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_6__ETC___d1478 =
	      CASE_x0608_0_dctb_double_buffer_buffer_1_6_BIT_ETC__q150;
    endcase
  end
  always@(x__h90608 or dctb_double_buffer_buffer_0_7)
  begin
    case (x__h90608)
      3'd0:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q151 =
	      dctb_double_buffer_buffer_0_7[8:0];
      3'd1:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q151 =
	      dctb_double_buffer_buffer_0_7[17:9];
      3'd2:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q151 =
	      dctb_double_buffer_buffer_0_7[26:18];
      3'd3:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q151 =
	      dctb_double_buffer_buffer_0_7[35:27];
      3'd4:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q151 =
	      dctb_double_buffer_buffer_0_7[44:36];
      3'd5:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q151 =
	      dctb_double_buffer_buffer_0_7[53:45];
      3'd6:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q151 =
	      dctb_double_buffer_buffer_0_7[62:54];
      3'd7:
	  CASE_x0608_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q151 =
	      dctb_double_buffer_buffer_0_7[71:63];
    endcase
  end
  always@(x__h90608 or dctb_double_buffer_buffer_1_7)
  begin
    case (x__h90608)
      3'd0:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q152 =
	      dctb_double_buffer_buffer_1_7[8:0];
      3'd1:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q152 =
	      dctb_double_buffer_buffer_1_7[17:9];
      3'd2:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q152 =
	      dctb_double_buffer_buffer_1_7[26:18];
      3'd3:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q152 =
	      dctb_double_buffer_buffer_1_7[35:27];
      3'd4:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q152 =
	      dctb_double_buffer_buffer_1_7[44:36];
      3'd5:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q152 =
	      dctb_double_buffer_buffer_1_7[53:45];
      3'd6:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q152 =
	      dctb_double_buffer_buffer_1_7[62:54];
      3'd7:
	  CASE_x0608_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q152 =
	      dctb_double_buffer_buffer_1_7[71:63];
    endcase
  end
  always@(dctb_double_buffer_rblock or
	  CASE_x0608_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q151 or
	  CASE_x0608_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q152)
  begin
    case (dctb_double_buffer_rblock[0])
      1'd0:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1482 =
	      CASE_x0608_0_dctb_double_buffer_buffer_0_7_BIT_ETC__q151;
      1'd1:
	  SEL_ARR_SEL_ARR_dctb_double_buffer_buffer_0_7__ETC___d1482 =
	      CASE_x0608_0_dctb_double_buffer_buffer_1_7_BIT_ETC__q152;
    endcase
  end
  always@(header_idx or x_y_bytes)
  begin
    case (header_idx)
      5'd0:
	  CASE_header_idx_0_0xFFD8000000FFE000104A464946_ETC__q187 =
	      128'hFFD8000000FFE000104A464946000101;
      5'd1:
	  CASE_header_idx_0_0xFFD8000000FFE000104A464946_ETC__q187 =
	      128'h00000100010000FFDB00430010080808;
      5'd2:
	  CASE_header_idx_0_0xFFD8000000FFE000104A464946_ETC__q187 =
	      128'h08080808080808080808080810101010;
      5'd3:
	  CASE_header_idx_0_0xFFD8000000FFE000104A464946_ETC__q187 =
	      128'h10101010101010101010101020202020;
      5'd4:
	  CASE_header_idx_0_0xFFD8000000FFE000104A464946_ETC__q187 =
	      128'h20202020202020202020202040404040;
      5'd5:
	  CASE_header_idx_0_0xFFD8000000FFE000104A464946_ETC__q187 =
	      128'h404040404040404040404040FFC0000B;
      5'd6:
	  CASE_header_idx_0_0xFFD8000000FFE000104A464946_ETC__q187 =
	      { 8'h08, x_y_bytes, 88'h01011100FFC400AB000000 };
      5'd7:
	  CASE_header_idx_0_0xFFD8000000FFE000104A464946_ETC__q187 =
	      128'h00000000000800000000000000000102;
      5'd8:
	  CASE_header_idx_0_0xFFD8000000FFE000104A464946_ETC__q187 =
	      128'h03040506070010000000000000007F00;
      5'd9:
	  CASE_header_idx_0_0xFFD8000000FFE000104A464946_ETC__q187 =
	      128'h0000000000000001020304050607F011;
      5'd10:
	  CASE_header_idx_0_0xFFD8000000FFE000104A464946_ETC__q187 =
	      128'h12131415161700212223242526272831;
      5'd11:
	  CASE_header_idx_0_0xFFD8000000FFE000104A464946_ETC__q187 =
	      128'h32333435363738414243444546474851;
      5'd12:
	  CASE_header_idx_0_0xFFD8000000FFE000104A464946_ETC__q187 =
	      128'h52535455565758616263646566676871;
      5'd13:
	  CASE_header_idx_0_0xFFD8000000FFE000104A464946_ETC__q187 =
	      128'h72737475767778818283848586878891;
      5'd14:
	  CASE_header_idx_0_0xFFD8000000FFE000104A464946_ETC__q187 =
	      128'h92939495969798A1A2A3A4A5A6A7A8B1;
      5'd15:
	  CASE_header_idx_0_0xFFD8000000FFE000104A464946_ETC__q187 =
	      128'hB2B3B4B5B6B7B8C1C2C3C4C5C6C7C8D1;
      5'd16:
	  CASE_header_idx_0_0xFFD8000000FFE000104A464946_ETC__q187 =
	      128'hD2D3D4D5D6D7D8E1E2E3E4E5E6E7E8F1;
      5'd17:
	  CASE_header_idx_0_0xFFD8000000FFE000104A464946_ETC__q187 =
	      128'hF2F3F4F5F6F7FFDA0008010100003F00;
      default: CASE_header_idx_0_0xFFD8000000FFE000104A464946_ETC__q187 =
		   128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        c_code_0 <= `BSV_ASSIGNMENT_DELAY 7'd0;
	c_code_1 <= `BSV_ASSIGNMENT_DELAY 7'd0;
	c_code_2 <= `BSV_ASSIGNMENT_DELAY 7'd0;
	c_code_3 <= `BSV_ASSIGNMENT_DELAY 7'd0;
	c_code_4 <= `BSV_ASSIGNMENT_DELAY 7'd0;
	c_code_5 <= `BSV_ASSIGNMENT_DELAY 7'd0;
	c_code_6 <= `BSV_ASSIGNMENT_DELAY 7'd0;
	c_code_7 <= `BSV_ASSIGNMENT_DELAY 7'd0;
	c_len_0 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	c_len_1 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	c_len_2 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	c_len_3 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	c_len_4 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	c_len_5 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	c_len_6 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	c_len_7 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	c_prev_zcnt <= `BSV_ASSIGNMENT_DELAY 4'd0;
	c_valid_0_self_reg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	c_valid_1_self_reg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	c_valid_2_self_reg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	c_valid_3_self_reg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	c_valid_4_self_reg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	c_valid_5_self_reg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	c_valid_6_self_reg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	c_valid_7_self_reg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	c_zcnt_0 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	c_zcnt_1 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	c_zcnt_2 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	c_zcnt_3 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	c_zcnt_4 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	c_zcnt_5 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	c_zcnt_6 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	c_zcnt_7 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	dcta_double_buffer_rblock <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dcta_double_buffer_rcnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dcta_double_buffer_wblock <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dcta_double_buffer_wptr <= `BSV_ASSIGNMENT_DELAY 3'd0;
	dctb_double_buffer_rblock <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dctb_double_buffer_rcnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dctb_double_buffer_wblock <= `BSV_ASSIGNMENT_DELAY 2'd0;
	dctb_double_buffer_wptr <= `BSV_ASSIGNMENT_DELAY 3'd0;
	fsm_par_blocks_1_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_par_blocks_1_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fsm_par_blocks_1_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_par_blocks_1_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 3'd0;
	fsm_par_blocks_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_par_blocks_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fsm_par_blocks_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_par_blocks_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 3'd0;
	fsm_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fsm_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 4'd0;
	header_idx <= `BSV_ASSIGNMENT_DELAY 5'd0;
	inout_cnt <= `BSV_ASSIGNMENT_DELAY 24'd0;
	input_idx <= `BSV_ASSIGNMENT_DELAY 24'd0;
	j_data_self_reg <= `BSV_ASSIGNMENT_DELAY
	    129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	linebuf_maxi <= `BSV_ASSIGNMENT_DELAY 3'd0;
	linebuf_maxj <= `BSV_ASSIGNMENT_DELAY 9'd0;
	linebuf_ram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	linebuf_ram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	linebuf_ram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	linebuf_ram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	linebuf_rblock <= `BSV_ASSIGNMENT_DELAY 2'd0;
	linebuf_reversei <= `BSV_ASSIGNMENT_DELAY 1'd0;
	linebuf_reversej <= `BSV_ASSIGNMENT_DELAY 1'd0;
	linebuf_ri <= `BSV_ASSIGNMENT_DELAY 3'd0;
	linebuf_rj <= `BSV_ASSIGNMENT_DELAY 9'd0;
	linebuf_transposeij <= `BSV_ASSIGNMENT_DELAY 1'd0;
	linebuf_wblock <= `BSV_ASSIGNMENT_DELAY 2'd0;
	linebuf_wi <= `BSV_ASSIGNMENT_DELAY 3'd0;
	linebuf_wj <= `BSV_ASSIGNMENT_DELAY 9'd0;
	lm_bits_self_reg <= `BSV_ASSIGNMENT_DELAY
	    121'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	lm_len <= `BSV_ASSIGNMENT_DELAY 8'd0;
	norm_pixels_0_self_reg <= `BSV_ASSIGNMENT_DELAY 9'd170;
	norm_pixels_1_self_reg <= `BSV_ASSIGNMENT_DELAY 9'd170;
	norm_pixels_2_self_reg <= `BSV_ASSIGNMENT_DELAY 9'd170;
	norm_pixels_3_self_reg <= `BSV_ASSIGNMENT_DELAY 9'd170;
	norm_pixels_4_self_reg <= `BSV_ASSIGNMENT_DELAY 9'd170;
	norm_pixels_5_self_reg <= `BSV_ASSIGNMENT_DELAY 9'd170;
	norm_pixels_6_self_reg <= `BSV_ASSIGNMENT_DELAY 9'd170;
	norm_pixels_7_self_reg <= `BSV_ASSIGNMENT_DELAY 9'd170;
	output_idx <= `BSV_ASSIGNMENT_DELAY 24'd0;
	pm_bits_0 <= `BSV_ASSIGNMENT_DELAY 14'd0;
	pm_bits_1 <= `BSV_ASSIGNMENT_DELAY 14'd0;
	pm_bits_2 <= `BSV_ASSIGNMENT_DELAY 14'd0;
	pm_bits_3 <= `BSV_ASSIGNMENT_DELAY 14'd0;
	pm_bits_4 <= `BSV_ASSIGNMENT_DELAY 14'd0;
	pm_bits_5 <= `BSV_ASSIGNMENT_DELAY 14'd0;
	pm_bits_6 <= `BSV_ASSIGNMENT_DELAY 14'd0;
	pm_bits_7 <= `BSV_ASSIGNMENT_DELAY 14'd0;
	pm_en <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pm_len_0 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	pm_len_1 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	pm_len_2 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	pm_len_3 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	pm_len_4 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	pm_len_5 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	pm_len_6 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	pm_len_7 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	qnt_pixels <= `BSV_ASSIGNMENT_DELAY 64'd0;
	qnt_prev_dc <= `BSV_ASSIGNMENT_DELAY 8'd0;
	qnt_sy_self_reg <= `BSV_ASSIGNMENT_DELAY 4'd2;
	st_rem_bits <= `BSV_ASSIGNMENT_DELAY 128'd0;
	st_rem_len <= `BSV_ASSIGNMENT_DELAY 8'd0;
	x_y_bytes <= `BSV_ASSIGNMENT_DELAY 32'd0;
	zig_pixels_0 <= `BSV_ASSIGNMENT_DELAY 9'd0;
	zig_pixels_1 <= `BSV_ASSIGNMENT_DELAY 9'd0;
	zig_pixels_2 <= `BSV_ASSIGNMENT_DELAY 9'd0;
	zig_pixels_3 <= `BSV_ASSIGNMENT_DELAY 9'd0;
	zig_pixels_4 <= `BSV_ASSIGNMENT_DELAY 9'd0;
	zig_pixels_5 <= `BSV_ASSIGNMENT_DELAY 9'd0;
	zig_pixels_6 <= `BSV_ASSIGNMENT_DELAY 9'd0;
	zig_pixels_7 <= `BSV_ASSIGNMENT_DELAY 9'd0;
	zig_sy_self_reg <= `BSV_ASSIGNMENT_DELAY 4'd2;
      end
    else
      begin
        if (c_code_0$EN) c_code_0 <= `BSV_ASSIGNMENT_DELAY c_code_0$D_IN;
	if (c_code_1$EN) c_code_1 <= `BSV_ASSIGNMENT_DELAY c_code_1$D_IN;
	if (c_code_2$EN) c_code_2 <= `BSV_ASSIGNMENT_DELAY c_code_2$D_IN;
	if (c_code_3$EN) c_code_3 <= `BSV_ASSIGNMENT_DELAY c_code_3$D_IN;
	if (c_code_4$EN) c_code_4 <= `BSV_ASSIGNMENT_DELAY c_code_4$D_IN;
	if (c_code_5$EN) c_code_5 <= `BSV_ASSIGNMENT_DELAY c_code_5$D_IN;
	if (c_code_6$EN) c_code_6 <= `BSV_ASSIGNMENT_DELAY c_code_6$D_IN;
	if (c_code_7$EN) c_code_7 <= `BSV_ASSIGNMENT_DELAY c_code_7$D_IN;
	if (c_len_0$EN) c_len_0 <= `BSV_ASSIGNMENT_DELAY c_len_0$D_IN;
	if (c_len_1$EN) c_len_1 <= `BSV_ASSIGNMENT_DELAY c_len_1$D_IN;
	if (c_len_2$EN) c_len_2 <= `BSV_ASSIGNMENT_DELAY c_len_2$D_IN;
	if (c_len_3$EN) c_len_3 <= `BSV_ASSIGNMENT_DELAY c_len_3$D_IN;
	if (c_len_4$EN) c_len_4 <= `BSV_ASSIGNMENT_DELAY c_len_4$D_IN;
	if (c_len_5$EN) c_len_5 <= `BSV_ASSIGNMENT_DELAY c_len_5$D_IN;
	if (c_len_6$EN) c_len_6 <= `BSV_ASSIGNMENT_DELAY c_len_6$D_IN;
	if (c_len_7$EN) c_len_7 <= `BSV_ASSIGNMENT_DELAY c_len_7$D_IN;
	if (c_prev_zcnt$EN)
	  c_prev_zcnt <= `BSV_ASSIGNMENT_DELAY c_prev_zcnt$D_IN;
	if (c_valid_0_self_reg$EN)
	  c_valid_0_self_reg <= `BSV_ASSIGNMENT_DELAY c_valid_0_self_reg$D_IN;
	if (c_valid_1_self_reg$EN)
	  c_valid_1_self_reg <= `BSV_ASSIGNMENT_DELAY c_valid_1_self_reg$D_IN;
	if (c_valid_2_self_reg$EN)
	  c_valid_2_self_reg <= `BSV_ASSIGNMENT_DELAY c_valid_2_self_reg$D_IN;
	if (c_valid_3_self_reg$EN)
	  c_valid_3_self_reg <= `BSV_ASSIGNMENT_DELAY c_valid_3_self_reg$D_IN;
	if (c_valid_4_self_reg$EN)
	  c_valid_4_self_reg <= `BSV_ASSIGNMENT_DELAY c_valid_4_self_reg$D_IN;
	if (c_valid_5_self_reg$EN)
	  c_valid_5_self_reg <= `BSV_ASSIGNMENT_DELAY c_valid_5_self_reg$D_IN;
	if (c_valid_6_self_reg$EN)
	  c_valid_6_self_reg <= `BSV_ASSIGNMENT_DELAY c_valid_6_self_reg$D_IN;
	if (c_valid_7_self_reg$EN)
	  c_valid_7_self_reg <= `BSV_ASSIGNMENT_DELAY c_valid_7_self_reg$D_IN;
	if (c_zcnt_0$EN) c_zcnt_0 <= `BSV_ASSIGNMENT_DELAY c_zcnt_0$D_IN;
	if (c_zcnt_1$EN) c_zcnt_1 <= `BSV_ASSIGNMENT_DELAY c_zcnt_1$D_IN;
	if (c_zcnt_2$EN) c_zcnt_2 <= `BSV_ASSIGNMENT_DELAY c_zcnt_2$D_IN;
	if (c_zcnt_3$EN) c_zcnt_3 <= `BSV_ASSIGNMENT_DELAY c_zcnt_3$D_IN;
	if (c_zcnt_4$EN) c_zcnt_4 <= `BSV_ASSIGNMENT_DELAY c_zcnt_4$D_IN;
	if (c_zcnt_5$EN) c_zcnt_5 <= `BSV_ASSIGNMENT_DELAY c_zcnt_5$D_IN;
	if (c_zcnt_6$EN) c_zcnt_6 <= `BSV_ASSIGNMENT_DELAY c_zcnt_6$D_IN;
	if (c_zcnt_7$EN) c_zcnt_7 <= `BSV_ASSIGNMENT_DELAY c_zcnt_7$D_IN;
	if (dcta_double_buffer_rblock$EN)
	  dcta_double_buffer_rblock <= `BSV_ASSIGNMENT_DELAY
	      dcta_double_buffer_rblock$D_IN;
	if (dcta_double_buffer_rcnt$EN)
	  dcta_double_buffer_rcnt <= `BSV_ASSIGNMENT_DELAY
	      dcta_double_buffer_rcnt$D_IN;
	if (dcta_double_buffer_wblock$EN)
	  dcta_double_buffer_wblock <= `BSV_ASSIGNMENT_DELAY
	      dcta_double_buffer_wblock$D_IN;
	if (dcta_double_buffer_wptr$EN)
	  dcta_double_buffer_wptr <= `BSV_ASSIGNMENT_DELAY
	      dcta_double_buffer_wptr$D_IN;
	if (dctb_double_buffer_rblock$EN)
	  dctb_double_buffer_rblock <= `BSV_ASSIGNMENT_DELAY
	      dctb_double_buffer_rblock$D_IN;
	if (dctb_double_buffer_rcnt$EN)
	  dctb_double_buffer_rcnt <= `BSV_ASSIGNMENT_DELAY
	      dctb_double_buffer_rcnt$D_IN;
	if (dctb_double_buffer_wblock$EN)
	  dctb_double_buffer_wblock <= `BSV_ASSIGNMENT_DELAY
	      dctb_double_buffer_wblock$D_IN;
	if (dctb_double_buffer_wptr$EN)
	  dctb_double_buffer_wptr <= `BSV_ASSIGNMENT_DELAY
	      dctb_double_buffer_wptr$D_IN;
	if (fsm_par_blocks_1_start_reg$EN)
	  fsm_par_blocks_1_start_reg <= `BSV_ASSIGNMENT_DELAY
	      fsm_par_blocks_1_start_reg$D_IN;
	if (fsm_par_blocks_1_state_can_overlap$EN)
	  fsm_par_blocks_1_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      fsm_par_blocks_1_state_can_overlap$D_IN;
	if (fsm_par_blocks_1_state_fired$EN)
	  fsm_par_blocks_1_state_fired <= `BSV_ASSIGNMENT_DELAY
	      fsm_par_blocks_1_state_fired$D_IN;
	if (fsm_par_blocks_1_state_mkFSMstate$EN)
	  fsm_par_blocks_1_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      fsm_par_blocks_1_state_mkFSMstate$D_IN;
	if (fsm_par_blocks_start_reg$EN)
	  fsm_par_blocks_start_reg <= `BSV_ASSIGNMENT_DELAY
	      fsm_par_blocks_start_reg$D_IN;
	if (fsm_par_blocks_state_can_overlap$EN)
	  fsm_par_blocks_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      fsm_par_blocks_state_can_overlap$D_IN;
	if (fsm_par_blocks_state_fired$EN)
	  fsm_par_blocks_state_fired <= `BSV_ASSIGNMENT_DELAY
	      fsm_par_blocks_state_fired$D_IN;
	if (fsm_par_blocks_state_mkFSMstate$EN)
	  fsm_par_blocks_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      fsm_par_blocks_state_mkFSMstate$D_IN;
	if (fsm_start_reg$EN)
	  fsm_start_reg <= `BSV_ASSIGNMENT_DELAY fsm_start_reg$D_IN;
	if (fsm_start_reg_1$EN)
	  fsm_start_reg_1 <= `BSV_ASSIGNMENT_DELAY fsm_start_reg_1$D_IN;
	if (fsm_state_can_overlap$EN)
	  fsm_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      fsm_state_can_overlap$D_IN;
	if (fsm_state_fired$EN)
	  fsm_state_fired <= `BSV_ASSIGNMENT_DELAY fsm_state_fired$D_IN;
	if (fsm_state_mkFSMstate$EN)
	  fsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      fsm_state_mkFSMstate$D_IN;
	if (header_idx$EN)
	  header_idx <= `BSV_ASSIGNMENT_DELAY header_idx$D_IN;
	if (inout_cnt$EN) inout_cnt <= `BSV_ASSIGNMENT_DELAY inout_cnt$D_IN;
	if (input_idx$EN) input_idx <= `BSV_ASSIGNMENT_DELAY input_idx$D_IN;
	if (j_data_self_reg$EN)
	  j_data_self_reg <= `BSV_ASSIGNMENT_DELAY j_data_self_reg$D_IN;
	if (linebuf_maxi$EN)
	  linebuf_maxi <= `BSV_ASSIGNMENT_DELAY linebuf_maxi$D_IN;
	if (linebuf_maxj$EN)
	  linebuf_maxj <= `BSV_ASSIGNMENT_DELAY linebuf_maxj$D_IN;
	if (linebuf_ram_serverAdapterA_cnt$EN)
	  linebuf_ram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      linebuf_ram_serverAdapterA_cnt$D_IN;
	if (linebuf_ram_serverAdapterA_s1$EN)
	  linebuf_ram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      linebuf_ram_serverAdapterA_s1$D_IN;
	if (linebuf_ram_serverAdapterB_cnt$EN)
	  linebuf_ram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      linebuf_ram_serverAdapterB_cnt$D_IN;
	if (linebuf_ram_serverAdapterB_s1$EN)
	  linebuf_ram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      linebuf_ram_serverAdapterB_s1$D_IN;
	if (linebuf_rblock$EN)
	  linebuf_rblock <= `BSV_ASSIGNMENT_DELAY linebuf_rblock$D_IN;
	if (linebuf_reversei$EN)
	  linebuf_reversei <= `BSV_ASSIGNMENT_DELAY linebuf_reversei$D_IN;
	if (linebuf_reversej$EN)
	  linebuf_reversej <= `BSV_ASSIGNMENT_DELAY linebuf_reversej$D_IN;
	if (linebuf_ri$EN)
	  linebuf_ri <= `BSV_ASSIGNMENT_DELAY linebuf_ri$D_IN;
	if (linebuf_rj$EN)
	  linebuf_rj <= `BSV_ASSIGNMENT_DELAY linebuf_rj$D_IN;
	if (linebuf_transposeij$EN)
	  linebuf_transposeij <= `BSV_ASSIGNMENT_DELAY
	      linebuf_transposeij$D_IN;
	if (linebuf_wblock$EN)
	  linebuf_wblock <= `BSV_ASSIGNMENT_DELAY linebuf_wblock$D_IN;
	if (linebuf_wi$EN)
	  linebuf_wi <= `BSV_ASSIGNMENT_DELAY linebuf_wi$D_IN;
	if (linebuf_wj$EN)
	  linebuf_wj <= `BSV_ASSIGNMENT_DELAY linebuf_wj$D_IN;
	if (lm_bits_self_reg$EN)
	  lm_bits_self_reg <= `BSV_ASSIGNMENT_DELAY lm_bits_self_reg$D_IN;
	if (lm_len$EN) lm_len <= `BSV_ASSIGNMENT_DELAY lm_len$D_IN;
	if (norm_pixels_0_self_reg$EN)
	  norm_pixels_0_self_reg <= `BSV_ASSIGNMENT_DELAY
	      norm_pixels_0_self_reg$D_IN;
	if (norm_pixels_1_self_reg$EN)
	  norm_pixels_1_self_reg <= `BSV_ASSIGNMENT_DELAY
	      norm_pixels_1_self_reg$D_IN;
	if (norm_pixels_2_self_reg$EN)
	  norm_pixels_2_self_reg <= `BSV_ASSIGNMENT_DELAY
	      norm_pixels_2_self_reg$D_IN;
	if (norm_pixels_3_self_reg$EN)
	  norm_pixels_3_self_reg <= `BSV_ASSIGNMENT_DELAY
	      norm_pixels_3_self_reg$D_IN;
	if (norm_pixels_4_self_reg$EN)
	  norm_pixels_4_self_reg <= `BSV_ASSIGNMENT_DELAY
	      norm_pixels_4_self_reg$D_IN;
	if (norm_pixels_5_self_reg$EN)
	  norm_pixels_5_self_reg <= `BSV_ASSIGNMENT_DELAY
	      norm_pixels_5_self_reg$D_IN;
	if (norm_pixels_6_self_reg$EN)
	  norm_pixels_6_self_reg <= `BSV_ASSIGNMENT_DELAY
	      norm_pixels_6_self_reg$D_IN;
	if (norm_pixels_7_self_reg$EN)
	  norm_pixels_7_self_reg <= `BSV_ASSIGNMENT_DELAY
	      norm_pixels_7_self_reg$D_IN;
	if (output_idx$EN)
	  output_idx <= `BSV_ASSIGNMENT_DELAY output_idx$D_IN;
	if (pm_bits_0$EN) pm_bits_0 <= `BSV_ASSIGNMENT_DELAY pm_bits_0$D_IN;
	if (pm_bits_1$EN) pm_bits_1 <= `BSV_ASSIGNMENT_DELAY pm_bits_1$D_IN;
	if (pm_bits_2$EN) pm_bits_2 <= `BSV_ASSIGNMENT_DELAY pm_bits_2$D_IN;
	if (pm_bits_3$EN) pm_bits_3 <= `BSV_ASSIGNMENT_DELAY pm_bits_3$D_IN;
	if (pm_bits_4$EN) pm_bits_4 <= `BSV_ASSIGNMENT_DELAY pm_bits_4$D_IN;
	if (pm_bits_5$EN) pm_bits_5 <= `BSV_ASSIGNMENT_DELAY pm_bits_5$D_IN;
	if (pm_bits_6$EN) pm_bits_6 <= `BSV_ASSIGNMENT_DELAY pm_bits_6$D_IN;
	if (pm_bits_7$EN) pm_bits_7 <= `BSV_ASSIGNMENT_DELAY pm_bits_7$D_IN;
	if (pm_en$EN) pm_en <= `BSV_ASSIGNMENT_DELAY pm_en$D_IN;
	if (pm_len_0$EN) pm_len_0 <= `BSV_ASSIGNMENT_DELAY pm_len_0$D_IN;
	if (pm_len_1$EN) pm_len_1 <= `BSV_ASSIGNMENT_DELAY pm_len_1$D_IN;
	if (pm_len_2$EN) pm_len_2 <= `BSV_ASSIGNMENT_DELAY pm_len_2$D_IN;
	if (pm_len_3$EN) pm_len_3 <= `BSV_ASSIGNMENT_DELAY pm_len_3$D_IN;
	if (pm_len_4$EN) pm_len_4 <= `BSV_ASSIGNMENT_DELAY pm_len_4$D_IN;
	if (pm_len_5$EN) pm_len_5 <= `BSV_ASSIGNMENT_DELAY pm_len_5$D_IN;
	if (pm_len_6$EN) pm_len_6 <= `BSV_ASSIGNMENT_DELAY pm_len_6$D_IN;
	if (pm_len_7$EN) pm_len_7 <= `BSV_ASSIGNMENT_DELAY pm_len_7$D_IN;
	if (qnt_pixels$EN)
	  qnt_pixels <= `BSV_ASSIGNMENT_DELAY qnt_pixels$D_IN;
	if (qnt_prev_dc$EN)
	  qnt_prev_dc <= `BSV_ASSIGNMENT_DELAY qnt_prev_dc$D_IN;
	if (qnt_sy_self_reg$EN)
	  qnt_sy_self_reg <= `BSV_ASSIGNMENT_DELAY qnt_sy_self_reg$D_IN;
	if (st_rem_bits$EN)
	  st_rem_bits <= `BSV_ASSIGNMENT_DELAY st_rem_bits$D_IN;
	if (st_rem_len$EN)
	  st_rem_len <= `BSV_ASSIGNMENT_DELAY st_rem_len$D_IN;
	if (x_y_bytes$EN) x_y_bytes <= `BSV_ASSIGNMENT_DELAY x_y_bytes$D_IN;
	if (zig_pixels_0$EN)
	  zig_pixels_0 <= `BSV_ASSIGNMENT_DELAY zig_pixels_0$D_IN;
	if (zig_pixels_1$EN)
	  zig_pixels_1 <= `BSV_ASSIGNMENT_DELAY zig_pixels_1$D_IN;
	if (zig_pixels_2$EN)
	  zig_pixels_2 <= `BSV_ASSIGNMENT_DELAY zig_pixels_2$D_IN;
	if (zig_pixels_3$EN)
	  zig_pixels_3 <= `BSV_ASSIGNMENT_DELAY zig_pixels_3$D_IN;
	if (zig_pixels_4$EN)
	  zig_pixels_4 <= `BSV_ASSIGNMENT_DELAY zig_pixels_4$D_IN;
	if (zig_pixels_5$EN)
	  zig_pixels_5 <= `BSV_ASSIGNMENT_DELAY zig_pixels_5$D_IN;
	if (zig_pixels_6$EN)
	  zig_pixels_6 <= `BSV_ASSIGNMENT_DELAY zig_pixels_6$D_IN;
	if (zig_pixels_7$EN)
	  zig_pixels_7 <= `BSV_ASSIGNMENT_DELAY zig_pixels_7$D_IN;
	if (zig_sy_self_reg$EN)
	  zig_sy_self_reg <= `BSV_ASSIGNMENT_DELAY zig_sy_self_reg$D_IN;
      end
    if (dcta_double_buffer_buffer_0_0$EN)
      dcta_double_buffer_buffer_0_0 <= `BSV_ASSIGNMENT_DELAY
	  dcta_double_buffer_buffer_0_0$D_IN;
    if (dcta_double_buffer_buffer_0_1$EN)
      dcta_double_buffer_buffer_0_1 <= `BSV_ASSIGNMENT_DELAY
	  dcta_double_buffer_buffer_0_1$D_IN;
    if (dcta_double_buffer_buffer_0_2$EN)
      dcta_double_buffer_buffer_0_2 <= `BSV_ASSIGNMENT_DELAY
	  dcta_double_buffer_buffer_0_2$D_IN;
    if (dcta_double_buffer_buffer_0_3$EN)
      dcta_double_buffer_buffer_0_3 <= `BSV_ASSIGNMENT_DELAY
	  dcta_double_buffer_buffer_0_3$D_IN;
    if (dcta_double_buffer_buffer_0_4$EN)
      dcta_double_buffer_buffer_0_4 <= `BSV_ASSIGNMENT_DELAY
	  dcta_double_buffer_buffer_0_4$D_IN;
    if (dcta_double_buffer_buffer_0_5$EN)
      dcta_double_buffer_buffer_0_5 <= `BSV_ASSIGNMENT_DELAY
	  dcta_double_buffer_buffer_0_5$D_IN;
    if (dcta_double_buffer_buffer_0_6$EN)
      dcta_double_buffer_buffer_0_6 <= `BSV_ASSIGNMENT_DELAY
	  dcta_double_buffer_buffer_0_6$D_IN;
    if (dcta_double_buffer_buffer_0_7$EN)
      dcta_double_buffer_buffer_0_7 <= `BSV_ASSIGNMENT_DELAY
	  dcta_double_buffer_buffer_0_7$D_IN;
    if (dcta_double_buffer_buffer_1_0$EN)
      dcta_double_buffer_buffer_1_0 <= `BSV_ASSIGNMENT_DELAY
	  dcta_double_buffer_buffer_1_0$D_IN;
    if (dcta_double_buffer_buffer_1_1$EN)
      dcta_double_buffer_buffer_1_1 <= `BSV_ASSIGNMENT_DELAY
	  dcta_double_buffer_buffer_1_1$D_IN;
    if (dcta_double_buffer_buffer_1_2$EN)
      dcta_double_buffer_buffer_1_2 <= `BSV_ASSIGNMENT_DELAY
	  dcta_double_buffer_buffer_1_2$D_IN;
    if (dcta_double_buffer_buffer_1_3$EN)
      dcta_double_buffer_buffer_1_3 <= `BSV_ASSIGNMENT_DELAY
	  dcta_double_buffer_buffer_1_3$D_IN;
    if (dcta_double_buffer_buffer_1_4$EN)
      dcta_double_buffer_buffer_1_4 <= `BSV_ASSIGNMENT_DELAY
	  dcta_double_buffer_buffer_1_4$D_IN;
    if (dcta_double_buffer_buffer_1_5$EN)
      dcta_double_buffer_buffer_1_5 <= `BSV_ASSIGNMENT_DELAY
	  dcta_double_buffer_buffer_1_5$D_IN;
    if (dcta_double_buffer_buffer_1_6$EN)
      dcta_double_buffer_buffer_1_6 <= `BSV_ASSIGNMENT_DELAY
	  dcta_double_buffer_buffer_1_6$D_IN;
    if (dcta_double_buffer_buffer_1_7$EN)
      dcta_double_buffer_buffer_1_7 <= `BSV_ASSIGNMENT_DELAY
	  dcta_double_buffer_buffer_1_7$D_IN;
    if (dctb_double_buffer_buffer_0_0$EN)
      dctb_double_buffer_buffer_0_0 <= `BSV_ASSIGNMENT_DELAY
	  dctb_double_buffer_buffer_0_0$D_IN;
    if (dctb_double_buffer_buffer_0_1$EN)
      dctb_double_buffer_buffer_0_1 <= `BSV_ASSIGNMENT_DELAY
	  dctb_double_buffer_buffer_0_1$D_IN;
    if (dctb_double_buffer_buffer_0_2$EN)
      dctb_double_buffer_buffer_0_2 <= `BSV_ASSIGNMENT_DELAY
	  dctb_double_buffer_buffer_0_2$D_IN;
    if (dctb_double_buffer_buffer_0_3$EN)
      dctb_double_buffer_buffer_0_3 <= `BSV_ASSIGNMENT_DELAY
	  dctb_double_buffer_buffer_0_3$D_IN;
    if (dctb_double_buffer_buffer_0_4$EN)
      dctb_double_buffer_buffer_0_4 <= `BSV_ASSIGNMENT_DELAY
	  dctb_double_buffer_buffer_0_4$D_IN;
    if (dctb_double_buffer_buffer_0_5$EN)
      dctb_double_buffer_buffer_0_5 <= `BSV_ASSIGNMENT_DELAY
	  dctb_double_buffer_buffer_0_5$D_IN;
    if (dctb_double_buffer_buffer_0_6$EN)
      dctb_double_buffer_buffer_0_6 <= `BSV_ASSIGNMENT_DELAY
	  dctb_double_buffer_buffer_0_6$D_IN;
    if (dctb_double_buffer_buffer_0_7$EN)
      dctb_double_buffer_buffer_0_7 <= `BSV_ASSIGNMENT_DELAY
	  dctb_double_buffer_buffer_0_7$D_IN;
    if (dctb_double_buffer_buffer_1_0$EN)
      dctb_double_buffer_buffer_1_0 <= `BSV_ASSIGNMENT_DELAY
	  dctb_double_buffer_buffer_1_0$D_IN;
    if (dctb_double_buffer_buffer_1_1$EN)
      dctb_double_buffer_buffer_1_1 <= `BSV_ASSIGNMENT_DELAY
	  dctb_double_buffer_buffer_1_1$D_IN;
    if (dctb_double_buffer_buffer_1_2$EN)
      dctb_double_buffer_buffer_1_2 <= `BSV_ASSIGNMENT_DELAY
	  dctb_double_buffer_buffer_1_2$D_IN;
    if (dctb_double_buffer_buffer_1_3$EN)
      dctb_double_buffer_buffer_1_3 <= `BSV_ASSIGNMENT_DELAY
	  dctb_double_buffer_buffer_1_3$D_IN;
    if (dctb_double_buffer_buffer_1_4$EN)
      dctb_double_buffer_buffer_1_4 <= `BSV_ASSIGNMENT_DELAY
	  dctb_double_buffer_buffer_1_4$D_IN;
    if (dctb_double_buffer_buffer_1_5$EN)
      dctb_double_buffer_buffer_1_5 <= `BSV_ASSIGNMENT_DELAY
	  dctb_double_buffer_buffer_1_5$D_IN;
    if (dctb_double_buffer_buffer_1_6$EN)
      dctb_double_buffer_buffer_1_6 <= `BSV_ASSIGNMENT_DELAY
	  dctb_double_buffer_buffer_1_6$D_IN;
    if (dctb_double_buffer_buffer_1_7$EN)
      dctb_double_buffer_buffer_1_7 <= `BSV_ASSIGNMENT_DELAY
	  dctb_double_buffer_buffer_1_7$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    c_code_0 = 7'h2A;
    c_code_1 = 7'h2A;
    c_code_2 = 7'h2A;
    c_code_3 = 7'h2A;
    c_code_4 = 7'h2A;
    c_code_5 = 7'h2A;
    c_code_6 = 7'h2A;
    c_code_7 = 7'h2A;
    c_len_0 = 3'h2;
    c_len_1 = 3'h2;
    c_len_2 = 3'h2;
    c_len_3 = 3'h2;
    c_len_4 = 3'h2;
    c_len_5 = 3'h2;
    c_len_6 = 3'h2;
    c_len_7 = 3'h2;
    c_prev_zcnt = 4'hA;
    c_valid_0_self_reg = 2'h2;
    c_valid_1_self_reg = 2'h2;
    c_valid_2_self_reg = 2'h2;
    c_valid_3_self_reg = 2'h2;
    c_valid_4_self_reg = 2'h2;
    c_valid_5_self_reg = 2'h2;
    c_valid_6_self_reg = 2'h2;
    c_valid_7_self_reg = 2'h2;
    c_zcnt_0 = 4'hA;
    c_zcnt_1 = 4'hA;
    c_zcnt_2 = 4'hA;
    c_zcnt_3 = 4'hA;
    c_zcnt_4 = 4'hA;
    c_zcnt_5 = 4'hA;
    c_zcnt_6 = 4'hA;
    c_zcnt_7 = 4'hA;
    dcta_double_buffer_buffer_0_0 =
	192'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dcta_double_buffer_buffer_0_1 =
	192'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dcta_double_buffer_buffer_0_2 =
	192'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dcta_double_buffer_buffer_0_3 =
	192'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dcta_double_buffer_buffer_0_4 =
	192'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dcta_double_buffer_buffer_0_5 =
	192'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dcta_double_buffer_buffer_0_6 =
	192'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dcta_double_buffer_buffer_0_7 =
	192'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dcta_double_buffer_buffer_1_0 =
	192'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dcta_double_buffer_buffer_1_1 =
	192'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dcta_double_buffer_buffer_1_2 =
	192'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dcta_double_buffer_buffer_1_3 =
	192'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dcta_double_buffer_buffer_1_4 =
	192'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dcta_double_buffer_buffer_1_5 =
	192'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dcta_double_buffer_buffer_1_6 =
	192'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dcta_double_buffer_buffer_1_7 =
	192'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dcta_double_buffer_rblock = 2'h2;
    dcta_double_buffer_rcnt = 32'hAAAAAAAA;
    dcta_double_buffer_wblock = 2'h2;
    dcta_double_buffer_wptr = 3'h2;
    dctb_double_buffer_buffer_0_0 = 72'hAAAAAAAAAAAAAAAAAA;
    dctb_double_buffer_buffer_0_1 = 72'hAAAAAAAAAAAAAAAAAA;
    dctb_double_buffer_buffer_0_2 = 72'hAAAAAAAAAAAAAAAAAA;
    dctb_double_buffer_buffer_0_3 = 72'hAAAAAAAAAAAAAAAAAA;
    dctb_double_buffer_buffer_0_4 = 72'hAAAAAAAAAAAAAAAAAA;
    dctb_double_buffer_buffer_0_5 = 72'hAAAAAAAAAAAAAAAAAA;
    dctb_double_buffer_buffer_0_6 = 72'hAAAAAAAAAAAAAAAAAA;
    dctb_double_buffer_buffer_0_7 = 72'hAAAAAAAAAAAAAAAAAA;
    dctb_double_buffer_buffer_1_0 = 72'hAAAAAAAAAAAAAAAAAA;
    dctb_double_buffer_buffer_1_1 = 72'hAAAAAAAAAAAAAAAAAA;
    dctb_double_buffer_buffer_1_2 = 72'hAAAAAAAAAAAAAAAAAA;
    dctb_double_buffer_buffer_1_3 = 72'hAAAAAAAAAAAAAAAAAA;
    dctb_double_buffer_buffer_1_4 = 72'hAAAAAAAAAAAAAAAAAA;
    dctb_double_buffer_buffer_1_5 = 72'hAAAAAAAAAAAAAAAAAA;
    dctb_double_buffer_buffer_1_6 = 72'hAAAAAAAAAAAAAAAAAA;
    dctb_double_buffer_buffer_1_7 = 72'hAAAAAAAAAAAAAAAAAA;
    dctb_double_buffer_rblock = 2'h2;
    dctb_double_buffer_rcnt = 32'hAAAAAAAA;
    dctb_double_buffer_wblock = 2'h2;
    dctb_double_buffer_wptr = 3'h2;
    fsm_par_blocks_1_start_reg = 1'h0;
    fsm_par_blocks_1_state_can_overlap = 1'h0;
    fsm_par_blocks_1_state_fired = 1'h0;
    fsm_par_blocks_1_state_mkFSMstate = 3'h2;
    fsm_par_blocks_start_reg = 1'h0;
    fsm_par_blocks_state_can_overlap = 1'h0;
    fsm_par_blocks_state_fired = 1'h0;
    fsm_par_blocks_state_mkFSMstate = 3'h2;
    fsm_start_reg = 1'h0;
    fsm_start_reg_1 = 1'h0;
    fsm_state_can_overlap = 1'h0;
    fsm_state_fired = 1'h0;
    fsm_state_mkFSMstate = 4'hA;
    header_idx = 5'h0A;
    inout_cnt = 24'hAAAAAA;
    input_idx = 24'hAAAAAA;
    j_data_self_reg = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    linebuf_maxi = 3'h2;
    linebuf_maxj = 9'h0AA;
    linebuf_ram_serverAdapterA_cnt = 3'h2;
    linebuf_ram_serverAdapterA_s1 = 2'h2;
    linebuf_ram_serverAdapterB_cnt = 3'h2;
    linebuf_ram_serverAdapterB_s1 = 2'h2;
    linebuf_rblock = 2'h2;
    linebuf_reversei = 1'h0;
    linebuf_reversej = 1'h0;
    linebuf_ri = 3'h2;
    linebuf_rj = 9'h0AA;
    linebuf_transposeij = 1'h0;
    linebuf_wblock = 2'h2;
    linebuf_wi = 3'h2;
    linebuf_wj = 9'h0AA;
    lm_bits_self_reg = 121'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    lm_len = 8'hAA;
    norm_pixels_0_self_reg = 9'h0AA;
    norm_pixels_1_self_reg = 9'h0AA;
    norm_pixels_2_self_reg = 9'h0AA;
    norm_pixels_3_self_reg = 9'h0AA;
    norm_pixels_4_self_reg = 9'h0AA;
    norm_pixels_5_self_reg = 9'h0AA;
    norm_pixels_6_self_reg = 9'h0AA;
    norm_pixels_7_self_reg = 9'h0AA;
    output_idx = 24'hAAAAAA;
    pm_bits_0 = 14'h2AAA;
    pm_bits_1 = 14'h2AAA;
    pm_bits_2 = 14'h2AAA;
    pm_bits_3 = 14'h2AAA;
    pm_bits_4 = 14'h2AAA;
    pm_bits_5 = 14'h2AAA;
    pm_bits_6 = 14'h2AAA;
    pm_bits_7 = 14'h2AAA;
    pm_en = 1'h0;
    pm_len_0 = 4'hA;
    pm_len_1 = 4'hA;
    pm_len_2 = 4'hA;
    pm_len_3 = 4'hA;
    pm_len_4 = 4'hA;
    pm_len_5 = 4'hA;
    pm_len_6 = 4'hA;
    pm_len_7 = 4'hA;
    qnt_pixels = 64'hAAAAAAAAAAAAAAAA;
    qnt_prev_dc = 8'hAA;
    qnt_sy_self_reg = 4'hA;
    st_rem_bits = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    st_rem_len = 8'hAA;
    x_y_bytes = 32'hAAAAAAAA;
    zig_pixels_0 = 9'h0AA;
    zig_pixels_1 = 9'h0AA;
    zig_pixels_2 = 9'h0AA;
    zig_pixels_3 = 9'h0AA;
    zig_pixels_4 = 9'h0AA;
    zig_pixels_5 = 9'h0AA;
    zig_pixels_6 = 9'h0AA;
    zig_pixels_7 = 9'h0AA;
    zig_sy_self_reg = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (linebuf_ram_serverAdapterA_s1[1] &&
	  !linebuf_ram_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (linebuf_ram_serverAdapterB_s1[1] &&
	  !linebuf_ram_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l265c14 &&
	  (fsm_state_mkFSMstate == 4'd9 || fsm_state_mkFSMstate == 4'd10))
	$display("Error: \"JpegEncoder.bsv\", line 265, column 14: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_l265c14] and\n  [RL_fsm_action_l266c14, RL_fsm_action_l267c15] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (fsm_state_mkFSMstate == 4'd9 && fsm_state_mkFSMstate == 4'd10)
	$display("Error: \"JpegEncoder.bsv\", line 266, column 14: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_l266c14] and\n  [RL_fsm_action_l267c15] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l250c35 && WILL_FIRE_RL_fsm_action_l262c21)
	$display("Error: \"JpegEncoder.bsv\", line 250, column 35: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_l250c35] and\n  [RL_fsm_action_l262c21] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l235c19 &&
	  (fsm_state_mkFSMstate == 4'd1 || fsm_state_mkFSMstate == 4'd2 ||
	   WILL_FIRE_RL_fsm_action_l238c17 ||
	   fsm_state_mkFSMstate == 4'd4 ||
	   WILL_FIRE_RL_fsm_action_l249c24 ||
	   WILL_FIRE_RL_fsm_action_l250c35 ||
	   WILL_FIRE_RL_fsm_action_l262c21 ||
	   WILL_FIRE_RL_fsm_action_l241c23 ||
	   WILL_FIRE_RL_fsm_action_l242c34 ||
	   WILL_FIRE_RL_fsm_action_l246c21 ||
	   WILL_FIRE_RL_fsm_actionpar_start_l239c7 ||
	   WILL_FIRE_RL_fsm_action_l265c14 ||
	   fsm_state_mkFSMstate == 4'd9 ||
	   fsm_state_mkFSMstate == 4'd10))
	$display("Error: \"JpegEncoder.bsv\", line 235, column 19: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_l235c19] and\n  [RL_fsm_action_l236c19, RL_fsm_action_f_init_l237c7, RL_fsm_action_l238c17,\n  RL_fsm_action_f_update_l237c7, RL_fsm_action_l249c24, RL_fsm_action_l250c35,\n  RL_fsm_action_l262c21, RL_fsm_action_l241c23, RL_fsm_action_l242c34,\n  RL_fsm_action_l246c21, RL_fsm_actionpar_start_l239c7, RL_fsm_action_l265c14,\n  RL_fsm_action_l266c14, RL_fsm_action_l267c15] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (fsm_state_mkFSMstate == 4'd1 &&
	  (fsm_state_mkFSMstate == 4'd2 || WILL_FIRE_RL_fsm_action_l238c17 ||
	   fsm_state_mkFSMstate == 4'd4 ||
	   WILL_FIRE_RL_fsm_action_l249c24 ||
	   WILL_FIRE_RL_fsm_action_l250c35 ||
	   WILL_FIRE_RL_fsm_action_l262c21 ||
	   WILL_FIRE_RL_fsm_action_l241c23 ||
	   WILL_FIRE_RL_fsm_action_l242c34 ||
	   WILL_FIRE_RL_fsm_action_l246c21 ||
	   WILL_FIRE_RL_fsm_actionpar_start_l239c7 ||
	   WILL_FIRE_RL_fsm_action_l265c14 ||
	   fsm_state_mkFSMstate == 4'd9 ||
	   fsm_state_mkFSMstate == 4'd10))
	$display("Error: \"JpegEncoder.bsv\", line 236, column 19: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_l236c19] and\n  [RL_fsm_action_f_init_l237c7, RL_fsm_action_l238c17,\n  RL_fsm_action_f_update_l237c7, RL_fsm_action_l249c24, RL_fsm_action_l250c35,\n  RL_fsm_action_l262c21, RL_fsm_action_l241c23, RL_fsm_action_l242c34,\n  RL_fsm_action_l246c21, RL_fsm_actionpar_start_l239c7, RL_fsm_action_l265c14,\n  RL_fsm_action_l266c14, RL_fsm_action_l267c15] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (fsm_state_mkFSMstate == 4'd2 &&
	  (WILL_FIRE_RL_fsm_action_l238c17 || fsm_state_mkFSMstate == 4'd4 ||
	   WILL_FIRE_RL_fsm_action_l249c24 ||
	   WILL_FIRE_RL_fsm_action_l250c35 ||
	   WILL_FIRE_RL_fsm_action_l262c21 ||
	   WILL_FIRE_RL_fsm_action_l241c23 ||
	   WILL_FIRE_RL_fsm_action_l242c34 ||
	   WILL_FIRE_RL_fsm_action_l246c21 ||
	   WILL_FIRE_RL_fsm_actionpar_start_l239c7 ||
	   WILL_FIRE_RL_fsm_action_l265c14 ||
	   fsm_state_mkFSMstate == 4'd9 ||
	   fsm_state_mkFSMstate == 4'd10))
	$display("Error: \"JpegEncoder.bsv\", line 237, column 21: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_f_init_l237c7] and\n  [RL_fsm_action_l238c17, RL_fsm_action_f_update_l237c7,\n  RL_fsm_action_l249c24, RL_fsm_action_l250c35, RL_fsm_action_l262c21,\n  RL_fsm_action_l241c23, RL_fsm_action_l242c34, RL_fsm_action_l246c21,\n  RL_fsm_actionpar_start_l239c7, RL_fsm_action_l265c14, RL_fsm_action_l266c14,\n  RL_fsm_action_l267c15] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l238c17 &&
	  (fsm_state_mkFSMstate == 4'd4 || WILL_FIRE_RL_fsm_action_l249c24 ||
	   WILL_FIRE_RL_fsm_action_l250c35 ||
	   WILL_FIRE_RL_fsm_action_l262c21 ||
	   WILL_FIRE_RL_fsm_action_l241c23 ||
	   WILL_FIRE_RL_fsm_action_l242c34 ||
	   WILL_FIRE_RL_fsm_action_l246c21 ||
	   WILL_FIRE_RL_fsm_actionpar_start_l239c7 ||
	   WILL_FIRE_RL_fsm_action_l265c14 ||
	   fsm_state_mkFSMstate == 4'd9 ||
	   fsm_state_mkFSMstate == 4'd10))
	$display("Error: \"JpegEncoder.bsv\", line 238, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_l238c17] and\n  [RL_fsm_action_f_update_l237c7, RL_fsm_action_l249c24,\n  RL_fsm_action_l250c35, RL_fsm_action_l262c21, RL_fsm_action_l241c23,\n  RL_fsm_action_l242c34, RL_fsm_action_l246c21, RL_fsm_actionpar_start_l239c7,\n  RL_fsm_action_l265c14, RL_fsm_action_l266c14, RL_fsm_action_l267c15] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (fsm_state_mkFSMstate == 4'd4 &&
	  (WILL_FIRE_RL_fsm_action_l249c24 ||
	   WILL_FIRE_RL_fsm_action_l250c35 ||
	   WILL_FIRE_RL_fsm_action_l262c21 ||
	   WILL_FIRE_RL_fsm_action_l241c23 ||
	   WILL_FIRE_RL_fsm_action_l242c34 ||
	   WILL_FIRE_RL_fsm_action_l246c21 ||
	   WILL_FIRE_RL_fsm_actionpar_start_l239c7 ||
	   WILL_FIRE_RL_fsm_action_l265c14 ||
	   fsm_state_mkFSMstate == 4'd9 ||
	   fsm_state_mkFSMstate == 4'd10))
	$display("Error: \"JpegEncoder.bsv\", line 237, column 52: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_f_update_l237c7]\n  and [RL_fsm_action_l249c24, RL_fsm_action_l250c35, RL_fsm_action_l262c21,\n  RL_fsm_action_l241c23, RL_fsm_action_l242c34, RL_fsm_action_l246c21,\n  RL_fsm_actionpar_start_l239c7, RL_fsm_action_l265c14, RL_fsm_action_l266c14,\n  RL_fsm_action_l267c15] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l249c24 &&
	  (WILL_FIRE_RL_fsm_action_l250c35 ||
	   WILL_FIRE_RL_fsm_action_l262c21))
	$display("Error: \"JpegEncoder.bsv\", line 249, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_l249c24] and\n  [RL_fsm_action_l250c35, RL_fsm_action_l262c21] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_fsm_action_l249c24 ||
	   WILL_FIRE_RL_fsm_action_l250c35 ||
	   WILL_FIRE_RL_fsm_action_l262c21 ||
	   WILL_FIRE_RL_fsm_action_l241c23 ||
	   WILL_FIRE_RL_fsm_action_l242c34 ||
	   WILL_FIRE_RL_fsm_action_l246c21 ||
	   WILL_FIRE_RL_fsm_actionpar_start_l239c7) &&
	  (WILL_FIRE_RL_fsm_action_l265c14 || fsm_state_mkFSMstate == 4'd9 ||
	   fsm_state_mkFSMstate == 4'd10))
	$display("Error: \"JpegEncoder.bsv\", line 249, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_l249c24,\n  RL_fsm_action_l250c35, RL_fsm_action_l262c21, RL_fsm_action_l241c23,\n  RL_fsm_action_l242c34, RL_fsm_action_l246c21, RL_fsm_actionpar_start_l239c7]\n  and [RL_fsm_action_l265c14, RL_fsm_action_l266c14, RL_fsm_action_l267c15] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l241c23 &&
	  (WILL_FIRE_RL_fsm_action_l242c34 ||
	   WILL_FIRE_RL_fsm_action_l246c21))
	$display("Error: \"JpegEncoder.bsv\", line 241, column 23: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_l241c23] and\n  [RL_fsm_action_l242c34, RL_fsm_action_l246c21] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l242c34 && WILL_FIRE_RL_fsm_action_l246c21)
	$display("Error: \"JpegEncoder.bsv\", line 242, column 34: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_l242c34] and\n  [RL_fsm_action_l246c21] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkJpegEncoder

