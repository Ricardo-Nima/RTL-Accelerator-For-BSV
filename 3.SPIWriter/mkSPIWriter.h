/*
 * Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
 * 
 * On Wed Jan  4 17:43:00 CST 2023
 * 
 */

/* Generation options: */
#ifndef __mkSPIWriter_h__
#define __mkSPIWriter_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkSPIWriter module */
class MOD_mkSPIWriter : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt32> INST_cnt;
  MOD_Reg<tUInt8> INST_mosi;
  MOD_Reg<tUInt8> INST_sck;
  MOD_Wire<tUInt8> INST_spiFsm_abort;
  MOD_Reg<tUInt8> INST_spiFsm_start_reg;
  MOD_Reg<tUInt8> INST_spiFsm_start_reg_1;
  MOD_Wire<tUInt8> INST_spiFsm_start_reg_2;
  MOD_Wire<tUInt8> INST_spiFsm_start_wire;
  MOD_Reg<tUInt8> INST_spiFsm_state_can_overlap;
  MOD_Reg<tUInt8> INST_spiFsm_state_fired;
  MOD_Wire<tUInt8> INST_spiFsm_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_spiFsm_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_spiFsm_state_overlap_pw;
  MOD_Wire<tUInt8> INST_spiFsm_state_set_pw;
  MOD_Reg<tUInt8> INST_ss;
  MOD_Reg<tUInt8> INST_wdata;
 
 /* Constructor */
 public:
  MOD_mkSPIWriter(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_spiFsm_action_l38c14;
  tUInt8 DEF_WILL_FIRE_RL_spiFsm_action_l37c13;
  tUInt8 DEF_WILL_FIRE_RL_spiFsm_action_l36c15;
  tUInt8 DEF_WILL_FIRE_RL_spiFsm_action_l31c13;
  tUInt8 DEF_WILL_FIRE_RL_spiFsm_action_l27c13;
  tUInt8 DEF_WILL_FIRE_RL_spiFsm_action_l25c13;
  tUInt8 DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget_OR_spi_ETC___d60;
  tUInt32 DEF_x__h16008;
  tUInt8 DEF_spiFsm_state_mkFSMstate_read____d31;
  tUInt8 DEF_spiFsm_state_fired__h15110;
  tUInt8 DEF_spiFsm_abort_whas____d4;
  tUInt8 DEF_spiFsm_abort_wget____d5;
  tUInt8 DEF_spiFsm_start_reg_1__h15108;
  tUInt8 DEF_spiFsm_start_reg__h17279;
  tUInt8 DEF_spiFsm_state_mkFSMstate_read__1_EQ_6___d34;
  tUInt8 DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget_OR_spi_ETC___d35;
  tUInt8 DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget___d6;
 
 /* Local definitions */
 private:
  tUInt8 DEF_bs__h15978;
 
 /* Rules */
 public:
  void RL_spiFsm_start_reg__dreg_update();
  void RL_spiFsm_state_handle_abort();
  void RL_spiFsm_state_fired__dreg_update();
  void RL_spiFsm_state_every();
  void RL_spiFsm_restart();
  void RL_spiFsm_action_l25c13();
  void RL_spiFsm_action_l27c13();
  void RL_spiFsm_action_l31c13();
  void RL_spiFsm_action_l36c15();
  void RL_spiFsm_action_l37c13();
  void RL_spiFsm_action_l38c14();
  void RL_spiFsm_idle_l24c7();
  void RL_spiFsm_fsm_start();
  void __me_check_5();
  void __me_check_6();
  void __me_check_7();
  void __me_check_8();
  void __me_check_9();
 
 /* Methods */
 public:
  void METH_write(tUInt8 ARG_write_data);
  tUInt8 METH_RDY_write();
  tUInt8 METH_spi();
  tUInt8 METH_RDY_spi();
  tUInt8 METH_out();
  tUInt8 METH_RDY_out();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkSPIWriter &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkSPIWriter &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkSPIWriter &backing);
};

#endif /* ifndef __mkSPIWriter_h__ */
