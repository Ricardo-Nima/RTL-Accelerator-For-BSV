//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
//
// On Wed Jan  4 17:18:02 CST 2023
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTb(CLK,
	    RST_N);
  input  CLK;
  input  RST_N;

  // inlined wires
  wire start_wire$whas, state_set_pw$whas;

  // register running
  reg running;
  wire running$D_IN, running$EN;

  // register start_reg
  reg start_reg;
  wire start_reg$D_IN, start_reg$EN;

  // register start_reg_1
  reg start_reg_1;
  wire start_reg_1$D_IN, start_reg_1$EN;

  // register state_can_overlap
  reg state_can_overlap;
  wire state_can_overlap$D_IN, state_can_overlap$EN;

  // register state_fired
  reg state_fired;
  wire state_fired$D_IN, state_fired$EN;

  // register state_mkFSMstate
  reg [2 : 0] state_mkFSMstate;
  reg [2 : 0] state_mkFSMstate$D_IN;
  wire state_mkFSMstate$EN;

  // ports of submodule spi_writer
  reg [7 : 0] spi_writer$write_data;
  wire [7 : 0] spi_writer$out;
  wire [2 : 0] spi_writer$spi;
  wire spi_writer$EN_write, spi_writer$RDY_write;

  // rule scheduling signals
  wire WILL_FIRE_RL_action_l15c20,
       WILL_FIRE_RL_action_l16c20,
       WILL_FIRE_RL_action_l17c20,
       WILL_FIRE_RL_fsm_start,
       WILL_FIRE_RL_idle_l14c7;

  // inputs to muxes for submodule ports
  wire MUX_start_reg$write_1__SEL_2;

  // remaining internal signals
  wire abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d49;

  // submodule spi_writer
  mkSPIWriter spi_writer(.CLK(CLK),
			 .RST_N(RST_N),
			 .write_data(spi_writer$write_data),
			 .EN_write(spi_writer$EN_write),
			 .RDY_write(spi_writer$RDY_write),
			 .spi(spi_writer$spi),
			 .out(spi_writer$out),
			 .RDY_out());

  // rule RL_fsm_start
  assign WILL_FIRE_RL_fsm_start =
	     abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d49 &&
	     start_reg ;

  // rule RL_idle_l14c7
  assign WILL_FIRE_RL_idle_l14c7 =
	     !start_wire$whas && state_mkFSMstate == 3'd3 ;

  // rule RL_action_l15c20
  assign WILL_FIRE_RL_action_l15c20 =
	     spi_writer$RDY_write && start_wire$whas &&
	     (state_mkFSMstate == 3'd0 || state_mkFSMstate == 3'd3) ;

  // rule RL_action_l16c20
  assign WILL_FIRE_RL_action_l16c20 =
	     spi_writer$RDY_write && state_mkFSMstate == 3'd1 ;

  // rule RL_action_l17c20
  assign WILL_FIRE_RL_action_l17c20 =
	     spi_writer$RDY_write && state_mkFSMstate == 3'd2 ;

  // inputs to muxes for submodule ports
  assign MUX_start_reg$write_1__SEL_2 =
	     abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d49 &&
	     !start_reg &&
	     !running ;

  // inlined wires
  assign start_wire$whas =
	     WILL_FIRE_RL_fsm_start || start_reg_1 && !state_fired ;
  assign state_set_pw$whas =
	     WILL_FIRE_RL_idle_l14c7 || WILL_FIRE_RL_action_l17c20 ||
	     WILL_FIRE_RL_action_l16c20 ||
	     WILL_FIRE_RL_action_l15c20 ;

  // register running
  assign running$D_IN = 1'd1 ;
  assign running$EN = MUX_start_reg$write_1__SEL_2 ;

  // register start_reg
  assign start_reg$D_IN = !WILL_FIRE_RL_fsm_start ;
  assign start_reg$EN =
	     WILL_FIRE_RL_fsm_start ||
	     abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d49 &&
	     !start_reg &&
	     !running ;

  // register start_reg_1
  assign start_reg_1$D_IN = start_wire$whas ;
  assign start_reg_1$EN = 1'd1 ;

  // register state_can_overlap
  assign state_can_overlap$D_IN = state_set_pw$whas || state_can_overlap ;
  assign state_can_overlap$EN = 1'd1 ;

  // register state_fired
  assign state_fired$D_IN = state_set_pw$whas ;
  assign state_fired$EN = 1'd1 ;

  // register state_mkFSMstate
  always@(WILL_FIRE_RL_idle_l14c7 or
	  WILL_FIRE_RL_action_l15c20 or
	  WILL_FIRE_RL_action_l16c20 or WILL_FIRE_RL_action_l17c20)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_idle_l14c7: state_mkFSMstate$D_IN = 3'd0;
      WILL_FIRE_RL_action_l15c20: state_mkFSMstate$D_IN = 3'd1;
      WILL_FIRE_RL_action_l16c20: state_mkFSMstate$D_IN = 3'd2;
      WILL_FIRE_RL_action_l17c20: state_mkFSMstate$D_IN = 3'd3;
      default: state_mkFSMstate$D_IN = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign state_mkFSMstate$EN =
	     WILL_FIRE_RL_idle_l14c7 || WILL_FIRE_RL_action_l15c20 ||
	     WILL_FIRE_RL_action_l16c20 ||
	     WILL_FIRE_RL_action_l17c20 ;

  // submodule spi_writer
  always@(WILL_FIRE_RL_action_l17c20 or
	  WILL_FIRE_RL_action_l16c20 or WILL_FIRE_RL_action_l15c20)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_action_l17c20: spi_writer$write_data = 8'h0;
      WILL_FIRE_RL_action_l16c20: spi_writer$write_data = 8'h14;
      WILL_FIRE_RL_action_l15c20: spi_writer$write_data = 8'h65;
      default: spi_writer$write_data = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign spi_writer$EN_write =
	     WILL_FIRE_RL_action_l17c20 || WILL_FIRE_RL_action_l16c20 ||
	     WILL_FIRE_RL_action_l15c20 ;

  // remaining internal signals
  assign abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d49 =
	     (state_mkFSMstate == 3'd0 || state_mkFSMstate == 3'd3) &&
	     (!start_reg_1 || state_fired) ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        running <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 3'd0;
      end
    else
      begin
        if (running$EN) running <= `BSV_ASSIGNMENT_DELAY running$D_IN;
	if (start_reg$EN) start_reg <= `BSV_ASSIGNMENT_DELAY start_reg$D_IN;
	if (start_reg_1$EN)
	  start_reg_1 <= `BSV_ASSIGNMENT_DELAY start_reg_1$D_IN;
	if (state_can_overlap$EN)
	  state_can_overlap <= `BSV_ASSIGNMENT_DELAY state_can_overlap$D_IN;
	if (state_fired$EN)
	  state_fired <= `BSV_ASSIGNMENT_DELAY state_fired$D_IN;
	if (state_mkFSMstate$EN)
	  state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY state_mkFSMstate$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    running = 1'h0;
    start_reg = 1'h0;
    start_reg_1 = 1'h0;
    state_can_overlap = 1'h0;
    state_fired = 1'h0;
    state_mkFSMstate = 3'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (running &&
	  abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d49 &&
	  !start_reg)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      $display(" (ss, sck, mosi) = (%1d, %1d, %1d), wdata = %d",
	       spi_writer$spi[2],
	       spi_writer$spi[1],
	       spi_writer$spi[0],
	       spi_writer$out);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l15c20 &&
	  (WILL_FIRE_RL_action_l16c20 || WILL_FIRE_RL_action_l17c20))
	$display("Error: \"TbSPIWriter.bsv\", line 15, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l15c20] and\n  [RL_action_l16c20, RL_action_l17c20] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l16c20 && WILL_FIRE_RL_action_l17c20)
	$display("Error: \"TbSPIWriter.bsv\", line 16, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l16c20] and\n  [RL_action_l17c20] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkTb

