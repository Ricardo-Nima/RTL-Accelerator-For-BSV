/*
 * Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
 * 
 * On Sun May 14 20:36:30 CST 2023
 * 
 */

/* Generation options: */
#ifndef __mkDecCounter_h__
#define __mkDecCounter_h__

#include "Types.h"
#include "bluesim_kernel_api.h"
#include <stdio.h>
#include <fstream>
#include <string>
#include <inttypes.h>
#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkSPIWriter.h"


/* Class declaration for the mkDecCounter module */
class MOD_mkDecCounter : public Module {
 
 public:
	zj_core::ChangeLists outchange_spi_writer_spi{"outchange_spi_writer_spi"};
	zj_core::ChangeLists outchange_spi_writer_hook_write_data{"outchange_spi_writer_hook_write_data"};
	void print_changelists() {
		printf("counter(mkDecCounter)\n");
		printf("\toutchange_spi_writer_spi: ");
		for (auto& x : outchange_spi_writer_spi._list) {
			printf("%" PRIu64 " %" PRIu64 "|", x.at, x.val);
		}
		printf("\n");
		printf("\toutchange_spi_writer_hook_write_data: ");
		for (auto& x : outchange_spi_writer_hook_write_data._list) {
			printf("%" PRIu64 " %" PRIu64 "|", x.at, x.val);
		}
		printf("\n");
		printf("\n");
	}
	void generate_testbench(uint64_t sim_time, std::string cur_hierachy) {
		std::ofstream fout(cur_hierachy + ".v");
		std::string out_pre;
		std::string out_post;
		out_pre += "`timescale 1ns/1ns\n";
		out_pre += "module testbench();\n";
		out_pre += " reg CLK, RST_N;\n";
		out_post += "always begin\n\t#5 CLK = ~CLK;\nend\n";
		out_post += "initial begin\n\tRST_N = 0;\n\t#1 CLK = 1;\n\t#1 RST_N = 1;\nend\n";
		out_pre += " reg [2 : 0] spi_writer$spi;\n";
		out_post += " // port: spi_writer$spi\n";
		out_post += "initial begin\n";
		for (auto& x : outchange_spi_writer_spi._list) {
			int delay = x.at == 10 ? x.delay : x.delay;
			out_post += "\t#" + std::to_string(delay) + " " + "spi_writer$spi" + " = " + std::to_string(x.val) + ";\n";
		}
		out_post += "end\n";
		out_pre += " reg [7 : 0] spi_writer$hook_write_data;\n";
		out_post += " // port: spi_writer$hook_write_data\n";
		out_post += "initial begin\n";
		for (auto& x : outchange_spi_writer_hook_write_data._list) {
			int delay = x.at == 10 ? x.delay : x.delay;
			out_post += "\t#" + std::to_string(delay) + " " + "spi_writer$hook_write_data" + " = " + std::to_string(x.val) + ";\n";
		}
		out_post += "end\n";
		out_post += " // for en_regs \n\n";
		out_pre += " mkDecCounter U1(.CLK(CLK), \n\t\t.RST_N(RST_N), \n\t\t.spi_writer$spi(spi_writer$spi), \n\t\t.spi_writer$hook_write_data(spi_writer$hook_write_data), \n\t\t.count(), \n\t\t.RDY_count(), \n\t\t.overflow(), \n\t\t.RDY_overflow());\n";
		out_post += "initial begin\n";
		out_post += "\t#" + std::to_string(sim_time) + " $finish;\n";
		out_post += "end\n";
		out_post += "initial begin\n";
		out_post += "\t$dumpfile(\"" + cur_hierachy + ".vcd\");\n";
		out_post += "\t$dumpvars(0, testbench);\n";
		out_post += "end\n";
		out_post += "endmodule\n";
		fout << out_pre << out_post;
	}
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt32> INST_cnt;
  MOD_Reg<tUInt32> INST_forcnt;
  MOD_mkSPIWriter INST_spi_writer;
 
 /* Constructor */
 public:
  MOD_mkDecCounter(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
 
 /* Local definitions */
 private:
  tUInt32 DEF_cnt__h300;
  tUInt8 DEF_x_spi__h132;
 
 /* Rules */
 public:
  void RL_get_all_variable();
  void RL_write_spi();
  void RL_run_counter();
  void RL_spi_show();
 
 /* Methods */
 public:
  tUInt32 METH_count();
  tUInt8 METH_RDY_count();
  tUInt8 METH_overflow();
  tUInt8 METH_RDY_overflow();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkDecCounter &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkDecCounter &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkDecCounter &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkDecCounter &backing);
};

#endif /* ifndef __mkDecCounter_h__ */
