/*
 * Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
 * 
 * On Sun May 14 20:36:30 CST 2023
 * 
 */

/* Generation options: */
#ifndef __mkSPIWriter_h__
#define __mkSPIWriter_h__

#include "Types.h"
#include "bluesim_kernel_api.h"
#include <stdio.h>
#include <fstream>
#include <string>
#include <inttypes.h>
#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkSPIWriter module */
class MOD_mkSPIWriter : public Module {
 
 public:
	zj_core::ChangeLists inchange_write_data{"inchange_write_data"};
	void print_changelists() {
		printf("spi_writer(mkSPIWriter)\n");
		printf("\tinchange_write_data: ");
		for (auto& x : inchange_write_data._list) {
			printf("%" PRIu64 " %" PRIu64 "|", x.at, x.val);
		}
		printf("\n");
		printf("\n");
	}
	void generate_testbench(uint64_t sim_time, std::string cur_hierachy) {
		std::ofstream fout(cur_hierachy + ".v");
		std::string out_pre;
		std::string out_post;
		out_pre += "`timescale 1ns/1ns\n";
		out_pre += "module testbench();\n";
		out_pre += " reg CLK, RST_N;\n";
		out_post += "always begin\n\t#5 CLK = ~CLK;\nend\n";
		out_post += "initial begin\n\tRST_N = 0;\n\t#1 CLK = 1;\n\t#1 RST_N = 1;\nend\n";
		out_pre += " reg [7 : 0] write_data;\n";
		out_post += " // port: write_data\n";
		out_post += "initial begin\n";
		for (auto& x : inchange_write_data._list) {
			int delay = x.at == 10 ? x.delay : x.delay;
			out_post += "\t#" + std::to_string(delay) + " " + "write_data" + " = " + std::to_string(x.val) + ";\n";
		}
		out_post += "end\n";
		out_post += " // for en_regs \n\n";
		out_post += "initial begin\n";
				out_post += "\t#" + std::to_string(0) + " " + "EN_write" + " = " + "0" + ";\n";
		bool is_first = true;
		for (auto& x : inchange_write_data._list) {
			if (x.at >= 10) {
				int temp = is_first ? x.at: x.delay - 10;
				is_first = false;
				out_post += "\t#" + std::to_string(temp) + " " + "EN_write" + " = " + "1" + ";\n";
				out_post += "\t#" + std::to_string(10) + " " + "EN_write" + " = " + "0" + ";\n";
			}
		}
		out_post += "end\n";
		out_pre += " reg EN_write;\n";
		out_pre += " mkSPIWriter U1(.CLK(CLK), \n\t\t.RST_N(RST_N), \n\t\t.EN_write(EN_write), \n\t\t.RDY_write(), \n\t\t.write_data(write_data), \n\t\t.spi(), \n\t\t.RDY_spi(), \n\t\t.hook_write_data(), \n\t\t.RDY_hook_write_data());\n";
		out_post += "initial begin\n";
		out_post += "\t#" + std::to_string(sim_time) + " $finish;\n";
		out_post += "end\n";
		out_post += "initial begin\n";
		out_post += "\t$dumpfile(\"" + cur_hierachy + ".vcd\");\n";
		out_post += "\t$dumpvars(0, testbench);\n";
		out_post += "end\n";
		out_post += "endmodule\n";
		fout << out_pre << out_post;
	}
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt32> INST_cnt;
  MOD_Reg<tUInt8> INST_hook_reg_hook_write_data;
  MOD_Reg<tUInt8> INST_mosi;
  MOD_Reg<tUInt8> INST_sck;
  MOD_Wire<tUInt8> INST_spiFsm_abort;
  MOD_Reg<tUInt8> INST_spiFsm_start_reg;
  MOD_Reg<tUInt8> INST_spiFsm_start_reg_1;
  MOD_Wire<tUInt8> INST_spiFsm_start_reg_2;
  MOD_Wire<tUInt8> INST_spiFsm_start_wire;
  MOD_Reg<tUInt8> INST_spiFsm_state_can_overlap;
  MOD_Reg<tUInt8> INST_spiFsm_state_fired;
  MOD_Wire<tUInt8> INST_spiFsm_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_spiFsm_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_spiFsm_state_overlap_pw;
  MOD_Wire<tUInt8> INST_spiFsm_state_set_pw;
  MOD_Reg<tUInt8> INST_ss;
  MOD_Reg<tUInt8> INST_wdata;
 
 /* Constructor */
 public:
  MOD_mkSPIWriter(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_spiFsm_action_l39c14;
  tUInt8 DEF_WILL_FIRE_RL_spiFsm_action_l38c13;
  tUInt8 DEF_WILL_FIRE_RL_spiFsm_action_l37c15;
  tUInt8 DEF_WILL_FIRE_RL_spiFsm_action_l32c13;
  tUInt8 DEF_WILL_FIRE_RL_spiFsm_action_l28c13;
  tUInt8 DEF_WILL_FIRE_RL_spiFsm_action_l26c13;
  tUInt8 DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget_OR_spi_ETC___d60;
  tUInt32 DEF_x__h16042;
  tUInt8 DEF_spiFsm_state_mkFSMstate_read____d31;
  tUInt8 DEF_spiFsm_state_fired__h15144;
  tUInt8 DEF_spiFsm_abort_whas____d4;
  tUInt8 DEF_spiFsm_abort_wget____d5;
  tUInt8 DEF_spiFsm_start_reg_1__h15142;
  tUInt8 DEF_spiFsm_start_reg__h17313;
  tUInt8 DEF_spiFsm_state_mkFSMstate_read__1_EQ_6___d34;
  tUInt8 DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget_OR_spi_ETC___d35;
  tUInt8 DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget___d6;
 
 /* Local definitions */
 private:
 
 /* Rules */
 public:
  void RL_spiFsm_start_reg__dreg_update();
  void RL_spiFsm_state_handle_abort();
  void RL_spiFsm_state_fired__dreg_update();
  void RL_spiFsm_state_every();
  void RL_spiFsm_restart();
  void RL_spiFsm_action_l26c13();
  void RL_spiFsm_action_l28c13();
  void RL_spiFsm_action_l32c13();
  void RL_spiFsm_action_l37c15();
  void RL_spiFsm_action_l38c13();
  void RL_spiFsm_action_l39c14();
  void RL_spiFsm_idle_l25c7();
  void RL_spiFsm_fsm_start();
  void RL_get_all_variable();
  void __me_check_5();
  void __me_check_6();
  void __me_check_7();
  void __me_check_8();
  void __me_check_9();
 
 /* Methods */
 public:
  void METH_write(tUInt8 ARG_write_data);
  tUInt8 METH_RDY_write();
  tUInt8 METH_hook_write_data();
  tUInt8 METH_RDY_hook_write_data();
  tUInt8 METH_spi();
  tUInt8 METH_RDY_spi();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkSPIWriter &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkSPIWriter &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkSPIWriter &backing);
};

#endif /* ifndef __mkSPIWriter_h__ */
