/*
 * Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
 * 
 * On Sun May 14 20:36:30 CST 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkDecCounter.h"


/* String declarations */
static std::string const __str_literal_2(" (ss, sck, mosi) = (%1d, %1d, %1d)", 34u);
static std::string const __str_literal_1("spi = %d hook_write_data = %d ", 30u);


/* Constructor */
MOD_mkDecCounter::MOD_mkDecCounter(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_cnt(simHdl, "cnt", this, 32u, 0u, (tUInt8)0u),
    INST_forcnt(simHdl, "forcnt", this, 32u, 0u, (tUInt8)0u),
    INST_spi_writer(simHdl, "spi_writer", this),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 7u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkDecCounter::init_symbols_0()
{
  init_symbol(&symbols[0u], "cnt", SYM_MODULE, &INST_cnt);
  init_symbol(&symbols[1u], "forcnt", SYM_MODULE, &INST_forcnt);
  init_symbol(&symbols[2u], "RL_get_all_variable", SYM_RULE);
  init_symbol(&symbols[3u], "RL_run_counter", SYM_RULE);
  init_symbol(&symbols[4u], "RL_spi_show", SYM_RULE);
  init_symbol(&symbols[5u], "RL_write_spi", SYM_RULE);
  init_symbol(&symbols[6u], "spi_writer", SYM_MODULE, &INST_spi_writer);
}


/* Rule actions */

void MOD_mkDecCounter::RL_get_all_variable()
{
	uint64_t cur_time = bk_now(sim_hdl);
	uint64_t tempval_spi_writer_spi = static_cast<uint64_t>(INST_spi_writer.METH_spi());
	if (outchange_spi_writer_spi._list.size() == 0 || tempval_spi_writer_spi != outchange_spi_writer_spi._list.back().val) {
		outchange_spi_writer_spi.emplace_back(cur_time, tempval_spi_writer_spi);
	}
	uint64_t tempval_spi_writer_hook_write_data = static_cast<uint64_t>(INST_spi_writer.METH_hook_write_data());
	if (outchange_spi_writer_hook_write_data._list.size() == 0 || tempval_spi_writer_hook_write_data != outchange_spi_writer_hook_write_data._list.back().val) {
		outchange_spi_writer_hook_write_data.emplace_back(cur_time, tempval_spi_writer_hook_write_data);
	}
}

void MOD_mkDecCounter::RL_write_spi()
{
  tUInt8 DEF_temp__h169;
  DEF_cnt__h300 = INST_cnt.METH_read();
  DEF_temp__h169 = (tUInt8)((tUInt8)255u & DEF_cnt__h300);
  INST_spi_writer.METH_write(DEF_temp__h169);
}

void MOD_mkDecCounter::RL_run_counter()
{
  tUInt32 DEF_IF_cnt_EQ_4294967295_THEN_0_ELSE_cnt_PLUS_1___d8;
  DEF_cnt__h300 = INST_cnt.METH_read();
  DEF_IF_cnt_EQ_4294967295_THEN_0_ELSE_cnt_PLUS_1___d8 = DEF_cnt__h300 == 4294967295u ? 0u : DEF_cnt__h300 + 1u;
  INST_cnt.METH_write(DEF_IF_cnt_EQ_4294967295_THEN_0_ELSE_cnt_PLUS_1___d8);
}

void MOD_mkDecCounter::RL_spi_show()
{
  tUInt8 DEF_spi_writer_spi_BIT_0___d11;
  tUInt8 DEF_spi_writer_spi_BIT_1___d10;
  tUInt8 DEF_spi_writer_spi_BIT_2___d9;
  DEF_x_spi__h132 = INST_spi_writer.METH_spi();
  DEF_spi_writer_spi_BIT_2___d9 = (tUInt8)(DEF_x_spi__h132 >> 2u);
  DEF_spi_writer_spi_BIT_1___d10 = (tUInt8)((tUInt8)1u & (DEF_x_spi__h132 >> 1u));
  DEF_spi_writer_spi_BIT_0___d11 = (tUInt8)((tUInt8)1u & DEF_x_spi__h132);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,1,1,1",
		   &__str_literal_2,
		   DEF_spi_writer_spi_BIT_2___d9,
		   DEF_spi_writer_spi_BIT_1___d10,
		   DEF_spi_writer_spi_BIT_0___d11);
}


/* Methods */

tUInt32 MOD_mkDecCounter::METH_count()
{
  tUInt32 PORT_count;
  DEF_cnt__h300 = INST_cnt.METH_read();
  PORT_count = DEF_cnt__h300;
  return PORT_count;
}

tUInt8 MOD_mkDecCounter::METH_RDY_count()
{
  tUInt8 DEF_CAN_FIRE_count;
  tUInt8 PORT_RDY_count;
  DEF_CAN_FIRE_count = (tUInt8)1u;
  PORT_RDY_count = DEF_CAN_FIRE_count;
  return PORT_RDY_count;
}

tUInt8 MOD_mkDecCounter::METH_overflow()
{
  tUInt8 PORT_overflow;
  DEF_cnt__h300 = INST_cnt.METH_read();
  PORT_overflow = DEF_cnt__h300 == 4294967295u;
  return PORT_overflow;
}

tUInt8 MOD_mkDecCounter::METH_RDY_overflow()
{
  tUInt8 DEF_CAN_FIRE_overflow;
  tUInt8 PORT_RDY_overflow;
  DEF_CAN_FIRE_overflow = (tUInt8)1u;
  PORT_RDY_overflow = DEF_CAN_FIRE_overflow;
  return PORT_RDY_overflow;
}


/* Reset routines */

void MOD_mkDecCounter::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_spi_writer.reset_RST_N(ARG_rst_in);
  INST_forcnt.reset_RST(ARG_rst_in);
  INST_cnt.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkDecCounter::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkDecCounter::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_cnt.dump_state(indent + 2u);
  INST_forcnt.dump_state(indent + 2u);
  INST_spi_writer.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkDecCounter::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 5u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "cnt__h300", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_spi__h132", 3u);
  num = INST_cnt.dump_VCD_defs(num);
  num = INST_forcnt.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_spi_writer.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkDecCounter::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkDecCounter &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkDecCounter::vcd_defs(tVCDDumpType dt, MOD_mkDecCounter &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 3u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_cnt__h300) != DEF_cnt__h300)
      {
	vcd_write_val(sim_hdl, num, DEF_cnt__h300, 32u);
	backing.DEF_cnt__h300 = DEF_cnt__h300;
      }
      ++num;
      if ((backing.DEF_x_spi__h132) != DEF_x_spi__h132)
      {
	vcd_write_val(sim_hdl, num, DEF_x_spi__h132, 3u);
	backing.DEF_x_spi__h132 = DEF_x_spi__h132;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_cnt__h300, 32u);
      backing.DEF_cnt__h300 = DEF_cnt__h300;
      vcd_write_val(sim_hdl, num++, DEF_x_spi__h132, 3u);
      backing.DEF_x_spi__h132 = DEF_x_spi__h132;
    }
}

void MOD_mkDecCounter::vcd_prims(tVCDDumpType dt, MOD_mkDecCounter &backing)
{
  INST_cnt.dump_VCD(dt, backing.INST_cnt);
  INST_forcnt.dump_VCD(dt, backing.INST_forcnt);
}

void MOD_mkDecCounter::vcd_submodules(tVCDDumpType dt,
				      unsigned int levels,
				      MOD_mkDecCounter &backing)
{
  INST_spi_writer.dump_VCD(dt, levels, backing.INST_spi_writer);
}
