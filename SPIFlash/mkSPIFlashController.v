//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
//
// On Tue Dec 27 17:20:17 CST 2022
//
//
// Ports:
// Name                         I/O  size props
// RDY_operate                    O     1
// read_byte                      O     8
// RDY_read_byte                  O     1
// ss_o                           O     1 reg
// sck_o                          O     1 reg
// mosi_o                         O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// operate_wr                     I     1
// operate_addr                   I     9
// operate_data                   I     8 reg
// miso_i_i                       I     1
// EN_operate                     I     1
// EN_read_byte                   I     1
//
// No combinational paths from inputs to outputs
//
//
`include "/opt/bsc/lib/Verilog.Vivado/BRAM2.v"
`include "/opt/bsc/lib/Verilog.Vivado/SizedFIFO.v"
`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSPIFlashController(CLK,
			    RST_N,

			    operate_wr,
			    operate_addr,
			    operate_data,
			    EN_operate,
			    RDY_operate,

			    EN_read_byte,
			    read_byte,
			    RDY_read_byte,

			    ss_o,

			    sck_o,

			    mosi_o,

			    miso_i_i);
  input  CLK;
  input  RST_N;

  // action method operate
  input  operate_wr;
  input  [8 : 0] operate_addr;
  input  [7 : 0] operate_data;
  input  EN_operate;
  output RDY_operate;

  // actionvalue method read_byte
  input  EN_read_byte;
  output [7 : 0] read_byte;
  output RDY_read_byte;

  // value method ss_o
  output ss_o;

  // value method sck_o
  output sck_o;

  // value method mosi_o
  output mosi_o;

  // action method miso_i
  input  miso_i_i;

  // signals for module outputs
  wire [7 : 0] read_byte;
  wire RDY_operate, RDY_read_byte, mosi_o, sck_o, ss_o;

  // inlined wires
  wire [1 : 0] page_buffer_serverAdapterA_s1_1$wget,
	       page_buffer_serverAdapterA_writeWithResp$wget,
	       page_buffer_serverAdapterB_s1_1$wget,
	       page_buffer_serverAdapterB_writeWithResp$wget;
  wire page_buffer_serverAdapterA_cnt_1$whas,
       page_buffer_serverAdapterA_outData_enqData$whas,
       page_buffer_serverAdapterA_outData_outData$whas,
       page_buffer_serverAdapterA_writeWithResp$whas,
       page_buffer_serverAdapterB_cnt_1$whas,
       page_buffer_serverAdapterB_outData_enqData$whas,
       page_buffer_serverAdapterB_outData_outData$whas,
       page_buffer_serverAdapterB_writeWithResp$whas,
       spiFlashFsm_start_wire$whas,
       spiFlashFsm_state_set_pw$whas;

  // register busybit
  reg busybit;
  wire busybit$D_IN, busybit$EN;

  // register cnt
  reg [31 : 0] cnt;
  wire [31 : 0] cnt$D_IN;
  wire cnt$EN;

  // register command
  reg [7 : 0] command;
  wire [7 : 0] command$D_IN;
  wire command$EN;

  // register page_addr_h
  reg [7 : 0] page_addr_h;
  wire [7 : 0] page_addr_h$D_IN;
  wire page_addr_h$EN;

  // register page_addr_l
  reg [7 : 0] page_addr_l;
  wire [7 : 0] page_addr_l$D_IN;
  wire page_addr_l$EN;

  // register page_buffer_serverAdapterA_cnt
  reg [2 : 0] page_buffer_serverAdapterA_cnt;
  wire [2 : 0] page_buffer_serverAdapterA_cnt$D_IN;
  wire page_buffer_serverAdapterA_cnt$EN;

  // register page_buffer_serverAdapterA_s1
  reg [1 : 0] page_buffer_serverAdapterA_s1;
  wire [1 : 0] page_buffer_serverAdapterA_s1$D_IN;
  wire page_buffer_serverAdapterA_s1$EN;

  // register page_buffer_serverAdapterB_cnt
  reg [2 : 0] page_buffer_serverAdapterB_cnt;
  wire [2 : 0] page_buffer_serverAdapterB_cnt$D_IN;
  wire page_buffer_serverAdapterB_cnt$EN;

  // register page_buffer_serverAdapterB_s1
  reg [1 : 0] page_buffer_serverAdapterB_s1;
  wire [1 : 0] page_buffer_serverAdapterB_s1$D_IN;
  wire page_buffer_serverAdapterB_s1$EN;

  // register spiFlashFsm_jj_1_delay_count
  reg [6 : 0] spiFlashFsm_jj_1_delay_count;
  wire [6 : 0] spiFlashFsm_jj_1_delay_count$D_IN;
  wire spiFlashFsm_jj_1_delay_count$EN;

  // register spiFlashFsm_jj_2_delay_count
  reg [6 : 0] spiFlashFsm_jj_2_delay_count;
  wire [6 : 0] spiFlashFsm_jj_2_delay_count$D_IN;
  wire spiFlashFsm_jj_2_delay_count$EN;

  // register spiFlashFsm_jj_delay_count
  reg [6 : 0] spiFlashFsm_jj_delay_count;
  wire [6 : 0] spiFlashFsm_jj_delay_count$D_IN;
  wire spiFlashFsm_jj_delay_count$EN;

  // register spiFlashFsm_start_reg
  reg spiFlashFsm_start_reg;
  wire spiFlashFsm_start_reg$D_IN, spiFlashFsm_start_reg$EN;

  // register spiFlashFsm_start_reg_1
  reg spiFlashFsm_start_reg_1;
  wire spiFlashFsm_start_reg_1$D_IN, spiFlashFsm_start_reg_1$EN;

  // register spiFlashFsm_state_can_overlap
  reg spiFlashFsm_state_can_overlap;
  wire spiFlashFsm_state_can_overlap$D_IN, spiFlashFsm_state_can_overlap$EN;

  // register spiFlashFsm_state_fired
  reg spiFlashFsm_state_fired;
  wire spiFlashFsm_state_fired$D_IN, spiFlashFsm_state_fired$EN;

  // register spiFlashFsm_state_mkFSMstate
  reg [5 : 0] spiFlashFsm_state_mkFSMstate;
  reg [5 : 0] spiFlashFsm_state_mkFSMstate$D_IN;
  wire spiFlashFsm_state_mkFSMstate$EN;

  // register ss
  reg ss;
  wire ss$D_IN, ss$EN;

  // ports of submodule page_buffer_memory
  wire [7 : 0] page_buffer_memory$ADDRA,
	       page_buffer_memory$ADDRB,
	       page_buffer_memory$DIA,
	       page_buffer_memory$DIB,
	       page_buffer_memory$DOA,
	       page_buffer_memory$DOB;
  wire page_buffer_memory$ENA,
       page_buffer_memory$ENB,
       page_buffer_memory$WEA,
       page_buffer_memory$WEB;

  // ports of submodule page_buffer_serverAdapterA_outDataCore
  wire [7 : 0] page_buffer_serverAdapterA_outDataCore$D_IN,
	       page_buffer_serverAdapterA_outDataCore$D_OUT;
  wire page_buffer_serverAdapterA_outDataCore$CLR,
       page_buffer_serverAdapterA_outDataCore$DEQ,
       page_buffer_serverAdapterA_outDataCore$EMPTY_N,
       page_buffer_serverAdapterA_outDataCore$ENQ,
       page_buffer_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule page_buffer_serverAdapterB_outDataCore
  wire [7 : 0] page_buffer_serverAdapterB_outDataCore$D_IN,
	       page_buffer_serverAdapterB_outDataCore$D_OUT;
  wire page_buffer_serverAdapterB_outDataCore$CLR,
       page_buffer_serverAdapterB_outDataCore$DEQ,
       page_buffer_serverAdapterB_outDataCore$EMPTY_N,
       page_buffer_serverAdapterB_outDataCore$ENQ,
       page_buffer_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule spi_ctrl
  reg [7 : 0] spi_ctrl$write_data;
  wire [7 : 0] spi_ctrl$read;
  wire spi_ctrl$EN_write,
       spi_ctrl$RDY_read,
       spi_ctrl$RDY_write,
       spi_ctrl$miso_i_i,
       spi_ctrl$mosi_o,
       spi_ctrl$sck_o;

  // rule scheduling signals
  wire WILL_FIRE_RL_page_buffer_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_page_buffer_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_spiFlashFsm_action_d_init_np,
       WILL_FIRE_RL_spiFlashFsm_action_d_init_np_1,
       WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17,
       WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17,
       WILL_FIRE_RL_spiFlashFsm_action_l47c21,
       WILL_FIRE_RL_spiFlashFsm_action_l50c20,
       WILL_FIRE_RL_spiFlashFsm_action_l51c25,
       WILL_FIRE_RL_spiFlashFsm_action_l52c25,
       WILL_FIRE_RL_spiFlashFsm_action_l53c25,
       WILL_FIRE_RL_spiFlashFsm_action_l60c20,
       WILL_FIRE_RL_spiFlashFsm_action_l61c25,
       WILL_FIRE_RL_spiFlashFsm_action_l67c16,
       WILL_FIRE_RL_spiFlashFsm_action_l68c21,
       WILL_FIRE_RL_spiFlashFsm_action_l69c21,
       WILL_FIRE_RL_spiFlashFsm_action_l70c21,
       WILL_FIRE_RL_spiFlashFsm_action_l71c21,
       WILL_FIRE_RL_spiFlashFsm_action_l73c30,
       WILL_FIRE_RL_spiFlashFsm_action_l76c32,
       WILL_FIRE_RL_spiFlashFsm_action_l77c21,
       WILL_FIRE_RL_spiFlashFsm_action_l85c29,
       WILL_FIRE_RL_spiFlashFsm_action_l86c32,
       WILL_FIRE_RL_spiFlashFsm_action_l88c16,
       WILL_FIRE_RL_spiFlashFsm_action_np,
       WILL_FIRE_RL_spiFlashFsm_action_np_1,
       WILL_FIRE_RL_spiFlashFsm_action_np_2,
       WILL_FIRE_RL_spiFlashFsm_fsm_start,
       WILL_FIRE_RL_spiFlashFsm_idle_l45c9;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_cnt$write_1__VAL_1;
  wire [7 : 0] MUX_spi_ctrl$write_1__VAL_3;
  wire [6 : 0] MUX_spiFlashFsm_jj_1_delay_count$write_1__VAL_1,
	       MUX_spiFlashFsm_jj_2_delay_count$write_1__VAL_1,
	       MUX_spiFlashFsm_jj_delay_count$write_1__VAL_1;
  wire MUX_cnt$write_1__SEL_1,
       MUX_spiFlashFsm_start_reg$write_1__SEL_1,
       MUX_spi_ctrl$write_1__SEL_5,
       MUX_ss$write_1__SEL_1;

  // remaining internal signals
  wire [2 : 0] page_buffer_serverAdapterA_cnt_7_PLUS_IF_page__ETC___d33,
	       page_buffer_serverAdapterB_cnt_0_PLUS_IF_page__ETC___d86;
  wire NOT_busybit_42_73_AND_NOT_command_74_EQ_2_75_9_ETC___d205,
       cnt_36_SLT_256___d237,
       page_buffer_serverAdapterB_cnt_0_SLT_3___d235,
       spiFlashFsm_abort_whas__09_AND_spiFlashFsm_abo_ETC___d291;

  // action method operate
  assign RDY_operate =
	     spiFlashFsm_abort_whas__09_AND_spiFlashFsm_abo_ETC___d291 &&
	     !spiFlashFsm_start_reg &&
	     (page_buffer_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;

  // actionvalue method read_byte
  assign read_byte =
	     page_buffer_serverAdapterA_outDataCore$EMPTY_N ?
	       page_buffer_serverAdapterA_outDataCore$D_OUT :
	       page_buffer_memory$DOA ;
  assign RDY_read_byte =
	     (page_buffer_serverAdapterA_outDataCore$EMPTY_N ||
	      page_buffer_serverAdapterA_outData_enqData$whas) &&
	     page_buffer_serverAdapterA_outData_outData$whas ;

  // value method ss_o
  assign ss_o = ss ;

  // value method sck_o
  assign sck_o = spi_ctrl$sck_o ;

  // value method mosi_o
  assign mosi_o = spi_ctrl$mosi_o ;

  // submodule page_buffer_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd8),
	  .MEMSIZE(9'd256)) page_buffer_memory(.CLKA(CLK),
					       .CLKB(CLK),
					       .ADDRA(page_buffer_memory$ADDRA),
					       .ADDRB(page_buffer_memory$ADDRB),
					       .DIA(page_buffer_memory$DIA),
					       .DIB(page_buffer_memory$DIB),
					       .WEA(page_buffer_memory$WEA),
					       .WEB(page_buffer_memory$WEB),
					       .ENA(page_buffer_memory$ENA),
					       .ENB(page_buffer_memory$ENB),
					       .DOA(page_buffer_memory$DOA),
					       .DOB(page_buffer_memory$DOB));

  // submodule page_buffer_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd1)) page_buffer_serverAdapterA_outDataCore(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(page_buffer_serverAdapterA_outDataCore$D_IN),
								     .ENQ(page_buffer_serverAdapterA_outDataCore$ENQ),
								     .DEQ(page_buffer_serverAdapterA_outDataCore$DEQ),
								     .CLR(page_buffer_serverAdapterA_outDataCore$CLR),
								     .D_OUT(page_buffer_serverAdapterA_outDataCore$D_OUT),
								     .FULL_N(page_buffer_serverAdapterA_outDataCore$FULL_N),
								     .EMPTY_N(page_buffer_serverAdapterA_outDataCore$EMPTY_N));

  // submodule page_buffer_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(1'd1)) page_buffer_serverAdapterB_outDataCore(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(page_buffer_serverAdapterB_outDataCore$D_IN),
								     .ENQ(page_buffer_serverAdapterB_outDataCore$ENQ),
								     .DEQ(page_buffer_serverAdapterB_outDataCore$DEQ),
								     .CLR(page_buffer_serverAdapterB_outDataCore$CLR),
								     .D_OUT(page_buffer_serverAdapterB_outDataCore$D_OUT),
								     .FULL_N(page_buffer_serverAdapterB_outDataCore$FULL_N),
								     .EMPTY_N(page_buffer_serverAdapterB_outDataCore$EMPTY_N));

  // submodule spi_ctrl
  mkSPIController spi_ctrl(.CLK(CLK),
			   .RST_N(RST_N),
			   .miso_i_i(spi_ctrl$miso_i_i),
			   .write_data(spi_ctrl$write_data),
			   .EN_write(spi_ctrl$EN_write),
			   .RDY_write(spi_ctrl$RDY_write),
			   .read(spi_ctrl$read),
			   .RDY_read(spi_ctrl$RDY_read),
			   .sck_o(spi_ctrl$sck_o),
			   .mosi_o(spi_ctrl$mosi_o));

  // rule RL_page_buffer_serverAdapterA_outData_enqAndDeq
  assign WILL_FIRE_RL_page_buffer_serverAdapterA_outData_enqAndDeq =
	     page_buffer_serverAdapterA_outDataCore$EMPTY_N &&
	     page_buffer_serverAdapterA_outDataCore$FULL_N &&
	     EN_read_byte &&
	     page_buffer_serverAdapterA_outData_enqData$whas ;

  // rule RL_spiFlashFsm_action_d_init_np
  assign WILL_FIRE_RL_spiFlashFsm_action_d_init_np =
	     busybit &&
	     (spiFlashFsm_state_mkFSMstate == 6'd1 ||
	      spiFlashFsm_state_mkFSMstate == 6'd8) ;

  // rule RL_spiFlashFsm_action_np
  assign WILL_FIRE_RL_spiFlashFsm_action_np =
	     spiFlashFsm_jj_delay_count != 7'd63 &&
	     (spiFlashFsm_state_mkFSMstate == 6'd2 ||
	      spiFlashFsm_state_mkFSMstate == 6'd3) ;

  // rule RL_spiFlashFsm_action_l50c20
  assign WILL_FIRE_RL_spiFlashFsm_action_l50c20 =
	     spiFlashFsm_jj_delay_count == 7'd63 &&
	     (spiFlashFsm_state_mkFSMstate == 6'd2 ||
	      spiFlashFsm_state_mkFSMstate == 6'd3) ;

  // rule RL_spiFlashFsm_action_l51c25
  assign WILL_FIRE_RL_spiFlashFsm_action_l51c25 =
	     spi_ctrl$RDY_write && spiFlashFsm_state_mkFSMstate == 6'd4 ;

  // rule RL_spiFlashFsm_action_l52c25
  assign WILL_FIRE_RL_spiFlashFsm_action_l52c25 =
	     spi_ctrl$RDY_write && spiFlashFsm_state_mkFSMstate == 6'd5 ;

  // rule RL_spiFlashFsm_action_l53c25
  assign WILL_FIRE_RL_spiFlashFsm_action_l53c25 =
	     spi_ctrl$RDY_read && spiFlashFsm_state_mkFSMstate == 6'd6 ;

  // rule RL_spiFlashFsm_action_d_init_np_1
  assign WILL_FIRE_RL_spiFlashFsm_action_d_init_np_1 =
	     !busybit && (command == 8'd2 || command == 8'd32) &&
	     (spiFlashFsm_state_mkFSMstate == 6'd1 ||
	      spiFlashFsm_state_mkFSMstate == 6'd8) ;

  // rule RL_spiFlashFsm_action_np_1
  assign WILL_FIRE_RL_spiFlashFsm_action_np_1 =
	     spiFlashFsm_jj_1_delay_count != 7'd63 &&
	     (spiFlashFsm_state_mkFSMstate == 6'd9 ||
	      spiFlashFsm_state_mkFSMstate == 6'd10) ;

  // rule RL_spiFlashFsm_action_l60c20
  assign WILL_FIRE_RL_spiFlashFsm_action_l60c20 =
	     spiFlashFsm_jj_1_delay_count == 7'd63 &&
	     (spiFlashFsm_state_mkFSMstate == 6'd9 ||
	      spiFlashFsm_state_mkFSMstate == 6'd10) ;

  // rule RL_spiFlashFsm_action_l61c25
  assign WILL_FIRE_RL_spiFlashFsm_action_l61c25 =
	     spi_ctrl$RDY_write && spiFlashFsm_state_mkFSMstate == 6'd11 ;

  // rule RL_spiFlashFsm_action_np_2
  assign WILL_FIRE_RL_spiFlashFsm_action_np_2 =
	     spiFlashFsm_jj_2_delay_count != 7'd63 &&
	     (spiFlashFsm_state_mkFSMstate == 6'd15 ||
	      spiFlashFsm_state_mkFSMstate == 6'd16) ;

  // rule RL_spiFlashFsm_action_l67c16
  assign WILL_FIRE_RL_spiFlashFsm_action_l67c16 =
	     spiFlashFsm_jj_2_delay_count == 7'd63 &&
	     (spiFlashFsm_state_mkFSMstate == 6'd15 ||
	      spiFlashFsm_state_mkFSMstate == 6'd16) ;

  // rule RL_spiFlashFsm_action_l68c21
  assign WILL_FIRE_RL_spiFlashFsm_action_l68c21 =
	     spi_ctrl$RDY_write && spiFlashFsm_state_mkFSMstate == 6'd17 ;

  // rule RL_spiFlashFsm_action_l69c21
  assign WILL_FIRE_RL_spiFlashFsm_action_l69c21 =
	     spi_ctrl$RDY_write && spiFlashFsm_state_mkFSMstate == 6'd18 ;

  // rule RL_spiFlashFsm_action_l70c21
  assign WILL_FIRE_RL_spiFlashFsm_action_l70c21 =
	     spi_ctrl$RDY_write && spiFlashFsm_state_mkFSMstate == 6'd19 ;

  // rule RL_spiFlashFsm_action_l71c21
  assign WILL_FIRE_RL_spiFlashFsm_action_l71c21 =
	     spi_ctrl$RDY_write && spiFlashFsm_state_mkFSMstate == 6'd20 ;

  // rule RL_spiFlashFsm_action_l73c30
  assign WILL_FIRE_RL_spiFlashFsm_action_l73c30 =
	     command == 8'd32 && spiFlashFsm_state_mkFSMstate == 6'd21 ;

  // rule RL_spiFlashFsm_action_f_init_l75c17
  assign WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 =
	     command == 8'd2 && spiFlashFsm_state_mkFSMstate == 6'd21 ;

  // rule RL_spiFlashFsm_action_l76c32
  assign WILL_FIRE_RL_spiFlashFsm_action_l76c32 =
	     page_buffer_serverAdapterB_cnt_0_SLT_3___d235 &&
	     cnt_36_SLT_256___d237 &&
	     (spiFlashFsm_state_mkFSMstate == 6'd23 ||
	      spiFlashFsm_state_mkFSMstate == 6'd27) ;

  // rule RL_spiFlashFsm_action_l77c21
  assign WILL_FIRE_RL_spiFlashFsm_action_l77c21 =
	     spi_ctrl$RDY_write &&
	     (page_buffer_serverAdapterB_outDataCore$EMPTY_N ||
	      page_buffer_serverAdapterB_outData_enqData$whas) &&
	     page_buffer_serverAdapterB_outData_outData$whas &&
	     spiFlashFsm_state_mkFSMstate == 6'd24 ;

  // rule RL_page_buffer_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_page_buffer_serverAdapterB_outData_enqAndDeq =
	     page_buffer_serverAdapterB_outDataCore$EMPTY_N &&
	     page_buffer_serverAdapterB_outDataCore$FULL_N &&
	     WILL_FIRE_RL_spiFlashFsm_action_l77c21 &&
	     page_buffer_serverAdapterB_outData_enqData$whas ;

  // rule RL_spiFlashFsm_action_f_init_l84c17
  assign WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 =
	     command != 8'd32 && command != 8'd2 &&
	     spiFlashFsm_state_mkFSMstate == 6'd21 ;

  // rule RL_spiFlashFsm_action_l85c29
  assign WILL_FIRE_RL_spiFlashFsm_action_l85c29 =
	     spi_ctrl$RDY_write && cnt_36_SLT_256___d237 &&
	     (spiFlashFsm_state_mkFSMstate == 6'd28 ||
	      spiFlashFsm_state_mkFSMstate == 6'd31) ;

  // rule RL_spiFlashFsm_action_l86c32
  assign WILL_FIRE_RL_spiFlashFsm_action_l86c32 =
	     spi_ctrl$RDY_read &&
	     page_buffer_serverAdapterB_cnt_0_SLT_3___d235 &&
	     spiFlashFsm_state_mkFSMstate == 6'd29 ;

  // rule RL_spiFlashFsm_fsm_start
  assign WILL_FIRE_RL_spiFlashFsm_fsm_start =
	     spiFlashFsm_abort_whas__09_AND_spiFlashFsm_abo_ETC___d291 &&
	     spiFlashFsm_start_reg ;

  // rule RL_spiFlashFsm_action_l47c21
  assign WILL_FIRE_RL_spiFlashFsm_action_l47c21 =
	     spiFlashFsm_start_wire$whas &&
	     (spiFlashFsm_state_mkFSMstate == 6'd0 ||
	      spiFlashFsm_state_mkFSMstate == 6'd32) ;

  // rule RL_spiFlashFsm_action_l88c16
  assign WILL_FIRE_RL_spiFlashFsm_action_l88c16 =
	     spiFlashFsm_state_mkFSMstate == 6'd22 ||
	     !cnt_36_SLT_256___d237 &&
	     spiFlashFsm_state_mkFSMstate == 6'd23 ||
	     !cnt_36_SLT_256___d237 &&
	     (spiFlashFsm_state_mkFSMstate == 6'd27 ||
	      spiFlashFsm_state_mkFSMstate == 6'd28) ||
	     !cnt_36_SLT_256___d237 && spiFlashFsm_state_mkFSMstate == 6'd31 ;

  // rule RL_spiFlashFsm_idle_l45c9
  assign WILL_FIRE_RL_spiFlashFsm_idle_l45c9 =
	     !spiFlashFsm_start_wire$whas &&
	     spiFlashFsm_state_mkFSMstate == 6'd32 ;

  // inputs to muxes for submodule ports
  assign MUX_cnt$write_1__SEL_1 =
	     spiFlashFsm_state_mkFSMstate == 6'd30 ||
	     spiFlashFsm_state_mkFSMstate == 6'd26 ;
  assign MUX_spiFlashFsm_start_reg$write_1__SEL_1 =
	     EN_operate && operate_addr == 9'h108 ;
  assign MUX_spi_ctrl$write_1__SEL_5 =
	     WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l71c21 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l52c25 ;
  assign MUX_ss$write_1__SEL_1 =
	     WILL_FIRE_RL_spiFlashFsm_action_l67c16 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l60c20 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l50c20 ;
  assign MUX_cnt$write_1__VAL_1 = cnt + 32'd1 ;
  assign MUX_spiFlashFsm_jj_1_delay_count$write_1__VAL_1 =
	     spiFlashFsm_jj_1_delay_count + 7'd1 ;
  assign MUX_spiFlashFsm_jj_2_delay_count$write_1__VAL_1 =
	     spiFlashFsm_jj_2_delay_count + 7'd1 ;
  assign MUX_spiFlashFsm_jj_delay_count$write_1__VAL_1 =
	     spiFlashFsm_jj_delay_count + 7'd1 ;
  assign MUX_spi_ctrl$write_1__VAL_3 =
	     page_buffer_serverAdapterB_outDataCore$EMPTY_N ?
	       page_buffer_serverAdapterB_outDataCore$D_OUT :
	       page_buffer_memory$DOB ;

  // inlined wires
  assign page_buffer_serverAdapterA_outData_enqData$whas =
	     page_buffer_serverAdapterA_outDataCore$FULL_N &&
	     page_buffer_serverAdapterA_s1[1] &&
	     page_buffer_serverAdapterA_s1[0] ;
  assign page_buffer_serverAdapterA_outData_outData$whas =
	     page_buffer_serverAdapterA_outDataCore$EMPTY_N ||
	     !page_buffer_serverAdapterA_outDataCore$EMPTY_N &&
	     page_buffer_serverAdapterA_outData_enqData$whas ;
  assign page_buffer_serverAdapterA_cnt_1$whas =
	     EN_operate && !operate_addr[8] &&
	     (!page_buffer_serverAdapterA_writeWithResp$wget[1] ||
	      page_buffer_serverAdapterA_writeWithResp$wget[0]) ;
  assign page_buffer_serverAdapterA_writeWithResp$wget =
	     { operate_wr, 1'd0 } ;
  assign page_buffer_serverAdapterA_writeWithResp$whas =
	     EN_operate && !operate_addr[8] ;
  assign page_buffer_serverAdapterA_s1_1$wget =
	     { 1'd1,
	       !page_buffer_serverAdapterA_writeWithResp$wget[1] ||
	       page_buffer_serverAdapterA_writeWithResp$wget[0] } ;
  assign page_buffer_serverAdapterB_outData_enqData$whas =
	     page_buffer_serverAdapterB_outDataCore$FULL_N &&
	     page_buffer_serverAdapterB_s1[1] &&
	     page_buffer_serverAdapterB_s1[0] ;
  assign page_buffer_serverAdapterB_outData_outData$whas =
	     page_buffer_serverAdapterB_outDataCore$EMPTY_N ||
	     !page_buffer_serverAdapterB_outDataCore$EMPTY_N &&
	     page_buffer_serverAdapterB_outData_enqData$whas ;
  assign page_buffer_serverAdapterB_cnt_1$whas =
	     (WILL_FIRE_RL_spiFlashFsm_action_l76c32 ||
	      WILL_FIRE_RL_spiFlashFsm_action_l86c32) &&
	     (!page_buffer_serverAdapterB_writeWithResp$wget[1] ||
	      page_buffer_serverAdapterB_writeWithResp$wget[0]) ;
  assign page_buffer_serverAdapterB_writeWithResp$wget =
	     WILL_FIRE_RL_spiFlashFsm_action_l76c32 ? 2'd0 : 2'd2 ;
  assign page_buffer_serverAdapterB_writeWithResp$whas =
	     WILL_FIRE_RL_spiFlashFsm_action_l76c32 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l86c32 ;
  assign page_buffer_serverAdapterB_s1_1$wget =
	     { 1'd1,
	       !page_buffer_serverAdapterB_writeWithResp$wget[1] ||
	       page_buffer_serverAdapterB_writeWithResp$wget[0] } ;
  assign spiFlashFsm_start_wire$whas =
	     WILL_FIRE_RL_spiFlashFsm_fsm_start ||
	     spiFlashFsm_start_reg_1 && !spiFlashFsm_state_fired ;
  assign spiFlashFsm_state_set_pw$whas =
	     WILL_FIRE_RL_spiFlashFsm_idle_l45c9 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l88c16 ||
	     spiFlashFsm_state_mkFSMstate == 6'd30 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	     WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	     spiFlashFsm_state_mkFSMstate == 6'd26 ||
	     spiFlashFsm_state_mkFSMstate == 6'd25 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l77c21 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l76c32 ||
	     WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l73c30 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l71c21 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l70c21 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l69c21 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l68c21 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l67c16 ||
	     WILL_FIRE_RL_spiFlashFsm_action_np_2 ||
	     NOT_busybit_42_73_AND_NOT_command_74_EQ_2_75_9_ETC___d205 ||
	     spiFlashFsm_state_mkFSMstate == 6'd13 ||
	     spiFlashFsm_state_mkFSMstate == 6'd12 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l61c25 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l60c20 ||
	     WILL_FIRE_RL_spiFlashFsm_action_np_1 ||
	     WILL_FIRE_RL_spiFlashFsm_action_d_init_np_1 ||
	     spiFlashFsm_state_mkFSMstate == 6'd7 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l53c25 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l52c25 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l51c25 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l50c20 ||
	     WILL_FIRE_RL_spiFlashFsm_action_np ||
	     WILL_FIRE_RL_spiFlashFsm_action_d_init_np ||
	     WILL_FIRE_RL_spiFlashFsm_action_l47c21 ;

  // register busybit
  assign busybit$D_IN =
	     !WILL_FIRE_RL_spiFlashFsm_action_l53c25 || spi_ctrl$read[0] ;
  assign busybit$EN =
	     WILL_FIRE_RL_spiFlashFsm_action_l53c25 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l47c21 ;

  // register cnt
  assign cnt$D_IN = MUX_cnt$write_1__SEL_1 ? MUX_cnt$write_1__VAL_1 : 32'd0 ;
  assign cnt$EN =
	     spiFlashFsm_state_mkFSMstate == 6'd30 ||
	     spiFlashFsm_state_mkFSMstate == 6'd26 ||
	     WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	     WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 ;

  // register command
  assign command$D_IN = operate_data ;
  assign command$EN = MUX_spiFlashFsm_start_reg$write_1__SEL_1 ;

  // register page_addr_h
  assign page_addr_h$D_IN = operate_data ;
  assign page_addr_h$EN = EN_operate && operate_addr == 9'h101 ;

  // register page_addr_l
  assign page_addr_l$D_IN = operate_data ;
  assign page_addr_l$EN = EN_operate && operate_addr == 9'h100 ;

  // register page_buffer_serverAdapterA_cnt
  assign page_buffer_serverAdapterA_cnt$D_IN =
	     page_buffer_serverAdapterA_cnt_7_PLUS_IF_page__ETC___d33 ;
  assign page_buffer_serverAdapterA_cnt$EN =
	     page_buffer_serverAdapterA_cnt_1$whas || EN_read_byte ;

  // register page_buffer_serverAdapterA_s1
  assign page_buffer_serverAdapterA_s1$D_IN =
	     page_buffer_serverAdapterA_writeWithResp$whas ?
	       page_buffer_serverAdapterA_s1_1$wget :
	       2'd0 ;
  assign page_buffer_serverAdapterA_s1$EN = 1'd1 ;

  // register page_buffer_serverAdapterB_cnt
  assign page_buffer_serverAdapterB_cnt$D_IN =
	     page_buffer_serverAdapterB_cnt_0_PLUS_IF_page__ETC___d86 ;
  assign page_buffer_serverAdapterB_cnt$EN =
	     page_buffer_serverAdapterB_cnt_1$whas ||
	     WILL_FIRE_RL_spiFlashFsm_action_l77c21 ;

  // register page_buffer_serverAdapterB_s1
  assign page_buffer_serverAdapterB_s1$D_IN =
	     page_buffer_serverAdapterB_writeWithResp$whas ?
	       page_buffer_serverAdapterB_s1_1$wget :
	       2'd0 ;
  assign page_buffer_serverAdapterB_s1$EN = 1'd1 ;

  // register spiFlashFsm_jj_1_delay_count
  assign spiFlashFsm_jj_1_delay_count$D_IN =
	     WILL_FIRE_RL_spiFlashFsm_action_np_1 ?
	       MUX_spiFlashFsm_jj_1_delay_count$write_1__VAL_1 :
	       7'd0 ;
  assign spiFlashFsm_jj_1_delay_count$EN =
	     WILL_FIRE_RL_spiFlashFsm_action_np_1 ||
	     WILL_FIRE_RL_spiFlashFsm_action_d_init_np_1 ;

  // register spiFlashFsm_jj_2_delay_count
  assign spiFlashFsm_jj_2_delay_count$D_IN =
	     WILL_FIRE_RL_spiFlashFsm_action_np_2 ?
	       MUX_spiFlashFsm_jj_2_delay_count$write_1__VAL_1 :
	       7'd0 ;
  assign spiFlashFsm_jj_2_delay_count$EN =
	     WILL_FIRE_RL_spiFlashFsm_action_np_2 ||
	     NOT_busybit_42_73_AND_NOT_command_74_EQ_2_75_9_ETC___d205 ;

  // register spiFlashFsm_jj_delay_count
  assign spiFlashFsm_jj_delay_count$D_IN =
	     WILL_FIRE_RL_spiFlashFsm_action_np ?
	       MUX_spiFlashFsm_jj_delay_count$write_1__VAL_1 :
	       7'd0 ;
  assign spiFlashFsm_jj_delay_count$EN =
	     WILL_FIRE_RL_spiFlashFsm_action_np ||
	     WILL_FIRE_RL_spiFlashFsm_action_d_init_np ;

  // register spiFlashFsm_start_reg
  assign spiFlashFsm_start_reg$D_IN =
	     MUX_spiFlashFsm_start_reg$write_1__SEL_1 ;
  assign spiFlashFsm_start_reg$EN =
	     EN_operate && operate_addr == 9'h108 ||
	     WILL_FIRE_RL_spiFlashFsm_fsm_start ;

  // register spiFlashFsm_start_reg_1
  assign spiFlashFsm_start_reg_1$D_IN = spiFlashFsm_start_wire$whas ;
  assign spiFlashFsm_start_reg_1$EN = 1'd1 ;

  // register spiFlashFsm_state_can_overlap
  assign spiFlashFsm_state_can_overlap$D_IN =
	     spiFlashFsm_state_set_pw$whas || spiFlashFsm_state_can_overlap ;
  assign spiFlashFsm_state_can_overlap$EN = 1'd1 ;

  // register spiFlashFsm_state_fired
  assign spiFlashFsm_state_fired$D_IN = spiFlashFsm_state_set_pw$whas ;
  assign spiFlashFsm_state_fired$EN = 1'd1 ;

  // register spiFlashFsm_state_mkFSMstate
  always@(WILL_FIRE_RL_spiFlashFsm_idle_l45c9 or
	  WILL_FIRE_RL_spiFlashFsm_action_l47c21 or
	  WILL_FIRE_RL_spiFlashFsm_action_d_init_np or
	  WILL_FIRE_RL_spiFlashFsm_action_np or
	  WILL_FIRE_RL_spiFlashFsm_action_l50c20 or
	  WILL_FIRE_RL_spiFlashFsm_action_l51c25 or
	  WILL_FIRE_RL_spiFlashFsm_action_l52c25 or
	  WILL_FIRE_RL_spiFlashFsm_action_l53c25 or
	  spiFlashFsm_state_mkFSMstate or
	  WILL_FIRE_RL_spiFlashFsm_action_d_init_np_1 or
	  WILL_FIRE_RL_spiFlashFsm_action_np_1 or
	  WILL_FIRE_RL_spiFlashFsm_action_l60c20 or
	  WILL_FIRE_RL_spiFlashFsm_action_l61c25 or
	  NOT_busybit_42_73_AND_NOT_command_74_EQ_2_75_9_ETC___d205 or
	  WILL_FIRE_RL_spiFlashFsm_action_np_2 or
	  WILL_FIRE_RL_spiFlashFsm_action_l67c16 or
	  WILL_FIRE_RL_spiFlashFsm_action_l68c21 or
	  WILL_FIRE_RL_spiFlashFsm_action_l69c21 or
	  WILL_FIRE_RL_spiFlashFsm_action_l70c21 or
	  WILL_FIRE_RL_spiFlashFsm_action_l71c21 or
	  WILL_FIRE_RL_spiFlashFsm_action_l73c30 or
	  WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 or
	  WILL_FIRE_RL_spiFlashFsm_action_l76c32 or
	  WILL_FIRE_RL_spiFlashFsm_action_l77c21 or
	  WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 or
	  WILL_FIRE_RL_spiFlashFsm_action_l85c29 or
	  WILL_FIRE_RL_spiFlashFsm_action_l86c32 or
	  WILL_FIRE_RL_spiFlashFsm_action_l88c16)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_spiFlashFsm_idle_l45c9:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd0;
      WILL_FIRE_RL_spiFlashFsm_action_l47c21:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd1;
      WILL_FIRE_RL_spiFlashFsm_action_d_init_np:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd2;
      WILL_FIRE_RL_spiFlashFsm_action_np:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd3;
      WILL_FIRE_RL_spiFlashFsm_action_l50c20:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd4;
      WILL_FIRE_RL_spiFlashFsm_action_l51c25:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd5;
      WILL_FIRE_RL_spiFlashFsm_action_l52c25:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd6;
      WILL_FIRE_RL_spiFlashFsm_action_l53c25:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd7;
      spiFlashFsm_state_mkFSMstate == 6'd7:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd8;
      WILL_FIRE_RL_spiFlashFsm_action_d_init_np_1:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd9;
      WILL_FIRE_RL_spiFlashFsm_action_np_1:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd10;
      WILL_FIRE_RL_spiFlashFsm_action_l60c20:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd11;
      WILL_FIRE_RL_spiFlashFsm_action_l61c25:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd12;
      spiFlashFsm_state_mkFSMstate == 6'd12:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd13;
      spiFlashFsm_state_mkFSMstate == 6'd13:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd14;
      NOT_busybit_42_73_AND_NOT_command_74_EQ_2_75_9_ETC___d205:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd15;
      WILL_FIRE_RL_spiFlashFsm_action_np_2:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd16;
      WILL_FIRE_RL_spiFlashFsm_action_l67c16:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd17;
      WILL_FIRE_RL_spiFlashFsm_action_l68c21:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd18;
      WILL_FIRE_RL_spiFlashFsm_action_l69c21:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd19;
      WILL_FIRE_RL_spiFlashFsm_action_l70c21:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd20;
      WILL_FIRE_RL_spiFlashFsm_action_l71c21:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd21;
      WILL_FIRE_RL_spiFlashFsm_action_l73c30:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd22;
      WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd23;
      WILL_FIRE_RL_spiFlashFsm_action_l76c32:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd24;
      WILL_FIRE_RL_spiFlashFsm_action_l77c21:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd25;
      spiFlashFsm_state_mkFSMstate == 6'd25:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd26;
      spiFlashFsm_state_mkFSMstate == 6'd26:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd27;
      WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd28;
      WILL_FIRE_RL_spiFlashFsm_action_l85c29:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd29;
      WILL_FIRE_RL_spiFlashFsm_action_l86c32:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd30;
      spiFlashFsm_state_mkFSMstate == 6'd30:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd31;
      WILL_FIRE_RL_spiFlashFsm_action_l88c16:
	  spiFlashFsm_state_mkFSMstate$D_IN = 6'd32;
      default: spiFlashFsm_state_mkFSMstate$D_IN =
		   6'b101010 /* unspecified value */ ;
    endcase
  end
  assign spiFlashFsm_state_mkFSMstate$EN =
	     WILL_FIRE_RL_spiFlashFsm_idle_l45c9 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l47c21 ||
	     WILL_FIRE_RL_spiFlashFsm_action_d_init_np ||
	     WILL_FIRE_RL_spiFlashFsm_action_np ||
	     WILL_FIRE_RL_spiFlashFsm_action_l50c20 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l51c25 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l52c25 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l53c25 ||
	     spiFlashFsm_state_mkFSMstate == 6'd7 ||
	     WILL_FIRE_RL_spiFlashFsm_action_d_init_np_1 ||
	     WILL_FIRE_RL_spiFlashFsm_action_np_1 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l60c20 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l61c25 ||
	     spiFlashFsm_state_mkFSMstate == 6'd12 ||
	     spiFlashFsm_state_mkFSMstate == 6'd13 ||
	     NOT_busybit_42_73_AND_NOT_command_74_EQ_2_75_9_ETC___d205 ||
	     WILL_FIRE_RL_spiFlashFsm_action_np_2 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l67c16 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l68c21 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l69c21 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l70c21 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l71c21 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l73c30 ||
	     WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l76c32 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l77c21 ||
	     spiFlashFsm_state_mkFSMstate == 6'd25 ||
	     spiFlashFsm_state_mkFSMstate == 6'd26 ||
	     WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	     spiFlashFsm_state_mkFSMstate == 6'd30 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l88c16 ;

  // register ss
  assign ss$D_IN = !MUX_ss$write_1__SEL_1 ;
  assign ss$EN =
	     WILL_FIRE_RL_spiFlashFsm_action_l67c16 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l60c20 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l50c20 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l88c16 ||
	     spiFlashFsm_state_mkFSMstate == 6'd13 ||
	     spiFlashFsm_state_mkFSMstate == 6'd7 ;

  // submodule page_buffer_memory
  assign page_buffer_memory$ADDRA = operate_addr[7:0] ;
  assign page_buffer_memory$ADDRB = cnt[7:0] ;
  assign page_buffer_memory$DIA = operate_data ;
  assign page_buffer_memory$DIB =
	     WILL_FIRE_RL_spiFlashFsm_action_l76c32 ? 8'h0 : spi_ctrl$read ;
  assign page_buffer_memory$WEA = operate_wr ;
  assign page_buffer_memory$WEB = !WILL_FIRE_RL_spiFlashFsm_action_l76c32 ;
  assign page_buffer_memory$ENA =
	     page_buffer_serverAdapterA_writeWithResp$whas ;
  assign page_buffer_memory$ENB =
	     page_buffer_serverAdapterB_writeWithResp$whas ;

  // submodule page_buffer_serverAdapterA_outDataCore
  assign page_buffer_serverAdapterA_outDataCore$D_IN =
	     page_buffer_memory$DOA ;
  assign page_buffer_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_page_buffer_serverAdapterA_outData_enqAndDeq ||
	     page_buffer_serverAdapterA_outDataCore$FULL_N && !EN_read_byte &&
	     page_buffer_serverAdapterA_outData_enqData$whas ;
  assign page_buffer_serverAdapterA_outDataCore$DEQ =
	     WILL_FIRE_RL_page_buffer_serverAdapterA_outData_enqAndDeq ||
	     page_buffer_serverAdapterA_outDataCore$EMPTY_N && EN_read_byte &&
	     !page_buffer_serverAdapterA_outData_enqData$whas ;
  assign page_buffer_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule page_buffer_serverAdapterB_outDataCore
  assign page_buffer_serverAdapterB_outDataCore$D_IN =
	     page_buffer_memory$DOB ;
  assign page_buffer_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_page_buffer_serverAdapterB_outData_enqAndDeq ||
	     page_buffer_serverAdapterB_outDataCore$FULL_N &&
	     !WILL_FIRE_RL_spiFlashFsm_action_l77c21 &&
	     page_buffer_serverAdapterB_outData_enqData$whas ;
  assign page_buffer_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_page_buffer_serverAdapterB_outData_enqAndDeq ||
	     page_buffer_serverAdapterB_outDataCore$EMPTY_N &&
	     WILL_FIRE_RL_spiFlashFsm_action_l77c21 &&
	     !page_buffer_serverAdapterB_outData_enqData$whas ;
  assign page_buffer_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule spi_ctrl
  assign spi_ctrl$miso_i_i = miso_i_i ;
  always@(WILL_FIRE_RL_spiFlashFsm_action_l69c21 or
	  page_addr_h or
	  WILL_FIRE_RL_spiFlashFsm_action_l70c21 or
	  page_addr_l or
	  WILL_FIRE_RL_spiFlashFsm_action_l77c21 or
	  MUX_spi_ctrl$write_1__VAL_3 or
	  WILL_FIRE_RL_spiFlashFsm_action_l68c21 or
	  command or
	  MUX_spi_ctrl$write_1__SEL_5 or
	  WILL_FIRE_RL_spiFlashFsm_action_l51c25 or
	  WILL_FIRE_RL_spiFlashFsm_action_l61c25)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_spiFlashFsm_action_l69c21:
	  spi_ctrl$write_data = page_addr_h;
      WILL_FIRE_RL_spiFlashFsm_action_l70c21:
	  spi_ctrl$write_data = page_addr_l;
      WILL_FIRE_RL_spiFlashFsm_action_l77c21:
	  spi_ctrl$write_data = MUX_spi_ctrl$write_1__VAL_3;
      WILL_FIRE_RL_spiFlashFsm_action_l68c21: spi_ctrl$write_data = command;
      MUX_spi_ctrl$write_1__SEL_5: spi_ctrl$write_data = 8'h0;
      WILL_FIRE_RL_spiFlashFsm_action_l51c25: spi_ctrl$write_data = 8'h05;
      WILL_FIRE_RL_spiFlashFsm_action_l61c25: spi_ctrl$write_data = 8'h06;
      default: spi_ctrl$write_data = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign spi_ctrl$EN_write =
	     WILL_FIRE_RL_spiFlashFsm_action_l69c21 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l70c21 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l77c21 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l68c21 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l71c21 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l52c25 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l51c25 ||
	     WILL_FIRE_RL_spiFlashFsm_action_l61c25 ;

  // remaining internal signals
  assign NOT_busybit_42_73_AND_NOT_command_74_EQ_2_75_9_ETC___d205 =
	     !busybit && command != 8'd2 && command != 8'd32 &&
	     (spiFlashFsm_state_mkFSMstate == 6'd1 ||
	      spiFlashFsm_state_mkFSMstate == 6'd8) ||
	     spiFlashFsm_state_mkFSMstate == 6'd14 ;
  assign cnt_36_SLT_256___d237 = (cnt ^ 32'h80000000) < 32'h80000100 ;
  assign page_buffer_serverAdapterA_cnt_7_PLUS_IF_page__ETC___d33 =
	     page_buffer_serverAdapterA_cnt +
	     (page_buffer_serverAdapterA_cnt_1$whas ? 3'd1 : 3'd0) +
	     (EN_read_byte ? 3'd7 : 3'd0) ;
  assign page_buffer_serverAdapterB_cnt_0_PLUS_IF_page__ETC___d86 =
	     page_buffer_serverAdapterB_cnt +
	     (page_buffer_serverAdapterB_cnt_1$whas ? 3'd1 : 3'd0) +
	     (WILL_FIRE_RL_spiFlashFsm_action_l77c21 ? 3'd7 : 3'd0) ;
  assign page_buffer_serverAdapterB_cnt_0_SLT_3___d235 =
	     (page_buffer_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign spiFlashFsm_abort_whas__09_AND_spiFlashFsm_abo_ETC___d291 =
	     (spiFlashFsm_state_mkFSMstate == 6'd0 ||
	      spiFlashFsm_state_mkFSMstate == 6'd32) &&
	     (!spiFlashFsm_start_reg_1 || spiFlashFsm_state_fired) ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        busybit <= `BSV_ASSIGNMENT_DELAY 1'd1;
	cnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	command <= `BSV_ASSIGNMENT_DELAY 8'd255;
	page_addr_h <= `BSV_ASSIGNMENT_DELAY 8'd0;
	page_addr_l <= `BSV_ASSIGNMENT_DELAY 8'd0;
	page_buffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	page_buffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	page_buffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	page_buffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	spiFlashFsm_jj_1_delay_count <= `BSV_ASSIGNMENT_DELAY 7'd0;
	spiFlashFsm_jj_2_delay_count <= `BSV_ASSIGNMENT_DELAY 7'd0;
	spiFlashFsm_jj_delay_count <= `BSV_ASSIGNMENT_DELAY 7'd0;
	spiFlashFsm_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	spiFlashFsm_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	spiFlashFsm_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	spiFlashFsm_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	spiFlashFsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 6'd0;
	ss <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (busybit$EN) busybit <= `BSV_ASSIGNMENT_DELAY busybit$D_IN;
	if (cnt$EN) cnt <= `BSV_ASSIGNMENT_DELAY cnt$D_IN;
	if (command$EN) command <= `BSV_ASSIGNMENT_DELAY command$D_IN;
	if (page_addr_h$EN)
	  page_addr_h <= `BSV_ASSIGNMENT_DELAY page_addr_h$D_IN;
	if (page_addr_l$EN)
	  page_addr_l <= `BSV_ASSIGNMENT_DELAY page_addr_l$D_IN;
	if (page_buffer_serverAdapterA_cnt$EN)
	  page_buffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      page_buffer_serverAdapterA_cnt$D_IN;
	if (page_buffer_serverAdapterA_s1$EN)
	  page_buffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      page_buffer_serverAdapterA_s1$D_IN;
	if (page_buffer_serverAdapterB_cnt$EN)
	  page_buffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      page_buffer_serverAdapterB_cnt$D_IN;
	if (page_buffer_serverAdapterB_s1$EN)
	  page_buffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      page_buffer_serverAdapterB_s1$D_IN;
	if (spiFlashFsm_jj_1_delay_count$EN)
	  spiFlashFsm_jj_1_delay_count <= `BSV_ASSIGNMENT_DELAY
	      spiFlashFsm_jj_1_delay_count$D_IN;
	if (spiFlashFsm_jj_2_delay_count$EN)
	  spiFlashFsm_jj_2_delay_count <= `BSV_ASSIGNMENT_DELAY
	      spiFlashFsm_jj_2_delay_count$D_IN;
	if (spiFlashFsm_jj_delay_count$EN)
	  spiFlashFsm_jj_delay_count <= `BSV_ASSIGNMENT_DELAY
	      spiFlashFsm_jj_delay_count$D_IN;
	if (spiFlashFsm_start_reg$EN)
	  spiFlashFsm_start_reg <= `BSV_ASSIGNMENT_DELAY
	      spiFlashFsm_start_reg$D_IN;
	if (spiFlashFsm_start_reg_1$EN)
	  spiFlashFsm_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      spiFlashFsm_start_reg_1$D_IN;
	if (spiFlashFsm_state_can_overlap$EN)
	  spiFlashFsm_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      spiFlashFsm_state_can_overlap$D_IN;
	if (spiFlashFsm_state_fired$EN)
	  spiFlashFsm_state_fired <= `BSV_ASSIGNMENT_DELAY
	      spiFlashFsm_state_fired$D_IN;
	if (spiFlashFsm_state_mkFSMstate$EN)
	  spiFlashFsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      spiFlashFsm_state_mkFSMstate$D_IN;
	if (ss$EN) ss <= `BSV_ASSIGNMENT_DELAY ss$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    busybit = 1'h0;
    cnt = 32'hAAAAAAAA;
    command = 8'hAA;
    page_addr_h = 8'hAA;
    page_addr_l = 8'hAA;
    page_buffer_serverAdapterA_cnt = 3'h2;
    page_buffer_serverAdapterA_s1 = 2'h2;
    page_buffer_serverAdapterB_cnt = 3'h2;
    page_buffer_serverAdapterB_s1 = 2'h2;
    spiFlashFsm_jj_1_delay_count = 7'h2A;
    spiFlashFsm_jj_2_delay_count = 7'h2A;
    spiFlashFsm_jj_delay_count = 7'h2A;
    spiFlashFsm_start_reg = 1'h0;
    spiFlashFsm_start_reg_1 = 1'h0;
    spiFlashFsm_state_can_overlap = 1'h0;
    spiFlashFsm_state_fired = 1'h0;
    spiFlashFsm_state_mkFSMstate = 6'h2A;
    ss = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (page_buffer_serverAdapterA_s1[1] &&
	  !page_buffer_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (page_buffer_serverAdapterB_s1[1] &&
	  !page_buffer_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spiFlashFsm_action_l47c21 &&
	  (WILL_FIRE_RL_spiFlashFsm_action_d_init_np ||
	   WILL_FIRE_RL_spiFlashFsm_action_np ||
	   WILL_FIRE_RL_spiFlashFsm_action_l50c20 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l51c25 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l52c25 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l53c25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd7 ||
	   WILL_FIRE_RL_spiFlashFsm_action_d_init_np_1 ||
	   WILL_FIRE_RL_spiFlashFsm_action_np_1 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l60c20 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l61c25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd12 ||
	   spiFlashFsm_state_mkFSMstate == 6'd13 ||
	   NOT_busybit_42_73_AND_NOT_command_74_EQ_2_75_9_ETC___d205 ||
	   WILL_FIRE_RL_spiFlashFsm_action_np_2 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l67c16 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l68c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l69c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l70c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l71c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l73c30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l76c32 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l77c21 ||
	   spiFlashFsm_state_mkFSMstate == 6'd25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd26 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"SPIFlashController.bsv\", line 47, column 21: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFlashFsm_action_l47c21]\n  and [RL_spiFlashFsm_action_d_init_np, RL_spiFlashFsm_action_np,\n  RL_spiFlashFsm_action_l50c20, RL_spiFlashFsm_action_l51c25,\n  RL_spiFlashFsm_action_l52c25, RL_spiFlashFsm_action_l53c25,\n  RL_spiFlashFsm_action_l54c20, RL_spiFlashFsm_action_d_init_np_1,\n  RL_spiFlashFsm_action_np_1, RL_spiFlashFsm_action_l60c20,\n  RL_spiFlashFsm_action_l61c25, RL_spiFlashFsm_action_l62c30,\n  RL_spiFlashFsm_action_l63c20, RL_spiFlashFsm_action_d_init_np_2,\n  RL_spiFlashFsm_action_np_2, RL_spiFlashFsm_action_l67c16,\n  RL_spiFlashFsm_action_l68c21, RL_spiFlashFsm_action_l69c21,\n  RL_spiFlashFsm_action_l70c21, RL_spiFlashFsm_action_l71c21,\n  RL_spiFlashFsm_action_l73c30, RL_spiFlashFsm_action_f_init_l75c17,\n  RL_spiFlashFsm_action_l76c32, RL_spiFlashFsm_action_l77c21,\n  RL_spiFlashFsm_action_l81c34, RL_spiFlashFsm_action_f_update_l75c17,\n  RL_spiFlashFsm_action_f_init_l84c17, RL_spiFlashFsm_action_l85c29,\n  RL_spiFlashFsm_action_l86c32, RL_spiFlashFsm_action_f_update_l84c17,\n  RL_spiFlashFsm_action_l88c16] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spiFlashFsm_action_d_init_np &&
	  (WILL_FIRE_RL_spiFlashFsm_action_np ||
	   WILL_FIRE_RL_spiFlashFsm_action_l50c20 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l51c25 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l52c25 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l53c25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd7 ||
	   WILL_FIRE_RL_spiFlashFsm_action_d_init_np_1 ||
	   WILL_FIRE_RL_spiFlashFsm_action_np_1 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l60c20 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l61c25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd12 ||
	   spiFlashFsm_state_mkFSMstate == 6'd13 ||
	   NOT_busybit_42_73_AND_NOT_command_74_EQ_2_75_9_ETC___d205 ||
	   WILL_FIRE_RL_spiFlashFsm_action_np_2 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l67c16 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l68c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l69c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l70c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l71c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l73c30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l76c32 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l77c21 ||
	   spiFlashFsm_state_mkFSMstate == 6'd25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd26 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"StmtFSM.bs\", line 41, column 0: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFlashFsm_action_d_init_np]\n  and [RL_spiFlashFsm_action_np, RL_spiFlashFsm_action_l50c20,\n  RL_spiFlashFsm_action_l51c25, RL_spiFlashFsm_action_l52c25,\n  RL_spiFlashFsm_action_l53c25, RL_spiFlashFsm_action_l54c20,\n  RL_spiFlashFsm_action_d_init_np_1, RL_spiFlashFsm_action_np_1,\n  RL_spiFlashFsm_action_l60c20, RL_spiFlashFsm_action_l61c25,\n  RL_spiFlashFsm_action_l62c30, RL_spiFlashFsm_action_l63c20,\n  RL_spiFlashFsm_action_d_init_np_2, RL_spiFlashFsm_action_np_2,\n  RL_spiFlashFsm_action_l67c16, RL_spiFlashFsm_action_l68c21,\n  RL_spiFlashFsm_action_l69c21, RL_spiFlashFsm_action_l70c21,\n  RL_spiFlashFsm_action_l71c21, RL_spiFlashFsm_action_l73c30,\n  RL_spiFlashFsm_action_f_init_l75c17, RL_spiFlashFsm_action_l76c32,\n  RL_spiFlashFsm_action_l77c21, RL_spiFlashFsm_action_l81c34,\n  RL_spiFlashFsm_action_f_update_l75c17, RL_spiFlashFsm_action_f_init_l84c17,\n  RL_spiFlashFsm_action_l85c29, RL_spiFlashFsm_action_l86c32,\n  RL_spiFlashFsm_action_f_update_l84c17, RL_spiFlashFsm_action_l88c16] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spiFlashFsm_action_np &&
	  (WILL_FIRE_RL_spiFlashFsm_action_l50c20 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l51c25 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l52c25 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l53c25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd7 ||
	   WILL_FIRE_RL_spiFlashFsm_action_d_init_np_1 ||
	   WILL_FIRE_RL_spiFlashFsm_action_np_1 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l60c20 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l61c25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd12 ||
	   spiFlashFsm_state_mkFSMstate == 6'd13 ||
	   NOT_busybit_42_73_AND_NOT_command_74_EQ_2_75_9_ETC___d205 ||
	   WILL_FIRE_RL_spiFlashFsm_action_np_2 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l67c16 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l68c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l69c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l70c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l71c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l73c30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l76c32 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l77c21 ||
	   spiFlashFsm_state_mkFSMstate == 6'd25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd26 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"StmtFSM.bs\", line 41, column 0: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFlashFsm_action_np] and\n  [RL_spiFlashFsm_action_l50c20, RL_spiFlashFsm_action_l51c25,\n  RL_spiFlashFsm_action_l52c25, RL_spiFlashFsm_action_l53c25,\n  RL_spiFlashFsm_action_l54c20, RL_spiFlashFsm_action_d_init_np_1,\n  RL_spiFlashFsm_action_np_1, RL_spiFlashFsm_action_l60c20,\n  RL_spiFlashFsm_action_l61c25, RL_spiFlashFsm_action_l62c30,\n  RL_spiFlashFsm_action_l63c20, RL_spiFlashFsm_action_d_init_np_2,\n  RL_spiFlashFsm_action_np_2, RL_spiFlashFsm_action_l67c16,\n  RL_spiFlashFsm_action_l68c21, RL_spiFlashFsm_action_l69c21,\n  RL_spiFlashFsm_action_l70c21, RL_spiFlashFsm_action_l71c21,\n  RL_spiFlashFsm_action_l73c30, RL_spiFlashFsm_action_f_init_l75c17,\n  RL_spiFlashFsm_action_l76c32, RL_spiFlashFsm_action_l77c21,\n  RL_spiFlashFsm_action_l81c34, RL_spiFlashFsm_action_f_update_l75c17,\n  RL_spiFlashFsm_action_f_init_l84c17, RL_spiFlashFsm_action_l85c29,\n  RL_spiFlashFsm_action_l86c32, RL_spiFlashFsm_action_f_update_l84c17,\n  RL_spiFlashFsm_action_l88c16] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spiFlashFsm_action_l50c20 &&
	  (WILL_FIRE_RL_spiFlashFsm_action_l51c25 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l52c25 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l53c25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd7 ||
	   WILL_FIRE_RL_spiFlashFsm_action_d_init_np_1 ||
	   WILL_FIRE_RL_spiFlashFsm_action_np_1 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l60c20 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l61c25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd12 ||
	   spiFlashFsm_state_mkFSMstate == 6'd13 ||
	   NOT_busybit_42_73_AND_NOT_command_74_EQ_2_75_9_ETC___d205 ||
	   WILL_FIRE_RL_spiFlashFsm_action_np_2 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l67c16 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l68c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l69c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l70c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l71c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l73c30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l76c32 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l77c21 ||
	   spiFlashFsm_state_mkFSMstate == 6'd25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd26 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"SPIFlashController.bsv\", line 50, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFlashFsm_action_l50c20]\n  and [RL_spiFlashFsm_action_l51c25, RL_spiFlashFsm_action_l52c25,\n  RL_spiFlashFsm_action_l53c25, RL_spiFlashFsm_action_l54c20,\n  RL_spiFlashFsm_action_d_init_np_1, RL_spiFlashFsm_action_np_1,\n  RL_spiFlashFsm_action_l60c20, RL_spiFlashFsm_action_l61c25,\n  RL_spiFlashFsm_action_l62c30, RL_spiFlashFsm_action_l63c20,\n  RL_spiFlashFsm_action_d_init_np_2, RL_spiFlashFsm_action_np_2,\n  RL_spiFlashFsm_action_l67c16, RL_spiFlashFsm_action_l68c21,\n  RL_spiFlashFsm_action_l69c21, RL_spiFlashFsm_action_l70c21,\n  RL_spiFlashFsm_action_l71c21, RL_spiFlashFsm_action_l73c30,\n  RL_spiFlashFsm_action_f_init_l75c17, RL_spiFlashFsm_action_l76c32,\n  RL_spiFlashFsm_action_l77c21, RL_spiFlashFsm_action_l81c34,\n  RL_spiFlashFsm_action_f_update_l75c17, RL_spiFlashFsm_action_f_init_l84c17,\n  RL_spiFlashFsm_action_l85c29, RL_spiFlashFsm_action_l86c32,\n  RL_spiFlashFsm_action_f_update_l84c17, RL_spiFlashFsm_action_l88c16] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spiFlashFsm_action_l51c25 &&
	  (WILL_FIRE_RL_spiFlashFsm_action_l52c25 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l53c25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd7 ||
	   WILL_FIRE_RL_spiFlashFsm_action_d_init_np_1 ||
	   WILL_FIRE_RL_spiFlashFsm_action_np_1 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l60c20 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l61c25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd12 ||
	   spiFlashFsm_state_mkFSMstate == 6'd13 ||
	   NOT_busybit_42_73_AND_NOT_command_74_EQ_2_75_9_ETC___d205 ||
	   WILL_FIRE_RL_spiFlashFsm_action_np_2 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l67c16 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l68c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l69c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l70c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l71c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l73c30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l76c32 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l77c21 ||
	   spiFlashFsm_state_mkFSMstate == 6'd25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd26 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"SPIFlashController.bsv\", line 51, column 25: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFlashFsm_action_l51c25]\n  and [RL_spiFlashFsm_action_l52c25, RL_spiFlashFsm_action_l53c25,\n  RL_spiFlashFsm_action_l54c20, RL_spiFlashFsm_action_d_init_np_1,\n  RL_spiFlashFsm_action_np_1, RL_spiFlashFsm_action_l60c20,\n  RL_spiFlashFsm_action_l61c25, RL_spiFlashFsm_action_l62c30,\n  RL_spiFlashFsm_action_l63c20, RL_spiFlashFsm_action_d_init_np_2,\n  RL_spiFlashFsm_action_np_2, RL_spiFlashFsm_action_l67c16,\n  RL_spiFlashFsm_action_l68c21, RL_spiFlashFsm_action_l69c21,\n  RL_spiFlashFsm_action_l70c21, RL_spiFlashFsm_action_l71c21,\n  RL_spiFlashFsm_action_l73c30, RL_spiFlashFsm_action_f_init_l75c17,\n  RL_spiFlashFsm_action_l76c32, RL_spiFlashFsm_action_l77c21,\n  RL_spiFlashFsm_action_l81c34, RL_spiFlashFsm_action_f_update_l75c17,\n  RL_spiFlashFsm_action_f_init_l84c17, RL_spiFlashFsm_action_l85c29,\n  RL_spiFlashFsm_action_l86c32, RL_spiFlashFsm_action_f_update_l84c17,\n  RL_spiFlashFsm_action_l88c16] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spiFlashFsm_action_l52c25 &&
	  (WILL_FIRE_RL_spiFlashFsm_action_l53c25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd7 ||
	   WILL_FIRE_RL_spiFlashFsm_action_d_init_np_1 ||
	   WILL_FIRE_RL_spiFlashFsm_action_np_1 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l60c20 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l61c25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd12 ||
	   spiFlashFsm_state_mkFSMstate == 6'd13 ||
	   NOT_busybit_42_73_AND_NOT_command_74_EQ_2_75_9_ETC___d205 ||
	   WILL_FIRE_RL_spiFlashFsm_action_np_2 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l67c16 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l68c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l69c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l70c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l71c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l73c30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l76c32 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l77c21 ||
	   spiFlashFsm_state_mkFSMstate == 6'd25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd26 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"SPIFlashController.bsv\", line 52, column 25: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFlashFsm_action_l52c25]\n  and [RL_spiFlashFsm_action_l53c25, RL_spiFlashFsm_action_l54c20,\n  RL_spiFlashFsm_action_d_init_np_1, RL_spiFlashFsm_action_np_1,\n  RL_spiFlashFsm_action_l60c20, RL_spiFlashFsm_action_l61c25,\n  RL_spiFlashFsm_action_l62c30, RL_spiFlashFsm_action_l63c20,\n  RL_spiFlashFsm_action_d_init_np_2, RL_spiFlashFsm_action_np_2,\n  RL_spiFlashFsm_action_l67c16, RL_spiFlashFsm_action_l68c21,\n  RL_spiFlashFsm_action_l69c21, RL_spiFlashFsm_action_l70c21,\n  RL_spiFlashFsm_action_l71c21, RL_spiFlashFsm_action_l73c30,\n  RL_spiFlashFsm_action_f_init_l75c17, RL_spiFlashFsm_action_l76c32,\n  RL_spiFlashFsm_action_l77c21, RL_spiFlashFsm_action_l81c34,\n  RL_spiFlashFsm_action_f_update_l75c17, RL_spiFlashFsm_action_f_init_l84c17,\n  RL_spiFlashFsm_action_l85c29, RL_spiFlashFsm_action_l86c32,\n  RL_spiFlashFsm_action_f_update_l84c17, RL_spiFlashFsm_action_l88c16] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spiFlashFsm_action_l53c25 &&
	  (spiFlashFsm_state_mkFSMstate == 6'd7 ||
	   WILL_FIRE_RL_spiFlashFsm_action_d_init_np_1 ||
	   WILL_FIRE_RL_spiFlashFsm_action_np_1 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l60c20 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l61c25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd12 ||
	   spiFlashFsm_state_mkFSMstate == 6'd13 ||
	   NOT_busybit_42_73_AND_NOT_command_74_EQ_2_75_9_ETC___d205 ||
	   WILL_FIRE_RL_spiFlashFsm_action_np_2 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l67c16 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l68c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l69c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l70c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l71c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l73c30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l76c32 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l77c21 ||
	   spiFlashFsm_state_mkFSMstate == 6'd25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd26 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"SPIFlashController.bsv\", line 53, column 25: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFlashFsm_action_l53c25]\n  and [RL_spiFlashFsm_action_l54c20, RL_spiFlashFsm_action_d_init_np_1,\n  RL_spiFlashFsm_action_np_1, RL_spiFlashFsm_action_l60c20,\n  RL_spiFlashFsm_action_l61c25, RL_spiFlashFsm_action_l62c30,\n  RL_spiFlashFsm_action_l63c20, RL_spiFlashFsm_action_d_init_np_2,\n  RL_spiFlashFsm_action_np_2, RL_spiFlashFsm_action_l67c16,\n  RL_spiFlashFsm_action_l68c21, RL_spiFlashFsm_action_l69c21,\n  RL_spiFlashFsm_action_l70c21, RL_spiFlashFsm_action_l71c21,\n  RL_spiFlashFsm_action_l73c30, RL_spiFlashFsm_action_f_init_l75c17,\n  RL_spiFlashFsm_action_l76c32, RL_spiFlashFsm_action_l77c21,\n  RL_spiFlashFsm_action_l81c34, RL_spiFlashFsm_action_f_update_l75c17,\n  RL_spiFlashFsm_action_f_init_l84c17, RL_spiFlashFsm_action_l85c29,\n  RL_spiFlashFsm_action_l86c32, RL_spiFlashFsm_action_f_update_l84c17,\n  RL_spiFlashFsm_action_l88c16] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (spiFlashFsm_state_mkFSMstate == 6'd7 &&
	  (WILL_FIRE_RL_spiFlashFsm_action_d_init_np_1 ||
	   WILL_FIRE_RL_spiFlashFsm_action_np_1 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l60c20 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l61c25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd12 ||
	   spiFlashFsm_state_mkFSMstate == 6'd13 ||
	   NOT_busybit_42_73_AND_NOT_command_74_EQ_2_75_9_ETC___d205 ||
	   WILL_FIRE_RL_spiFlashFsm_action_np_2 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l67c16 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l68c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l69c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l70c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l71c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l73c30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l76c32 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l77c21 ||
	   spiFlashFsm_state_mkFSMstate == 6'd25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd26 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"SPIFlashController.bsv\", line 54, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFlashFsm_action_l54c20]\n  and [RL_spiFlashFsm_action_d_init_np_1, RL_spiFlashFsm_action_np_1,\n  RL_spiFlashFsm_action_l60c20, RL_spiFlashFsm_action_l61c25,\n  RL_spiFlashFsm_action_l62c30, RL_spiFlashFsm_action_l63c20,\n  RL_spiFlashFsm_action_d_init_np_2, RL_spiFlashFsm_action_np_2,\n  RL_spiFlashFsm_action_l67c16, RL_spiFlashFsm_action_l68c21,\n  RL_spiFlashFsm_action_l69c21, RL_spiFlashFsm_action_l70c21,\n  RL_spiFlashFsm_action_l71c21, RL_spiFlashFsm_action_l73c30,\n  RL_spiFlashFsm_action_f_init_l75c17, RL_spiFlashFsm_action_l76c32,\n  RL_spiFlashFsm_action_l77c21, RL_spiFlashFsm_action_l81c34,\n  RL_spiFlashFsm_action_f_update_l75c17, RL_spiFlashFsm_action_f_init_l84c17,\n  RL_spiFlashFsm_action_l85c29, RL_spiFlashFsm_action_l86c32,\n  RL_spiFlashFsm_action_f_update_l84c17, RL_spiFlashFsm_action_l88c16] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spiFlashFsm_action_d_init_np_1 &&
	  (WILL_FIRE_RL_spiFlashFsm_action_np_1 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l60c20 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l61c25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd12 ||
	   spiFlashFsm_state_mkFSMstate == 6'd13 ||
	   NOT_busybit_42_73_AND_NOT_command_74_EQ_2_75_9_ETC___d205 ||
	   WILL_FIRE_RL_spiFlashFsm_action_np_2 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l67c16 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l68c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l69c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l70c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l71c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l73c30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l76c32 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l77c21 ||
	   spiFlashFsm_state_mkFSMstate == 6'd25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd26 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"StmtFSM.bs\", line 41, column 0: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_spiFlashFsm_action_d_init_np_1] and [RL_spiFlashFsm_action_np_1,\n  RL_spiFlashFsm_action_l60c20, RL_spiFlashFsm_action_l61c25,\n  RL_spiFlashFsm_action_l62c30, RL_spiFlashFsm_action_l63c20,\n  RL_spiFlashFsm_action_d_init_np_2, RL_spiFlashFsm_action_np_2,\n  RL_spiFlashFsm_action_l67c16, RL_spiFlashFsm_action_l68c21,\n  RL_spiFlashFsm_action_l69c21, RL_spiFlashFsm_action_l70c21,\n  RL_spiFlashFsm_action_l71c21, RL_spiFlashFsm_action_l73c30,\n  RL_spiFlashFsm_action_f_init_l75c17, RL_spiFlashFsm_action_l76c32,\n  RL_spiFlashFsm_action_l77c21, RL_spiFlashFsm_action_l81c34,\n  RL_spiFlashFsm_action_f_update_l75c17, RL_spiFlashFsm_action_f_init_l84c17,\n  RL_spiFlashFsm_action_l85c29, RL_spiFlashFsm_action_l86c32,\n  RL_spiFlashFsm_action_f_update_l84c17, RL_spiFlashFsm_action_l88c16] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spiFlashFsm_action_np_1 &&
	  (WILL_FIRE_RL_spiFlashFsm_action_l60c20 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l61c25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd12 ||
	   spiFlashFsm_state_mkFSMstate == 6'd13 ||
	   NOT_busybit_42_73_AND_NOT_command_74_EQ_2_75_9_ETC___d205 ||
	   WILL_FIRE_RL_spiFlashFsm_action_np_2 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l67c16 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l68c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l69c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l70c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l71c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l73c30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l76c32 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l77c21 ||
	   spiFlashFsm_state_mkFSMstate == 6'd25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd26 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"StmtFSM.bs\", line 41, column 0: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFlashFsm_action_np_1] and\n  [RL_spiFlashFsm_action_l60c20, RL_spiFlashFsm_action_l61c25,\n  RL_spiFlashFsm_action_l62c30, RL_spiFlashFsm_action_l63c20,\n  RL_spiFlashFsm_action_d_init_np_2, RL_spiFlashFsm_action_np_2,\n  RL_spiFlashFsm_action_l67c16, RL_spiFlashFsm_action_l68c21,\n  RL_spiFlashFsm_action_l69c21, RL_spiFlashFsm_action_l70c21,\n  RL_spiFlashFsm_action_l71c21, RL_spiFlashFsm_action_l73c30,\n  RL_spiFlashFsm_action_f_init_l75c17, RL_spiFlashFsm_action_l76c32,\n  RL_spiFlashFsm_action_l77c21, RL_spiFlashFsm_action_l81c34,\n  RL_spiFlashFsm_action_f_update_l75c17, RL_spiFlashFsm_action_f_init_l84c17,\n  RL_spiFlashFsm_action_l85c29, RL_spiFlashFsm_action_l86c32,\n  RL_spiFlashFsm_action_f_update_l84c17, RL_spiFlashFsm_action_l88c16] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spiFlashFsm_action_l60c20 &&
	  (WILL_FIRE_RL_spiFlashFsm_action_l61c25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd12 ||
	   spiFlashFsm_state_mkFSMstate == 6'd13 ||
	   NOT_busybit_42_73_AND_NOT_command_74_EQ_2_75_9_ETC___d205 ||
	   WILL_FIRE_RL_spiFlashFsm_action_np_2 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l67c16 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l68c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l69c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l70c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l71c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l73c30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l76c32 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l77c21 ||
	   spiFlashFsm_state_mkFSMstate == 6'd25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd26 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"SPIFlashController.bsv\", line 60, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFlashFsm_action_l60c20]\n  and [RL_spiFlashFsm_action_l61c25, RL_spiFlashFsm_action_l62c30,\n  RL_spiFlashFsm_action_l63c20, RL_spiFlashFsm_action_d_init_np_2,\n  RL_spiFlashFsm_action_np_2, RL_spiFlashFsm_action_l67c16,\n  RL_spiFlashFsm_action_l68c21, RL_spiFlashFsm_action_l69c21,\n  RL_spiFlashFsm_action_l70c21, RL_spiFlashFsm_action_l71c21,\n  RL_spiFlashFsm_action_l73c30, RL_spiFlashFsm_action_f_init_l75c17,\n  RL_spiFlashFsm_action_l76c32, RL_spiFlashFsm_action_l77c21,\n  RL_spiFlashFsm_action_l81c34, RL_spiFlashFsm_action_f_update_l75c17,\n  RL_spiFlashFsm_action_f_init_l84c17, RL_spiFlashFsm_action_l85c29,\n  RL_spiFlashFsm_action_l86c32, RL_spiFlashFsm_action_f_update_l84c17,\n  RL_spiFlashFsm_action_l88c16] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spiFlashFsm_action_l61c25 &&
	  (spiFlashFsm_state_mkFSMstate == 6'd12 ||
	   spiFlashFsm_state_mkFSMstate == 6'd13 ||
	   NOT_busybit_42_73_AND_NOT_command_74_EQ_2_75_9_ETC___d205 ||
	   WILL_FIRE_RL_spiFlashFsm_action_np_2 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l67c16 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l68c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l69c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l70c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l71c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l73c30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l76c32 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l77c21 ||
	   spiFlashFsm_state_mkFSMstate == 6'd25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd26 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"SPIFlashController.bsv\", line 61, column 25: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFlashFsm_action_l61c25]\n  and [RL_spiFlashFsm_action_l62c30, RL_spiFlashFsm_action_l63c20,\n  RL_spiFlashFsm_action_d_init_np_2, RL_spiFlashFsm_action_np_2,\n  RL_spiFlashFsm_action_l67c16, RL_spiFlashFsm_action_l68c21,\n  RL_spiFlashFsm_action_l69c21, RL_spiFlashFsm_action_l70c21,\n  RL_spiFlashFsm_action_l71c21, RL_spiFlashFsm_action_l73c30,\n  RL_spiFlashFsm_action_f_init_l75c17, RL_spiFlashFsm_action_l76c32,\n  RL_spiFlashFsm_action_l77c21, RL_spiFlashFsm_action_l81c34,\n  RL_spiFlashFsm_action_f_update_l75c17, RL_spiFlashFsm_action_f_init_l84c17,\n  RL_spiFlashFsm_action_l85c29, RL_spiFlashFsm_action_l86c32,\n  RL_spiFlashFsm_action_f_update_l84c17, RL_spiFlashFsm_action_l88c16] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (spiFlashFsm_state_mkFSMstate == 6'd12 &&
	  (spiFlashFsm_state_mkFSMstate == 6'd13 ||
	   NOT_busybit_42_73_AND_NOT_command_74_EQ_2_75_9_ETC___d205 ||
	   WILL_FIRE_RL_spiFlashFsm_action_np_2 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l67c16 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l68c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l69c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l70c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l71c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l73c30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l76c32 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l77c21 ||
	   spiFlashFsm_state_mkFSMstate == 6'd25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd26 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"SPIFlashController.bsv\", line 62, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFlashFsm_action_l62c30]\n  and [RL_spiFlashFsm_action_l63c20, RL_spiFlashFsm_action_d_init_np_2,\n  RL_spiFlashFsm_action_np_2, RL_spiFlashFsm_action_l67c16,\n  RL_spiFlashFsm_action_l68c21, RL_spiFlashFsm_action_l69c21,\n  RL_spiFlashFsm_action_l70c21, RL_spiFlashFsm_action_l71c21,\n  RL_spiFlashFsm_action_l73c30, RL_spiFlashFsm_action_f_init_l75c17,\n  RL_spiFlashFsm_action_l76c32, RL_spiFlashFsm_action_l77c21,\n  RL_spiFlashFsm_action_l81c34, RL_spiFlashFsm_action_f_update_l75c17,\n  RL_spiFlashFsm_action_f_init_l84c17, RL_spiFlashFsm_action_l85c29,\n  RL_spiFlashFsm_action_l86c32, RL_spiFlashFsm_action_f_update_l84c17,\n  RL_spiFlashFsm_action_l88c16] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (NOT_busybit_42_73_AND_NOT_command_74_EQ_2_75_9_ETC___d205 &&
	  (WILL_FIRE_RL_spiFlashFsm_action_np_2 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l67c16 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l68c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l69c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l70c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l71c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l73c30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l76c32 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l77c21 ||
	   spiFlashFsm_state_mkFSMstate == 6'd25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd26 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"StmtFSM.bs\", line 41, column 0: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_spiFlashFsm_action_d_init_np_2] and [RL_spiFlashFsm_action_np_2,\n  RL_spiFlashFsm_action_l67c16, RL_spiFlashFsm_action_l68c21,\n  RL_spiFlashFsm_action_l69c21, RL_spiFlashFsm_action_l70c21,\n  RL_spiFlashFsm_action_l71c21, RL_spiFlashFsm_action_l73c30,\n  RL_spiFlashFsm_action_f_init_l75c17, RL_spiFlashFsm_action_l76c32,\n  RL_spiFlashFsm_action_l77c21, RL_spiFlashFsm_action_l81c34,\n  RL_spiFlashFsm_action_f_update_l75c17, RL_spiFlashFsm_action_f_init_l84c17,\n  RL_spiFlashFsm_action_l85c29, RL_spiFlashFsm_action_l86c32,\n  RL_spiFlashFsm_action_f_update_l84c17, RL_spiFlashFsm_action_l88c16] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (spiFlashFsm_state_mkFSMstate == 6'd13 &&
	  (NOT_busybit_42_73_AND_NOT_command_74_EQ_2_75_9_ETC___d205 ||
	   WILL_FIRE_RL_spiFlashFsm_action_np_2 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l67c16 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l68c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l69c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l70c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l71c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l73c30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l76c32 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l77c21 ||
	   spiFlashFsm_state_mkFSMstate == 6'd25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd26 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"SPIFlashController.bsv\", line 63, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFlashFsm_action_l63c20]\n  and [RL_spiFlashFsm_action_d_init_np_2, RL_spiFlashFsm_action_np_2,\n  RL_spiFlashFsm_action_l67c16, RL_spiFlashFsm_action_l68c21,\n  RL_spiFlashFsm_action_l69c21, RL_spiFlashFsm_action_l70c21,\n  RL_spiFlashFsm_action_l71c21, RL_spiFlashFsm_action_l73c30,\n  RL_spiFlashFsm_action_f_init_l75c17, RL_spiFlashFsm_action_l76c32,\n  RL_spiFlashFsm_action_l77c21, RL_spiFlashFsm_action_l81c34,\n  RL_spiFlashFsm_action_f_update_l75c17, RL_spiFlashFsm_action_f_init_l84c17,\n  RL_spiFlashFsm_action_l85c29, RL_spiFlashFsm_action_l86c32,\n  RL_spiFlashFsm_action_f_update_l84c17, RL_spiFlashFsm_action_l88c16] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spiFlashFsm_action_np_2 &&
	  (WILL_FIRE_RL_spiFlashFsm_action_l67c16 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l68c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l69c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l70c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l71c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l73c30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l76c32 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l77c21 ||
	   spiFlashFsm_state_mkFSMstate == 6'd25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd26 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"StmtFSM.bs\", line 41, column 0: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFlashFsm_action_np_2] and\n  [RL_spiFlashFsm_action_l67c16, RL_spiFlashFsm_action_l68c21,\n  RL_spiFlashFsm_action_l69c21, RL_spiFlashFsm_action_l70c21,\n  RL_spiFlashFsm_action_l71c21, RL_spiFlashFsm_action_l73c30,\n  RL_spiFlashFsm_action_f_init_l75c17, RL_spiFlashFsm_action_l76c32,\n  RL_spiFlashFsm_action_l77c21, RL_spiFlashFsm_action_l81c34,\n  RL_spiFlashFsm_action_f_update_l75c17, RL_spiFlashFsm_action_f_init_l84c17,\n  RL_spiFlashFsm_action_l85c29, RL_spiFlashFsm_action_l86c32,\n  RL_spiFlashFsm_action_f_update_l84c17, RL_spiFlashFsm_action_l88c16] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spiFlashFsm_action_l68c21 &&
	  (WILL_FIRE_RL_spiFlashFsm_action_l69c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l70c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l71c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l73c30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l76c32 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l77c21 ||
	   spiFlashFsm_state_mkFSMstate == 6'd25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd26 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"SPIFlashController.bsv\", line 68, column 21: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFlashFsm_action_l68c21]\n  and [RL_spiFlashFsm_action_l69c21, RL_spiFlashFsm_action_l70c21,\n  RL_spiFlashFsm_action_l71c21, RL_spiFlashFsm_action_l73c30,\n  RL_spiFlashFsm_action_f_init_l75c17, RL_spiFlashFsm_action_l76c32,\n  RL_spiFlashFsm_action_l77c21, RL_spiFlashFsm_action_l81c34,\n  RL_spiFlashFsm_action_f_update_l75c17, RL_spiFlashFsm_action_f_init_l84c17,\n  RL_spiFlashFsm_action_l85c29, RL_spiFlashFsm_action_l86c32,\n  RL_spiFlashFsm_action_f_update_l84c17, RL_spiFlashFsm_action_l88c16] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spiFlashFsm_action_l67c16 &&
	  (WILL_FIRE_RL_spiFlashFsm_action_l68c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l69c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l70c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l71c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l73c30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l76c32 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l77c21 ||
	   spiFlashFsm_state_mkFSMstate == 6'd25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd26 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"SPIFlashController.bsv\", line 67, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFlashFsm_action_l67c16]\n  and [RL_spiFlashFsm_action_l68c21, RL_spiFlashFsm_action_l69c21,\n  RL_spiFlashFsm_action_l70c21, RL_spiFlashFsm_action_l71c21,\n  RL_spiFlashFsm_action_l73c30, RL_spiFlashFsm_action_f_init_l75c17,\n  RL_spiFlashFsm_action_l76c32, RL_spiFlashFsm_action_l77c21,\n  RL_spiFlashFsm_action_l81c34, RL_spiFlashFsm_action_f_update_l75c17,\n  RL_spiFlashFsm_action_f_init_l84c17, RL_spiFlashFsm_action_l85c29,\n  RL_spiFlashFsm_action_l86c32, RL_spiFlashFsm_action_f_update_l84c17,\n  RL_spiFlashFsm_action_l88c16] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spiFlashFsm_action_l69c21 &&
	  (WILL_FIRE_RL_spiFlashFsm_action_l70c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l71c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l73c30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l76c32 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l77c21 ||
	   spiFlashFsm_state_mkFSMstate == 6'd25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd26 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"SPIFlashController.bsv\", line 69, column 21: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFlashFsm_action_l69c21]\n  and [RL_spiFlashFsm_action_l70c21, RL_spiFlashFsm_action_l71c21,\n  RL_spiFlashFsm_action_l73c30, RL_spiFlashFsm_action_f_init_l75c17,\n  RL_spiFlashFsm_action_l76c32, RL_spiFlashFsm_action_l77c21,\n  RL_spiFlashFsm_action_l81c34, RL_spiFlashFsm_action_f_update_l75c17,\n  RL_spiFlashFsm_action_f_init_l84c17, RL_spiFlashFsm_action_l85c29,\n  RL_spiFlashFsm_action_l86c32, RL_spiFlashFsm_action_f_update_l84c17,\n  RL_spiFlashFsm_action_l88c16] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spiFlashFsm_action_l70c21 &&
	  (WILL_FIRE_RL_spiFlashFsm_action_l71c21 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l73c30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l76c32 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l77c21 ||
	   spiFlashFsm_state_mkFSMstate == 6'd25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd26 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"SPIFlashController.bsv\", line 70, column 21: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFlashFsm_action_l70c21]\n  and [RL_spiFlashFsm_action_l71c21, RL_spiFlashFsm_action_l73c30,\n  RL_spiFlashFsm_action_f_init_l75c17, RL_spiFlashFsm_action_l76c32,\n  RL_spiFlashFsm_action_l77c21, RL_spiFlashFsm_action_l81c34,\n  RL_spiFlashFsm_action_f_update_l75c17, RL_spiFlashFsm_action_f_init_l84c17,\n  RL_spiFlashFsm_action_l85c29, RL_spiFlashFsm_action_l86c32,\n  RL_spiFlashFsm_action_f_update_l84c17, RL_spiFlashFsm_action_l88c16] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spiFlashFsm_action_l71c21 &&
	  (WILL_FIRE_RL_spiFlashFsm_action_l73c30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l76c32 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l77c21 ||
	   spiFlashFsm_state_mkFSMstate == 6'd25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd26 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"SPIFlashController.bsv\", line 71, column 21: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFlashFsm_action_l71c21]\n  and [RL_spiFlashFsm_action_l73c30, RL_spiFlashFsm_action_f_init_l75c17,\n  RL_spiFlashFsm_action_l76c32, RL_spiFlashFsm_action_l77c21,\n  RL_spiFlashFsm_action_l81c34, RL_spiFlashFsm_action_f_update_l75c17,\n  RL_spiFlashFsm_action_f_init_l84c17, RL_spiFlashFsm_action_l85c29,\n  RL_spiFlashFsm_action_l86c32, RL_spiFlashFsm_action_f_update_l84c17,\n  RL_spiFlashFsm_action_l88c16] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spiFlashFsm_action_l73c30 &&
	  (WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l76c32 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l77c21 ||
	   spiFlashFsm_state_mkFSMstate == 6'd25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd26 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"SPIFlashController.bsv\", line 73, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFlashFsm_action_l73c30]\n  and [RL_spiFlashFsm_action_f_init_l75c17, RL_spiFlashFsm_action_l76c32,\n  RL_spiFlashFsm_action_l77c21, RL_spiFlashFsm_action_l81c34,\n  RL_spiFlashFsm_action_f_update_l75c17, RL_spiFlashFsm_action_f_init_l84c17,\n  RL_spiFlashFsm_action_l85c29, RL_spiFlashFsm_action_l86c32,\n  RL_spiFlashFsm_action_f_update_l84c17, RL_spiFlashFsm_action_l88c16] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spiFlashFsm_action_f_init_l75c17 &&
	  (WILL_FIRE_RL_spiFlashFsm_action_l76c32 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l77c21 ||
	   spiFlashFsm_state_mkFSMstate == 6'd25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd26 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"SPIFlashController.bsv\", line 75, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_spiFlashFsm_action_f_init_l75c17] and [RL_spiFlashFsm_action_l76c32,\n  RL_spiFlashFsm_action_l77c21, RL_spiFlashFsm_action_l81c34,\n  RL_spiFlashFsm_action_f_update_l75c17, RL_spiFlashFsm_action_f_init_l84c17,\n  RL_spiFlashFsm_action_l85c29, RL_spiFlashFsm_action_l86c32,\n  RL_spiFlashFsm_action_f_update_l84c17, RL_spiFlashFsm_action_l88c16] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spiFlashFsm_action_l76c32 &&
	  (WILL_FIRE_RL_spiFlashFsm_action_l77c21 ||
	   spiFlashFsm_state_mkFSMstate == 6'd25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd26 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"SPIFlashController.bsv\", line 76, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFlashFsm_action_l76c32]\n  and [RL_spiFlashFsm_action_l77c21, RL_spiFlashFsm_action_l81c34,\n  RL_spiFlashFsm_action_f_update_l75c17, RL_spiFlashFsm_action_f_init_l84c17,\n  RL_spiFlashFsm_action_l85c29, RL_spiFlashFsm_action_l86c32,\n  RL_spiFlashFsm_action_f_update_l84c17, RL_spiFlashFsm_action_l88c16] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spiFlashFsm_action_l77c21 &&
	  (spiFlashFsm_state_mkFSMstate == 6'd25 ||
	   spiFlashFsm_state_mkFSMstate == 6'd26 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"SPIFlashController.bsv\", line 77, column 21: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFlashFsm_action_l77c21]\n  and [RL_spiFlashFsm_action_l81c34, RL_spiFlashFsm_action_f_update_l75c17,\n  RL_spiFlashFsm_action_f_init_l84c17, RL_spiFlashFsm_action_l85c29,\n  RL_spiFlashFsm_action_l86c32, RL_spiFlashFsm_action_f_update_l84c17,\n  RL_spiFlashFsm_action_l88c16] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (spiFlashFsm_state_mkFSMstate == 6'd25 &&
	  (spiFlashFsm_state_mkFSMstate == 6'd26 ||
	   WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"SPIFlashController.bsv\", line 81, column 34: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFlashFsm_action_l81c34]\n  and [RL_spiFlashFsm_action_f_update_l75c17,\n  RL_spiFlashFsm_action_f_init_l84c17, RL_spiFlashFsm_action_l85c29,\n  RL_spiFlashFsm_action_l86c32, RL_spiFlashFsm_action_f_update_l84c17,\n  RL_spiFlashFsm_action_l88c16] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (spiFlashFsm_state_mkFSMstate == 6'd26 &&
	  (WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"SPIFlashController.bsv\", line 75, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_spiFlashFsm_action_f_update_l75c17] and\n  [RL_spiFlashFsm_action_f_init_l84c17, RL_spiFlashFsm_action_l85c29,\n  RL_spiFlashFsm_action_l86c32, RL_spiFlashFsm_action_f_update_l84c17,\n  RL_spiFlashFsm_action_l88c16] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spiFlashFsm_action_f_init_l84c17 &&
	  (WILL_FIRE_RL_spiFlashFsm_action_l85c29 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"SPIFlashController.bsv\", line 84, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_spiFlashFsm_action_f_init_l84c17] and [RL_spiFlashFsm_action_l85c29,\n  RL_spiFlashFsm_action_l86c32, RL_spiFlashFsm_action_f_update_l84c17,\n  RL_spiFlashFsm_action_l88c16] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spiFlashFsm_action_l85c29 &&
	  (WILL_FIRE_RL_spiFlashFsm_action_l86c32 ||
	   spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"SPIFlashController.bsv\", line 85, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFlashFsm_action_l85c29]\n  and [RL_spiFlashFsm_action_l86c32, RL_spiFlashFsm_action_f_update_l84c17,\n  RL_spiFlashFsm_action_l88c16] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (spiFlashFsm_state_mkFSMstate == 6'd30 &&
	  WILL_FIRE_RL_spiFlashFsm_action_l88c16)
	$display("Error: \"SPIFlashController.bsv\", line 84, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_spiFlashFsm_action_f_update_l84c17] and [RL_spiFlashFsm_action_l88c16] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_spiFlashFsm_action_l86c32 &&
	  (spiFlashFsm_state_mkFSMstate == 6'd30 ||
	   WILL_FIRE_RL_spiFlashFsm_action_l88c16))
	$display("Error: \"SPIFlashController.bsv\", line 86, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFlashFsm_action_l86c32]\n  and [RL_spiFlashFsm_action_f_update_l84c17, RL_spiFlashFsm_action_l88c16] )\n  fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkSPIFlashController

