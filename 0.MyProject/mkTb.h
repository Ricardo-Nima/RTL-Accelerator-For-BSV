/*
 * Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
 * 
 * On Thu Jan 12 14:57:22 CST 2023
 * 
 */

/* Generation options: */
#ifndef __mkTb_h__
#define __mkTb_h__

#include "Types.h"
#include "bluesim_kernel_api.h"
#include <stdio.h>
#include <fstream>
#include <string>
#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkSPIWriter.h"


/* Class declaration for the mkTb module */
class MOD_mkTb : public Module {
 
 public:
	zj_core::ChangeLists outchange_spi_writer_spi;
	zj_core::ChangeLists outchange_spi_writer_hook_write_data;
	void print_changelists() {
		printf("top(mkTb)\n");
		printf("\toutchange_spi_writer_spi: ");
		for (auto& x : outchange_spi_writer_spi) {
			printf("%llu %llu|", x.at, x.val);
		}
		printf("\n");
		printf("\toutchange_spi_writer_hook_write_data: ");
		for (auto& x : outchange_spi_writer_hook_write_data) {
			printf("%llu %llu|", x.at, x.val);
		}
		printf("\n");
		printf("\n");
	}
	void generate_testbench(uint64_t sim_time, std::string cur_hierachy) {
		std::ofstream fout(cur_hierachy + ".v");
		std::string out_pre;
		std::string out_post;
		out_pre += "module testbench();\n";
		out_pre += " reg CLK, RST_N;\n";
		out_post += "always begin\n\t#5 CLK = ~CLK;\nend\n";
		out_post += "initial begin\n\tRST_N = 0;\n\t#1 CLK = 1;\n\t#1RST_n = 1;\nend\n";
		out_pre += " reg [3 : 0] spi_writer$spi;\n";
		out_post += " // port: spi_writer$spi\n";
		out_post += "initial begin\n";
		for (auto& x : outchange_spi_writer_spi) {
			out_post += "\t#" + std::to_string(x.at) + " " + "spi_writer$spi" + " = " + std::to_string(x.val) + "\n";
		}
		out_post += "end\n";
		out_pre += " reg [8 : 0] spi_writer$hook_write_data;\n";
		out_post += " // port: spi_writer$hook_write_data\n";
		out_post += "initial begin\n";
		for (auto& x : outchange_spi_writer_hook_write_data) {
			out_post += "\t#" + std::to_string(x.at) + " " + "spi_writer$hook_write_data" + " = " + std::to_string(x.val) + "\n";
		}
		out_post += "end\n";
		out_post += " // for en_regs \n\n";
		out_pre += " mkTb U1(.CLK(CLK), \n\t\t.RST_N(RST_N), \n\t\t.spi_writer$spi(spi_writer$spi), \n\t\t.spi_writer$hook_write_data(spi_writer$hook_write_data));\n";
		out_post += "initial begin\n";
		out_post += "\t#" + std::to_string(sim_time) + " $finish;\n";
		out_post += "end\n";
		fout << out_pre << out_post;
	}
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Wire<tUInt8> INST_abort;
  MOD_Reg<tUInt8> INST_running;
  MOD_mkSPIWriter INST_spi_writer;
  MOD_Reg<tUInt8> INST_start_reg;
  MOD_Reg<tUInt8> INST_start_reg_1;
  MOD_Wire<tUInt8> INST_start_reg_2;
  MOD_Wire<tUInt8> INST_start_wire;
  MOD_Reg<tUInt8> INST_state_can_overlap;
  MOD_Reg<tUInt8> INST_state_fired;
  MOD_Wire<tUInt8> INST_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_state_overlap_pw;
  MOD_Wire<tUInt8> INST_state_set_pw;
 
 /* Constructor */
 public:
  MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_action_l96c20;
  tUInt8 DEF_WILL_FIRE_RL_action_l95c20;
  tUInt8 DEF_WILL_FIRE_RL_action_l94c20;
 
 /* Local definitions */
 private:
  tUInt8 DEF_x_spi__h60;
 
 /* Rules */
 public:
  void RL_start_reg__dreg_update();
  void RL_state_handle_abort();
  void RL_state_fired__dreg_update();
  void RL_state_every();
  void RL_restart();
  void RL_action_l94c20();
  void RL_action_l95c20();
  void RL_action_l96c20();
  void RL_idle_l93c7();
  void RL_fsm_start();
  void RL_auto_start();
  void RL_auto_finish();
  void RL_get_all_variable();
  void RL_spi_show();
  void __me_check_5();
  void __me_check_6();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkTb &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkTb &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing);
};

#endif /* ifndef __mkTb_h__ */
