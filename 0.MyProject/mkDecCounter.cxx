/*
 * Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
 * 
 * On Thu Jan 12 14:57:22 CST 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkDecCounter.h"


/* Constructor */
MOD_mkDecCounter::MOD_mkDecCounter(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_cnt(simHdl, "cnt", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_mycnt(simHdl, "mycnt", this, 4u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 4u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkDecCounter::init_symbols_0()
{
  init_symbol(&symbols[0u], "cnt", SYM_MODULE, &INST_cnt);
  init_symbol(&symbols[1u], "mycnt", SYM_MODULE, &INST_mycnt);
  init_symbol(&symbols[2u], "RL_run_counter", SYM_RULE);
  init_symbol(&symbols[3u], "RL_run_mycnt", SYM_RULE);
}


/* Rule actions */

void MOD_mkDecCounter::RL_run_counter()
{
  tUInt8 DEF_IF_cnt_ULT_9_THEN_cnt_PLUS_1_ELSE_0___d4;
  DEF_b__h107 = INST_cnt.METH_read();
  DEF_cnt_ULT_9___d2 = DEF_b__h107 < (tUInt8)9u;
  DEF_IF_cnt_ULT_9_THEN_cnt_PLUS_1_ELSE_0___d4 = DEF_cnt_ULT_9___d2 ? (tUInt8)15u & (DEF_b__h107 + (tUInt8)1u) : (tUInt8)0u;
  INST_cnt.METH_write(DEF_IF_cnt_ULT_9_THEN_cnt_PLUS_1_ELSE_0___d4);
}

void MOD_mkDecCounter::RL_run_mycnt()
{
  INST_mycnt.METH_write((tUInt8)0u);
}


/* Methods */

tUInt8 MOD_mkDecCounter::METH_count()
{
  tUInt8 PORT_count;
  DEF_b__h107 = INST_cnt.METH_read();
  PORT_count = DEF_b__h107;
  return PORT_count;
}

tUInt8 MOD_mkDecCounter::METH_RDY_count()
{
  tUInt8 DEF_CAN_FIRE_count;
  tUInt8 PORT_RDY_count;
  DEF_CAN_FIRE_count = (tUInt8)1u;
  PORT_RDY_count = DEF_CAN_FIRE_count;
  return PORT_RDY_count;
}

tUInt8 MOD_mkDecCounter::METH_overflow()
{
  tUInt8 PORT_overflow;
  DEF_b__h107 = INST_cnt.METH_read();
  DEF_cnt_ULT_9___d2 = DEF_b__h107 < (tUInt8)9u;
  PORT_overflow = !DEF_cnt_ULT_9___d2;
  return PORT_overflow;
}

tUInt8 MOD_mkDecCounter::METH_RDY_overflow()
{
  tUInt8 DEF_CAN_FIRE_overflow;
  tUInt8 PORT_RDY_overflow;
  DEF_CAN_FIRE_overflow = (tUInt8)1u;
  PORT_RDY_overflow = DEF_CAN_FIRE_overflow;
  return PORT_RDY_overflow;
}


/* Reset routines */

void MOD_mkDecCounter::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_mycnt.reset_RST(ARG_rst_in);
  INST_cnt.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkDecCounter::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkDecCounter::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_cnt.dump_state(indent + 2u);
  INST_mycnt.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkDecCounter::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 5u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h107", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "cnt_ULT_9___d2", 1u);
  num = INST_cnt.dump_VCD_defs(num);
  num = INST_mycnt.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkDecCounter::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkDecCounter &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkDecCounter::vcd_defs(tVCDDumpType dt, MOD_mkDecCounter &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_b__h107) != DEF_b__h107)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h107, 4u);
	backing.DEF_b__h107 = DEF_b__h107;
      }
      ++num;
      if ((backing.DEF_cnt_ULT_9___d2) != DEF_cnt_ULT_9___d2)
      {
	vcd_write_val(sim_hdl, num, DEF_cnt_ULT_9___d2, 1u);
	backing.DEF_cnt_ULT_9___d2 = DEF_cnt_ULT_9___d2;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_b__h107, 4u);
      backing.DEF_b__h107 = DEF_b__h107;
      vcd_write_val(sim_hdl, num++, DEF_cnt_ULT_9___d2, 1u);
      backing.DEF_cnt_ULT_9___d2 = DEF_cnt_ULT_9___d2;
    }
}

void MOD_mkDecCounter::vcd_prims(tVCDDumpType dt, MOD_mkDecCounter &backing)
{
  INST_cnt.dump_VCD(dt, backing.INST_cnt);
  INST_mycnt.dump_VCD(dt, backing.INST_mycnt);
}
