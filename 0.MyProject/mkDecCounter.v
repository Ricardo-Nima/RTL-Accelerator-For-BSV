//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
//
// On Tue Jan 10 15:56:30 CST 2023
//
//
// Ports:
// Name                         I/O  size props
// count                          O     4 reg
// RDY_count                      O     1 const
// overflow                       O     1
// RDY_overflow                   O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDecCounter(CLK,
		    RST_N,

		    count,
		    RDY_count,

		    overflow,
		    RDY_overflow);
  input  CLK;
  input  RST_N;

  // value method count
  output [3 : 0] count;
  output RDY_count;

  // value method overflow
  output overflow;
  output RDY_overflow;

  // signals for module outputs
  wire [3 : 0] count;
  wire RDY_count, RDY_overflow, overflow;

  // register cnt
  reg [3 : 0] cnt;
  wire [3 : 0] cnt$D_IN;
  wire cnt$EN;

  // register mycnt
  reg [3 : 0] mycnt;
  wire [3 : 0] mycnt$D_IN;
  wire mycnt$EN;

  // remaining internal signals
  wire cnt_ULT_9___d2;

  // value method count
  assign count = cnt ;
  assign RDY_count = 1'd1 ;

  // value method overflow
  assign overflow = !cnt_ULT_9___d2 ;
  assign RDY_overflow = 1'd1 ;

  // register cnt
  assign cnt$D_IN = cnt_ULT_9___d2 ? cnt + 4'd1 : 4'd0 ;
  assign cnt$EN = 1'd1 ;

  // register mycnt
  assign mycnt$D_IN = 4'd0 ;
  assign mycnt$EN = 1'd1 ;

  // remaining internal signals
  assign cnt_ULT_9___d2 = cnt < 4'd9 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cnt <= `BSV_ASSIGNMENT_DELAY 4'd0;
	mycnt <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (cnt$EN) cnt <= `BSV_ASSIGNMENT_DELAY cnt$D_IN;
	if (mycnt$EN) mycnt <= `BSV_ASSIGNMENT_DELAY mycnt$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cnt = 4'hA;
    mycnt = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkDecCounter

