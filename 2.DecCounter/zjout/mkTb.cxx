/*
 * Generated by Bluespec Compiler (build 14ff62d)
 * 
 * On Tue Apr  4 20:57:44 CST 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkTb.h"


/* String declarations */
static std::string const __str_literal_1("count = %d overflow = %d ", 25u);
static std::string const __str_literal_2("count=%d, oflow=%d", 18u);


/* Constructor */
MOD_mkTb::MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_counter(simHdl, "counter", this),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 3u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTb::init_symbols_0()
{
  init_symbol(&symbols[0u], "counter", SYM_MODULE, &INST_counter);
  init_symbol(&symbols[1u], "RL_counter_show", SYM_RULE);
  init_symbol(&symbols[2u], "RL_get_all_variable", SYM_RULE);
}


/* Rule actions */

void MOD_mkTb::RL_get_all_variable()
{
	uint64_t cur_time = bk_now(sim_hdl);
	uint64_t tempval_counter_count = static_cast<uint64_t>(INST_counter.METH_count());
	if (outchange_counter_count._list.size() == 0 || tempval_counter_count != outchange_counter_count._list.back().val) {
		outchange_counter_count.emplace_back(cur_time, tempval_counter_count);
	}
	uint64_t tempval_counter_overflow = static_cast<uint64_t>(INST_counter.METH_overflow());
	if (outchange_counter_overflow._list.size() == 0 || tempval_counter_overflow != outchange_counter_overflow._list.back().val) {
		outchange_counter_overflow.emplace_back(cur_time, tempval_counter_overflow);
	}
}

void MOD_mkTb::RL_counter_show()
{
  tUInt8 DEF_NOT_counter_count_ULE_100___d5;
  DEF_b__h79 = INST_counter.METH_count();
  DEF_unsigned_counter_count___d2 = DEF_b__h79;
  DEF_counter_overflow____d3 = INST_counter.METH_overflow();
  DEF_NOT_counter_count_ULE_100___d5 = !(DEF_b__h79 <= 100u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl,
		   this,
		   "s,32,1",
		   &__str_literal_2,
		   DEF_unsigned_counter_count___d2,
		   DEF_counter_overflow____d3);
    if (DEF_NOT_counter_count_ULE_100___d5)
      dollar_finish(sim_hdl, "32", 1u);
  }
}


/* Methods */


/* Reset routines */

void MOD_mkTb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_counter.reset_RST_N(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_counter.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 4u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h79", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "counter_overflow____d3", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "unsigned_counter_count___d2", 32u);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_counter.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  vcd_defs(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkTb::vcd_defs(tVCDDumpType dt, MOD_mkTb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_b__h79) != DEF_b__h79)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h79, 32u);
	backing.DEF_b__h79 = DEF_b__h79;
      }
      ++num;
      if ((backing.DEF_counter_overflow____d3) != DEF_counter_overflow____d3)
      {
	vcd_write_val(sim_hdl, num, DEF_counter_overflow____d3, 1u);
	backing.DEF_counter_overflow____d3 = DEF_counter_overflow____d3;
      }
      ++num;
      if ((backing.DEF_unsigned_counter_count___d2) != DEF_unsigned_counter_count___d2)
      {
	vcd_write_val(sim_hdl, num, DEF_unsigned_counter_count___d2, 32u);
	backing.DEF_unsigned_counter_count___d2 = DEF_unsigned_counter_count___d2;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_b__h79, 32u);
      backing.DEF_b__h79 = DEF_b__h79;
      vcd_write_val(sim_hdl, num++, DEF_counter_overflow____d3, 1u);
      backing.DEF_counter_overflow____d3 = DEF_counter_overflow____d3;
      vcd_write_val(sim_hdl, num++, DEF_unsigned_counter_count___d2, 32u);
      backing.DEF_unsigned_counter_count___d2 = DEF_unsigned_counter_count___d2;
    }
}

void MOD_mkTb::vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  INST_counter.dump_VCD(dt, levels, backing.INST_counter);
}
