/*
 * Generated by Bluespec Compiler (build 14ff62d)
 * 
 * On Tue Apr  4 20:57:44 CST 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkSPIWriter.h"


/* String declarations */
static std::string const __str_literal_1("", 0u);
static std::string const __str_literal_2("Error: \"Hello.bsv\", line 30, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFsm_action_l30c13] and\n  [RL_spiFsm_action_l32c13, RL_spiFsm_action_l36c13, RL_spiFsm_action_l41c15,\n  RL_spiFsm_action_l42c13, RL_spiFsm_action_l43c14] ) fired in the same clock\n  cycle.\n",
					 288u);
static std::string const __str_literal_3("Error: \"Hello.bsv\", line 32, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFsm_action_l32c13] and\n  [RL_spiFsm_action_l36c13, RL_spiFsm_action_l41c15, RL_spiFsm_action_l42c13,\n  RL_spiFsm_action_l43c14] ) fired in the same clock cycle.\n",
					 261u);
static std::string const __str_literal_4("Error: \"Hello.bsv\", line 36, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFsm_action_l36c13] and\n  [RL_spiFsm_action_l41c15, RL_spiFsm_action_l42c13, RL_spiFsm_action_l43c14]\n  ) fired in the same clock cycle.\n",
					 236u);
static std::string const __str_literal_5("Error: \"Hello.bsv\", line 41, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFsm_action_l41c15] and\n  [RL_spiFsm_action_l42c13, RL_spiFsm_action_l43c14] ) fired in the same clock\n  cycle.\n",
					 211u);
static std::string const __str_literal_6("Error: \"Hello.bsv\", line 42, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_spiFsm_action_l42c13] and\n  [RL_spiFsm_action_l43c14] ) fired in the same clock cycle.\n",
					 184u);


/* Constructor */
MOD_mkSPIWriter::MOD_mkSPIWriter(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_cnt(simHdl, "cnt", this, 32u, 7u, (tUInt8)0u),
    INST_hook_reg_hook_write_data(simHdl, "hook_reg_hook_write_data", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_mosi(simHdl, "mosi", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_sck(simHdl, "sck", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_spiFsm_abort(simHdl, "spiFsm_abort", this, 1u, (tUInt8)0u),
    INST_spiFsm_start_reg(simHdl, "spiFsm_start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_spiFsm_start_reg_1(simHdl, "spiFsm_start_reg_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_spiFsm_start_reg_2(simHdl, "spiFsm_start_reg_2", this, 1u, (tUInt8)0u),
    INST_spiFsm_start_wire(simHdl, "spiFsm_start_wire", this, 1u, (tUInt8)0u),
    INST_spiFsm_state_can_overlap(simHdl, "spiFsm_state_can_overlap", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_spiFsm_state_fired(simHdl, "spiFsm_state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_spiFsm_state_fired_1(simHdl, "spiFsm_state_fired_1", this, 1u, (tUInt8)0u),
    INST_spiFsm_state_mkFSMstate(simHdl, "spiFsm_state_mkFSMstate", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_spiFsm_state_overlap_pw(simHdl, "spiFsm_state_overlap_pw", this, 0u),
    INST_spiFsm_state_set_pw(simHdl, "spiFsm_state_set_pw", this, 0u),
    INST_ss(simHdl, "ss", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_wdata(simHdl, "wdata", this, 8u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 46u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkSPIWriter::init_symbols_0()
{
  init_symbol(&symbols[0u], "__me_check_5", SYM_RULE);
  init_symbol(&symbols[1u], "__me_check_6", SYM_RULE);
  init_symbol(&symbols[2u], "__me_check_7", SYM_RULE);
  init_symbol(&symbols[3u], "__me_check_8", SYM_RULE);
  init_symbol(&symbols[4u], "__me_check_9", SYM_RULE);
  init_symbol(&symbols[5u], "cnt", SYM_MODULE, &INST_cnt);
  init_symbol(&symbols[6u], "hook_reg_hook_write_data", SYM_MODULE, &INST_hook_reg_hook_write_data);
  init_symbol(&symbols[7u], "mosi", SYM_MODULE, &INST_mosi);
  init_symbol(&symbols[8u], "RL_get_all_variable", SYM_RULE);
  init_symbol(&symbols[9u], "RL_spiFsm_action_l30c13", SYM_RULE);
  init_symbol(&symbols[10u], "RL_spiFsm_action_l32c13", SYM_RULE);
  init_symbol(&symbols[11u], "RL_spiFsm_action_l36c13", SYM_RULE);
  init_symbol(&symbols[12u], "RL_spiFsm_action_l41c15", SYM_RULE);
  init_symbol(&symbols[13u], "RL_spiFsm_action_l42c13", SYM_RULE);
  init_symbol(&symbols[14u], "RL_spiFsm_action_l43c14", SYM_RULE);
  init_symbol(&symbols[15u], "RL_spiFsm_fsm_start", SYM_RULE);
  init_symbol(&symbols[16u], "RL_spiFsm_idle_l29c7", SYM_RULE);
  init_symbol(&symbols[17u], "RL_spiFsm_restart", SYM_RULE);
  init_symbol(&symbols[18u], "RL_spiFsm_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[19u], "RL_spiFsm_state_every", SYM_RULE);
  init_symbol(&symbols[20u], "RL_spiFsm_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[21u], "RL_spiFsm_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[22u], "sck", SYM_MODULE, &INST_sck);
  init_symbol(&symbols[23u], "spiFsm_abort", SYM_MODULE, &INST_spiFsm_abort);
  init_symbol(&symbols[24u], "spiFsm_start_reg", SYM_MODULE, &INST_spiFsm_start_reg);
  init_symbol(&symbols[25u], "spiFsm_start_reg_1", SYM_MODULE, &INST_spiFsm_start_reg_1);
  init_symbol(&symbols[26u],
	      "spiFsm_start_reg_1__h15161",
	      SYM_DEF,
	      &DEF_spiFsm_start_reg_1__h15161,
	      1u);
  init_symbol(&symbols[27u], "spiFsm_start_reg_2", SYM_MODULE, &INST_spiFsm_start_reg_2);
  init_symbol(&symbols[28u], "spiFsm_start_reg__h17356", SYM_DEF, &DEF_spiFsm_start_reg__h17356, 1u);
  init_symbol(&symbols[29u], "spiFsm_start_wire", SYM_MODULE, &INST_spiFsm_start_wire);
  init_symbol(&symbols[30u], "spiFsm_state_can_overlap", SYM_MODULE, &INST_spiFsm_state_can_overlap);
  init_symbol(&symbols[31u], "spiFsm_state_fired", SYM_MODULE, &INST_spiFsm_state_fired);
  init_symbol(&symbols[32u], "spiFsm_state_fired_1", SYM_MODULE, &INST_spiFsm_state_fired_1);
  init_symbol(&symbols[33u],
	      "spiFsm_state_fired__h15163",
	      SYM_DEF,
	      &DEF_spiFsm_state_fired__h15163,
	      1u);
  init_symbol(&symbols[34u], "spiFsm_state_mkFSMstate", SYM_MODULE, &INST_spiFsm_state_mkFSMstate);
  init_symbol(&symbols[35u], "spiFsm_state_overlap_pw", SYM_MODULE, &INST_spiFsm_state_overlap_pw);
  init_symbol(&symbols[36u], "spiFsm_state_set_pw", SYM_MODULE, &INST_spiFsm_state_set_pw);
  init_symbol(&symbols[37u], "ss", SYM_MODULE, &INST_ss);
  init_symbol(&symbols[38u],
	      "WILL_FIRE_RL_spiFsm_action_l30c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_spiFsm_action_l30c13,
	      1u);
  init_symbol(&symbols[39u],
	      "WILL_FIRE_RL_spiFsm_action_l32c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_spiFsm_action_l32c13,
	      1u);
  init_symbol(&symbols[40u],
	      "WILL_FIRE_RL_spiFsm_action_l36c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_spiFsm_action_l36c13,
	      1u);
  init_symbol(&symbols[41u],
	      "WILL_FIRE_RL_spiFsm_action_l41c15",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_spiFsm_action_l41c15,
	      1u);
  init_symbol(&symbols[42u],
	      "WILL_FIRE_RL_spiFsm_action_l42c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_spiFsm_action_l42c13,
	      1u);
  init_symbol(&symbols[43u],
	      "WILL_FIRE_RL_spiFsm_action_l43c14",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_spiFsm_action_l43c14,
	      1u);
  init_symbol(&symbols[44u], "wdata", SYM_MODULE, &INST_wdata);
  init_symbol(&symbols[45u], "x__h16071", SYM_DEF, &DEF_x__h16071, 32u);
}


/* Rule actions */

void MOD_mkSPIWriter::RL_spiFsm_start_reg__dreg_update()
{
  tUInt8 DEF_spiFsm_start_reg_2_whas_AND_spiFsm_start_reg_2_ETC___d3;
  DEF_spiFsm_start_reg_2_whas_AND_spiFsm_start_reg_2_ETC___d3 = INST_spiFsm_start_reg_2.METH_whas() && INST_spiFsm_start_reg_2.METH_wget();
  INST_spiFsm_start_reg_1.METH_write(DEF_spiFsm_start_reg_2_whas_AND_spiFsm_start_reg_2_ETC___d3);
}

void MOD_mkSPIWriter::RL_spiFsm_state_handle_abort()
{
  INST_spiFsm_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkSPIWriter::RL_spiFsm_state_fired__dreg_update()
{
  tUInt8 DEF_spiFsm_state_fired_1_whas__3_AND_spiFsm_state__ETC___d15;
  DEF_spiFsm_state_fired_1_whas__3_AND_spiFsm_state__ETC___d15 = INST_spiFsm_state_fired_1.METH_whas() && INST_spiFsm_state_fired_1.METH_wget();
  INST_spiFsm_state_fired.METH_write(DEF_spiFsm_state_fired_1_whas__3_AND_spiFsm_state__ETC___d15);
}

void MOD_mkSPIWriter::RL_spiFsm_state_every()
{
  tUInt8 DEF_spiFsm_state_set_pw_whas__6_OR_NOT_spiFsm_stat_ETC___d21;
  tUInt8 DEF_spiFsm_state_can_overlap__h2667;
  DEF_spiFsm_state_can_overlap__h2667 = INST_spiFsm_state_can_overlap.METH_read();
  DEF_spiFsm_state_set_pw_whas__6_OR_NOT_spiFsm_stat_ETC___d21 = INST_spiFsm_state_set_pw.METH_whas() || (!INST_spiFsm_state_overlap_pw.METH_whas() && DEF_spiFsm_state_can_overlap__h2667);
  INST_spiFsm_state_can_overlap.METH_write(DEF_spiFsm_state_set_pw_whas__6_OR_NOT_spiFsm_stat_ETC___d21);
}

void MOD_mkSPIWriter::RL_spiFsm_restart()
{
  INST_spiFsm_start_wire.METH_wset((tUInt8)1u);
  INST_spiFsm_start_reg_2.METH_wset((tUInt8)1u);
}

void MOD_mkSPIWriter::RL_spiFsm_action_l30c13()
{
  INST_spiFsm_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_spiFsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_spiFsm_state_set_pw.METH_wset();
  INST_ss.METH_write((tUInt8)0u);
}

void MOD_mkSPIWriter::RL_spiFsm_action_l32c13()
{
  tUInt8 DEF_x__h16035;
  tUInt8 DEF_cnt_7_BITS_2_TO_0___d46;
  tUInt8 DEF_bs__h16041;
  DEF_x__h16071 = INST_cnt.METH_read();
  DEF_bs__h16041 = INST_wdata.METH_read();
  DEF_cnt_7_BITS_2_TO_0___d46 = (tUInt8)((tUInt8)7u & DEF_x__h16071);
  DEF_x__h16035 = primExtract8(1u,
			       8u,
			       (tUInt8)(DEF_bs__h16041),
			       3u,
			       (tUInt8)(DEF_cnt_7_BITS_2_TO_0___d46),
			       3u,
			       (tUInt8)(DEF_cnt_7_BITS_2_TO_0___d46));
  INST_spiFsm_state_mkFSMstate.METH_write((tUInt8)2u);
  INST_spiFsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_spiFsm_state_set_pw.METH_wset();
  INST_sck.METH_write((tUInt8)0u);
  INST_mosi.METH_write(DEF_x__h16035);
}

void MOD_mkSPIWriter::RL_spiFsm_action_l36c13()
{
  tUInt32 DEF_cnt_7_MINUS_1___d50;
  DEF_x__h16071 = INST_cnt.METH_read();
  DEF_cnt_7_MINUS_1___d50 = DEF_x__h16071 - 1u;
  INST_spiFsm_state_mkFSMstate.METH_write((tUInt8)3u);
  INST_spiFsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_spiFsm_state_set_pw.METH_wset();
  INST_cnt.METH_write(DEF_cnt_7_MINUS_1___d50);
  INST_sck.METH_write((tUInt8)1u);
}

void MOD_mkSPIWriter::RL_spiFsm_action_l41c15()
{
  INST_spiFsm_state_mkFSMstate.METH_write((tUInt8)4u);
  INST_spiFsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_spiFsm_state_set_pw.METH_wset();
  INST_mosi.METH_write((tUInt8)1u);
}

void MOD_mkSPIWriter::RL_spiFsm_action_l42c13()
{
  INST_spiFsm_state_mkFSMstate.METH_write((tUInt8)5u);
  INST_spiFsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_spiFsm_state_set_pw.METH_wset();
  INST_ss.METH_write((tUInt8)1u);
}

void MOD_mkSPIWriter::RL_spiFsm_action_l43c14()
{
  INST_spiFsm_state_mkFSMstate.METH_write((tUInt8)6u);
  INST_spiFsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_spiFsm_state_set_pw.METH_wset();
  INST_cnt.METH_write(7u);
}

void MOD_mkSPIWriter::RL_spiFsm_idle_l29c7()
{
  INST_spiFsm_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_spiFsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_spiFsm_state_set_pw.METH_wset();
}

void MOD_mkSPIWriter::RL_spiFsm_fsm_start()
{
  INST_spiFsm_start_wire.METH_wset((tUInt8)1u);
  INST_spiFsm_start_reg_2.METH_wset((tUInt8)1u);
  INST_spiFsm_start_reg.METH_write((tUInt8)0u);
}

void MOD_mkSPIWriter::RL_get_all_variable()
{
	uint64_t cur_time = bk_now(sim_hdl);
	uint64_t tempval_write_data = static_cast<uint64_t>(METH_hook_write_data());
	if (inchange_write_data._list.size() == 0 || tempval_write_data != inchange_write_data._list.back().val) {
		inchange_write_data.emplace_back(cur_time, tempval_write_data);
	}
}

void MOD_mkSPIWriter::__me_check_5()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_spiFsm_action_l30c13 && ((((DEF_WILL_FIRE_RL_spiFsm_action_l32c13 || DEF_WILL_FIRE_RL_spiFsm_action_l36c13) || DEF_WILL_FIRE_RL_spiFsm_action_l41c15) || DEF_WILL_FIRE_RL_spiFsm_action_l42c13) || DEF_WILL_FIRE_RL_spiFsm_action_l43c14))
      dollar_error(sim_hdl, this, "s", &__str_literal_2);
}

void MOD_mkSPIWriter::__me_check_6()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_spiFsm_action_l32c13 && (((DEF_WILL_FIRE_RL_spiFsm_action_l36c13 || DEF_WILL_FIRE_RL_spiFsm_action_l41c15) || DEF_WILL_FIRE_RL_spiFsm_action_l42c13) || DEF_WILL_FIRE_RL_spiFsm_action_l43c14))
      dollar_error(sim_hdl, this, "s", &__str_literal_3);
}

void MOD_mkSPIWriter::__me_check_7()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_spiFsm_action_l36c13 && ((DEF_WILL_FIRE_RL_spiFsm_action_l41c15 || DEF_WILL_FIRE_RL_spiFsm_action_l42c13) || DEF_WILL_FIRE_RL_spiFsm_action_l43c14))
      dollar_error(sim_hdl, this, "s", &__str_literal_4);
}

void MOD_mkSPIWriter::__me_check_8()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_spiFsm_action_l41c15 && (DEF_WILL_FIRE_RL_spiFsm_action_l42c13 || DEF_WILL_FIRE_RL_spiFsm_action_l43c14))
      dollar_error(sim_hdl, this, "s", &__str_literal_5);
}

void MOD_mkSPIWriter::__me_check_9()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_spiFsm_action_l42c13 && DEF_WILL_FIRE_RL_spiFsm_action_l43c14)
      dollar_error(sim_hdl, this, "s", &__str_literal_6);
}


/* Methods */

void MOD_mkSPIWriter::METH_write(tUInt8 ARG_write_data)
{
  INST_hook_reg_hook_write_data.METH_write(ARG_write_data);
  INST_wdata.METH_write(ARG_write_data);
  INST_spiFsm_start_reg.METH_write((tUInt8)1u);
}

tUInt8 MOD_mkSPIWriter::METH_RDY_write()
{
  tUInt8 DEF_CAN_FIRE_write;
  tUInt8 PORT_RDY_write;
  DEF_spiFsm_state_mkFSMstate_read____d31 = INST_spiFsm_state_mkFSMstate.METH_read();
  DEF_spiFsm_state_fired__h15163 = INST_spiFsm_state_fired.METH_read();
  DEF_spiFsm_abort_whas____d4 = INST_spiFsm_abort.METH_whas();
  DEF_spiFsm_abort_wget____d5 = INST_spiFsm_abort.METH_wget();
  DEF_spiFsm_start_reg_1__h15161 = INST_spiFsm_start_reg_1.METH_read();
  DEF_spiFsm_start_reg__h17356 = INST_spiFsm_start_reg.METH_read();
  DEF_spiFsm_state_mkFSMstate_read__1_EQ_6___d34 = DEF_spiFsm_state_mkFSMstate_read____d31 == (tUInt8)6u;
  DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget___d6 = DEF_spiFsm_abort_whas____d4 && DEF_spiFsm_abort_wget____d5;
  DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget_OR_spi_ETC___d35 = (DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget___d6 || DEF_spiFsm_state_mkFSMstate_read____d31 == (tUInt8)0u) || DEF_spiFsm_state_mkFSMstate_read__1_EQ_6___d34;
  DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget_OR_spi_ETC___d60 = DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget_OR_spi_ETC___d35 && (!DEF_spiFsm_start_reg_1__h15161 || DEF_spiFsm_state_fired__h15163);
  DEF_CAN_FIRE_write = DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget_OR_spi_ETC___d60 && !DEF_spiFsm_start_reg__h17356;
  PORT_RDY_write = DEF_CAN_FIRE_write;
  return PORT_RDY_write;
}

tUInt8 MOD_mkSPIWriter::METH_hook_write_data()
{
  tUInt8 PORT_hook_write_data;
  PORT_hook_write_data = INST_hook_reg_hook_write_data.METH_read();
  return PORT_hook_write_data;
}

tUInt8 MOD_mkSPIWriter::METH_RDY_hook_write_data()
{
  tUInt8 DEF_CAN_FIRE_hook_write_data;
  tUInt8 PORT_RDY_hook_write_data;
  DEF_CAN_FIRE_hook_write_data = (tUInt8)1u;
  PORT_RDY_hook_write_data = DEF_CAN_FIRE_hook_write_data;
  return PORT_RDY_hook_write_data;
}

tUInt8 MOD_mkSPIWriter::METH_spi()
{
  tUInt8 DEF__read__h84;
  tUInt8 DEF__read__h115;
  tUInt8 DEF__read__h146;
  tUInt8 PORT_spi;
  DEF__read__h146 = INST_mosi.METH_read();
  DEF__read__h115 = INST_sck.METH_read();
  DEF__read__h84 = INST_ss.METH_read();
  PORT_spi = (tUInt8)7u & (((DEF__read__h84 << 2u) | (DEF__read__h115 << 1u)) | DEF__read__h146);
  return PORT_spi;
}

tUInt8 MOD_mkSPIWriter::METH_RDY_spi()
{
  tUInt8 DEF_CAN_FIRE_spi;
  tUInt8 PORT_RDY_spi;
  DEF_CAN_FIRE_spi = (tUInt8)1u;
  PORT_RDY_spi = DEF_CAN_FIRE_spi;
  return PORT_RDY_spi;
}


/* Reset routines */

void MOD_mkSPIWriter::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_wdata.reset_RST(ARG_rst_in);
  INST_ss.reset_RST(ARG_rst_in);
  INST_spiFsm_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_spiFsm_state_fired.reset_RST(ARG_rst_in);
  INST_spiFsm_state_can_overlap.reset_RST(ARG_rst_in);
  INST_spiFsm_start_reg_1.reset_RST(ARG_rst_in);
  INST_spiFsm_start_reg.reset_RST(ARG_rst_in);
  INST_sck.reset_RST(ARG_rst_in);
  INST_mosi.reset_RST(ARG_rst_in);
  INST_hook_reg_hook_write_data.reset_RST(ARG_rst_in);
  INST_cnt.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkSPIWriter::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkSPIWriter::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_cnt.dump_state(indent + 2u);
  INST_hook_reg_hook_write_data.dump_state(indent + 2u);
  INST_mosi.dump_state(indent + 2u);
  INST_sck.dump_state(indent + 2u);
  INST_spiFsm_abort.dump_state(indent + 2u);
  INST_spiFsm_start_reg.dump_state(indent + 2u);
  INST_spiFsm_start_reg_1.dump_state(indent + 2u);
  INST_spiFsm_start_reg_2.dump_state(indent + 2u);
  INST_spiFsm_start_wire.dump_state(indent + 2u);
  INST_spiFsm_state_can_overlap.dump_state(indent + 2u);
  INST_spiFsm_state_fired.dump_state(indent + 2u);
  INST_spiFsm_state_fired_1.dump_state(indent + 2u);
  INST_spiFsm_state_mkFSMstate.dump_state(indent + 2u);
  INST_spiFsm_state_overlap_pw.dump_state(indent + 2u);
  INST_spiFsm_state_set_pw.dump_state(indent + 2u);
  INST_ss.dump_state(indent + 2u);
  INST_wdata.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkSPIWriter::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 35u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_spiFsm_action_l30c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_spiFsm_action_l32c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_spiFsm_action_l36c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_spiFsm_action_l41c15", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_spiFsm_action_l42c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_spiFsm_action_l43c14", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "spiFsm_abort_wget____d5", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "spiFsm_abort_whas_AND_spiFsm_abort_wget_OR_spi_ETC___d35", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "spiFsm_abort_whas_AND_spiFsm_abort_wget_OR_spi_ETC___d60", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "spiFsm_abort_whas_AND_spiFsm_abort_wget___d6", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "spiFsm_abort_whas____d4", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "spiFsm_start_reg_1__h15161", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "spiFsm_start_reg__h17356", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "spiFsm_state_fired__h15163", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "spiFsm_state_mkFSMstate_read__1_EQ_6___d34", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "spiFsm_state_mkFSMstate_read____d31", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h16071", 32u);
  num = INST_cnt.dump_VCD_defs(num);
  num = INST_hook_reg_hook_write_data.dump_VCD_defs(num);
  num = INST_mosi.dump_VCD_defs(num);
  num = INST_sck.dump_VCD_defs(num);
  num = INST_spiFsm_abort.dump_VCD_defs(num);
  num = INST_spiFsm_start_reg.dump_VCD_defs(num);
  num = INST_spiFsm_start_reg_1.dump_VCD_defs(num);
  num = INST_spiFsm_start_reg_2.dump_VCD_defs(num);
  num = INST_spiFsm_start_wire.dump_VCD_defs(num);
  num = INST_spiFsm_state_can_overlap.dump_VCD_defs(num);
  num = INST_spiFsm_state_fired.dump_VCD_defs(num);
  num = INST_spiFsm_state_fired_1.dump_VCD_defs(num);
  num = INST_spiFsm_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_spiFsm_state_overlap_pw.dump_VCD_defs(num);
  num = INST_spiFsm_state_set_pw.dump_VCD_defs(num);
  num = INST_ss.dump_VCD_defs(num);
  num = INST_wdata.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkSPIWriter::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkSPIWriter &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkSPIWriter::vcd_defs(tVCDDumpType dt, MOD_mkSPIWriter &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_spiFsm_action_l30c13) != DEF_WILL_FIRE_RL_spiFsm_action_l30c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_spiFsm_action_l30c13, 1u);
	backing.DEF_WILL_FIRE_RL_spiFsm_action_l30c13 = DEF_WILL_FIRE_RL_spiFsm_action_l30c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_spiFsm_action_l32c13) != DEF_WILL_FIRE_RL_spiFsm_action_l32c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_spiFsm_action_l32c13, 1u);
	backing.DEF_WILL_FIRE_RL_spiFsm_action_l32c13 = DEF_WILL_FIRE_RL_spiFsm_action_l32c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_spiFsm_action_l36c13) != DEF_WILL_FIRE_RL_spiFsm_action_l36c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_spiFsm_action_l36c13, 1u);
	backing.DEF_WILL_FIRE_RL_spiFsm_action_l36c13 = DEF_WILL_FIRE_RL_spiFsm_action_l36c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_spiFsm_action_l41c15) != DEF_WILL_FIRE_RL_spiFsm_action_l41c15)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_spiFsm_action_l41c15, 1u);
	backing.DEF_WILL_FIRE_RL_spiFsm_action_l41c15 = DEF_WILL_FIRE_RL_spiFsm_action_l41c15;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_spiFsm_action_l42c13) != DEF_WILL_FIRE_RL_spiFsm_action_l42c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_spiFsm_action_l42c13, 1u);
	backing.DEF_WILL_FIRE_RL_spiFsm_action_l42c13 = DEF_WILL_FIRE_RL_spiFsm_action_l42c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_spiFsm_action_l43c14) != DEF_WILL_FIRE_RL_spiFsm_action_l43c14)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_spiFsm_action_l43c14, 1u);
	backing.DEF_WILL_FIRE_RL_spiFsm_action_l43c14 = DEF_WILL_FIRE_RL_spiFsm_action_l43c14;
      }
      ++num;
      if ((backing.DEF_spiFsm_abort_wget____d5) != DEF_spiFsm_abort_wget____d5)
      {
	vcd_write_val(sim_hdl, num, DEF_spiFsm_abort_wget____d5, 1u);
	backing.DEF_spiFsm_abort_wget____d5 = DEF_spiFsm_abort_wget____d5;
      }
      ++num;
      if ((backing.DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget_OR_spi_ETC___d35) != DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget_OR_spi_ETC___d35)
      {
	vcd_write_val(sim_hdl, num, DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget_OR_spi_ETC___d35, 1u);
	backing.DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget_OR_spi_ETC___d35 = DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget_OR_spi_ETC___d35;
      }
      ++num;
      if ((backing.DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget_OR_spi_ETC___d60) != DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget_OR_spi_ETC___d60)
      {
	vcd_write_val(sim_hdl, num, DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget_OR_spi_ETC___d60, 1u);
	backing.DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget_OR_spi_ETC___d60 = DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget_OR_spi_ETC___d60;
      }
      ++num;
      if ((backing.DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget___d6) != DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget___d6)
      {
	vcd_write_val(sim_hdl, num, DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget___d6, 1u);
	backing.DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget___d6 = DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget___d6;
      }
      ++num;
      if ((backing.DEF_spiFsm_abort_whas____d4) != DEF_spiFsm_abort_whas____d4)
      {
	vcd_write_val(sim_hdl, num, DEF_spiFsm_abort_whas____d4, 1u);
	backing.DEF_spiFsm_abort_whas____d4 = DEF_spiFsm_abort_whas____d4;
      }
      ++num;
      if ((backing.DEF_spiFsm_start_reg_1__h15161) != DEF_spiFsm_start_reg_1__h15161)
      {
	vcd_write_val(sim_hdl, num, DEF_spiFsm_start_reg_1__h15161, 1u);
	backing.DEF_spiFsm_start_reg_1__h15161 = DEF_spiFsm_start_reg_1__h15161;
      }
      ++num;
      if ((backing.DEF_spiFsm_start_reg__h17356) != DEF_spiFsm_start_reg__h17356)
      {
	vcd_write_val(sim_hdl, num, DEF_spiFsm_start_reg__h17356, 1u);
	backing.DEF_spiFsm_start_reg__h17356 = DEF_spiFsm_start_reg__h17356;
      }
      ++num;
      if ((backing.DEF_spiFsm_state_fired__h15163) != DEF_spiFsm_state_fired__h15163)
      {
	vcd_write_val(sim_hdl, num, DEF_spiFsm_state_fired__h15163, 1u);
	backing.DEF_spiFsm_state_fired__h15163 = DEF_spiFsm_state_fired__h15163;
      }
      ++num;
      if ((backing.DEF_spiFsm_state_mkFSMstate_read__1_EQ_6___d34) != DEF_spiFsm_state_mkFSMstate_read__1_EQ_6___d34)
      {
	vcd_write_val(sim_hdl, num, DEF_spiFsm_state_mkFSMstate_read__1_EQ_6___d34, 1u);
	backing.DEF_spiFsm_state_mkFSMstate_read__1_EQ_6___d34 = DEF_spiFsm_state_mkFSMstate_read__1_EQ_6___d34;
      }
      ++num;
      if ((backing.DEF_spiFsm_state_mkFSMstate_read____d31) != DEF_spiFsm_state_mkFSMstate_read____d31)
      {
	vcd_write_val(sim_hdl, num, DEF_spiFsm_state_mkFSMstate_read____d31, 4u);
	backing.DEF_spiFsm_state_mkFSMstate_read____d31 = DEF_spiFsm_state_mkFSMstate_read____d31;
      }
      ++num;
      if ((backing.DEF_x__h16071) != DEF_x__h16071)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h16071, 32u);
	backing.DEF_x__h16071 = DEF_x__h16071;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_spiFsm_action_l30c13, 1u);
      backing.DEF_WILL_FIRE_RL_spiFsm_action_l30c13 = DEF_WILL_FIRE_RL_spiFsm_action_l30c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_spiFsm_action_l32c13, 1u);
      backing.DEF_WILL_FIRE_RL_spiFsm_action_l32c13 = DEF_WILL_FIRE_RL_spiFsm_action_l32c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_spiFsm_action_l36c13, 1u);
      backing.DEF_WILL_FIRE_RL_spiFsm_action_l36c13 = DEF_WILL_FIRE_RL_spiFsm_action_l36c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_spiFsm_action_l41c15, 1u);
      backing.DEF_WILL_FIRE_RL_spiFsm_action_l41c15 = DEF_WILL_FIRE_RL_spiFsm_action_l41c15;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_spiFsm_action_l42c13, 1u);
      backing.DEF_WILL_FIRE_RL_spiFsm_action_l42c13 = DEF_WILL_FIRE_RL_spiFsm_action_l42c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_spiFsm_action_l43c14, 1u);
      backing.DEF_WILL_FIRE_RL_spiFsm_action_l43c14 = DEF_WILL_FIRE_RL_spiFsm_action_l43c14;
      vcd_write_val(sim_hdl, num++, DEF_spiFsm_abort_wget____d5, 1u);
      backing.DEF_spiFsm_abort_wget____d5 = DEF_spiFsm_abort_wget____d5;
      vcd_write_val(sim_hdl, num++, DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget_OR_spi_ETC___d35, 1u);
      backing.DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget_OR_spi_ETC___d35 = DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget_OR_spi_ETC___d35;
      vcd_write_val(sim_hdl, num++, DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget_OR_spi_ETC___d60, 1u);
      backing.DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget_OR_spi_ETC___d60 = DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget_OR_spi_ETC___d60;
      vcd_write_val(sim_hdl, num++, DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget___d6, 1u);
      backing.DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget___d6 = DEF_spiFsm_abort_whas_AND_spiFsm_abort_wget___d6;
      vcd_write_val(sim_hdl, num++, DEF_spiFsm_abort_whas____d4, 1u);
      backing.DEF_spiFsm_abort_whas____d4 = DEF_spiFsm_abort_whas____d4;
      vcd_write_val(sim_hdl, num++, DEF_spiFsm_start_reg_1__h15161, 1u);
      backing.DEF_spiFsm_start_reg_1__h15161 = DEF_spiFsm_start_reg_1__h15161;
      vcd_write_val(sim_hdl, num++, DEF_spiFsm_start_reg__h17356, 1u);
      backing.DEF_spiFsm_start_reg__h17356 = DEF_spiFsm_start_reg__h17356;
      vcd_write_val(sim_hdl, num++, DEF_spiFsm_state_fired__h15163, 1u);
      backing.DEF_spiFsm_state_fired__h15163 = DEF_spiFsm_state_fired__h15163;
      vcd_write_val(sim_hdl, num++, DEF_spiFsm_state_mkFSMstate_read__1_EQ_6___d34, 1u);
      backing.DEF_spiFsm_state_mkFSMstate_read__1_EQ_6___d34 = DEF_spiFsm_state_mkFSMstate_read__1_EQ_6___d34;
      vcd_write_val(sim_hdl, num++, DEF_spiFsm_state_mkFSMstate_read____d31, 4u);
      backing.DEF_spiFsm_state_mkFSMstate_read____d31 = DEF_spiFsm_state_mkFSMstate_read____d31;
      vcd_write_val(sim_hdl, num++, DEF_x__h16071, 32u);
      backing.DEF_x__h16071 = DEF_x__h16071;
    }
}

void MOD_mkSPIWriter::vcd_prims(tVCDDumpType dt, MOD_mkSPIWriter &backing)
{
  INST_cnt.dump_VCD(dt, backing.INST_cnt);
  INST_hook_reg_hook_write_data.dump_VCD(dt, backing.INST_hook_reg_hook_write_data);
  INST_mosi.dump_VCD(dt, backing.INST_mosi);
  INST_sck.dump_VCD(dt, backing.INST_sck);
  INST_spiFsm_abort.dump_VCD(dt, backing.INST_spiFsm_abort);
  INST_spiFsm_start_reg.dump_VCD(dt, backing.INST_spiFsm_start_reg);
  INST_spiFsm_start_reg_1.dump_VCD(dt, backing.INST_spiFsm_start_reg_1);
  INST_spiFsm_start_reg_2.dump_VCD(dt, backing.INST_spiFsm_start_reg_2);
  INST_spiFsm_start_wire.dump_VCD(dt, backing.INST_spiFsm_start_wire);
  INST_spiFsm_state_can_overlap.dump_VCD(dt, backing.INST_spiFsm_state_can_overlap);
  INST_spiFsm_state_fired.dump_VCD(dt, backing.INST_spiFsm_state_fired);
  INST_spiFsm_state_fired_1.dump_VCD(dt, backing.INST_spiFsm_state_fired_1);
  INST_spiFsm_state_mkFSMstate.dump_VCD(dt, backing.INST_spiFsm_state_mkFSMstate);
  INST_spiFsm_state_overlap_pw.dump_VCD(dt, backing.INST_spiFsm_state_overlap_pw);
  INST_spiFsm_state_set_pw.dump_VCD(dt, backing.INST_spiFsm_state_set_pw);
  INST_ss.dump_VCD(dt, backing.INST_ss);
  INST_wdata.dump_VCD(dt, backing.INST_wdata);
}
